
mqtt_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf0  08008be8  08008be8  00009be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098d8  080098d8  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080098d8  080098d8  0000a8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e0  080098e0  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e0  080098e0  0000a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098e4  080098e4  0000a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080098e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b6c  200001d8  08009ac0  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d44  08009ac0  0000bd44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f362  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a47  00000000  00000000  0001a563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0001cfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be0  00000000  00000000  0001df00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2cf  00000000  00000000  0001eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f5c  00000000  00000000  00038daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009186a  00000000  00000000  0004bd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053bc  00000000  00000000  000dd5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e2974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008bcc 	.word	0x08008bcc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008bcc 	.word	0x08008bcc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d801      	bhi.n	80010ea <jsmn_alloc_token+0x1a>
    return NULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e014      	b.n	8001114 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	1c59      	adds	r1, r3, #1
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	6051      	str	r1, [r2, #4]
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	4413      	add	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8001112:	697b      	ldr	r3, [r7, #20]
}
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	460b      	mov	r3, r1
 800112c:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	7afa      	ldrb	r2, [r7, #11]
 8001132:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	605a      	str	r2, [r3, #4]
  token->end = end;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001164:	e03f      	b.n	80011e6 <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b7d      	cmp	r3, #125	@ 0x7d
 8001172:	d045      	beq.n	8001200 <jsmn_parse_primitive+0xb0>
 8001174:	2b7d      	cmp	r3, #125	@ 0x7d
 8001176:	dc1c      	bgt.n	80011b2 <jsmn_parse_primitive+0x62>
 8001178:	2b5d      	cmp	r3, #93	@ 0x5d
 800117a:	d041      	beq.n	8001200 <jsmn_parse_primitive+0xb0>
 800117c:	2b5d      	cmp	r3, #93	@ 0x5d
 800117e:	dc18      	bgt.n	80011b2 <jsmn_parse_primitive+0x62>
 8001180:	2b3a      	cmp	r3, #58	@ 0x3a
 8001182:	dc16      	bgt.n	80011b2 <jsmn_parse_primitive+0x62>
 8001184:	2b20      	cmp	r3, #32
 8001186:	da04      	bge.n	8001192 <jsmn_parse_primitive+0x42>
 8001188:	2b0a      	cmp	r3, #10
 800118a:	dc10      	bgt.n	80011ae <jsmn_parse_primitive+0x5e>
 800118c:	2b09      	cmp	r3, #9
 800118e:	da37      	bge.n	8001200 <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8001190:	e00f      	b.n	80011b2 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8001192:	3b20      	subs	r3, #32
 8001194:	4a31      	ldr	r2, [pc, #196]	@ (800125c <jsmn_parse_primitive+0x10c>)
 8001196:	fa22 f303 	lsr.w	r3, r2, r3
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bf14      	ite	ne
 80011a2:	2301      	movne	r3, #1
 80011a4:	2300      	moveq	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d129      	bne.n	8001200 <jsmn_parse_primitive+0xb0>
      break;
 80011ac:	e001      	b.n	80011b2 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 80011ae:	2b0d      	cmp	r3, #13
 80011b0:	d026      	beq.n	8001200 <jsmn_parse_primitive+0xb0>
      break;
 80011b2:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b1f      	cmp	r3, #31
 80011c0:	d906      	bls.n	80011d0 <jsmn_parse_primitive+0x80>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80011ce:	d905      	bls.n	80011dc <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 80011d6:	f06f 0301 	mvn.w	r3, #1
 80011da:	e03a      	b.n	8001252 <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d909      	bls.n	8001204 <jsmn_parse_primitive+0xb4>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1b3      	bne.n	8001166 <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 80011fe:	e001      	b.n	8001204 <jsmn_parse_primitive+0xb4>
      goto found;
 8001200:	bf00      	nop
 8001202:	e000      	b.n	8001206 <jsmn_parse_primitive+0xb6>
found:
 8001204:	bf00      	nop
  if (tokens == NULL) {
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d106      	bne.n	800121a <jsmn_parse_primitive+0xca>
    parser->pos--;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1e5a      	subs	r2, r3, #1
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	601a      	str	r2, [r3, #0]
    return 0;
 8001216:	2300      	movs	r3, #0
 8001218:	e01b      	b.n	8001252 <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 800121a:	6a3a      	ldr	r2, [r7, #32]
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff ff56 	bl	80010d0 <jsmn_alloc_token>
 8001224:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d105      	bne.n	8001238 <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e00c      	b.n	8001252 <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	2108      	movs	r1, #8
 8001240:	6938      	ldr	r0, [r7, #16]
 8001242:	f7ff ff6c 	bl	800111e <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	601a      	str	r2, [r3, #0]
  return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	04001001 	.word	0x04001001

08001260 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800127e:	e0ba      	b.n	80013f6 <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b22      	cmp	r3, #34	@ 0x22
 8001290:	d11d      	bne.n	80012ce <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <jsmn_parse_string+0x3c>
        return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e0be      	b.n	800141a <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 800129c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800129e:	6839      	ldr	r1, [r7, #0]
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f7ff ff15 	bl	80010d0 <jsmn_alloc_token>
 80012a6:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d105      	bne.n	80012ba <jsmn_parse_string+0x5a>
        parser->pos = start;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	e0af      	b.n	800141a <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2104      	movs	r1, #4
 80012c4:	6938      	ldr	r0, [r7, #16]
 80012c6:	f7ff ff2a 	bl	800111e <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e0a5      	b.n	800141a <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80012d2:	f040 808b 	bne.w	80013ec <jsmn_parse_string+0x18c>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	f240 8084 	bls.w	80013ec <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b75      	cmp	r3, #117	@ 0x75
 80012fa:	dc70      	bgt.n	80013de <jsmn_parse_string+0x17e>
 80012fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80012fe:	da04      	bge.n	800130a <jsmn_parse_string+0xaa>
 8001300:	2b22      	cmp	r3, #34	@ 0x22
 8001302:	d072      	beq.n	80013ea <jsmn_parse_string+0x18a>
 8001304:	2b2f      	cmp	r3, #47	@ 0x2f
 8001306:	d070      	beq.n	80013ea <jsmn_parse_string+0x18a>
 8001308:	e069      	b.n	80013de <jsmn_parse_string+0x17e>
 800130a:	3b5c      	subs	r3, #92	@ 0x5c
 800130c:	2201      	movs	r2, #1
 800130e:	409a      	lsls	r2, r3
 8001310:	4b44      	ldr	r3, [pc, #272]	@ (8001424 <jsmn_parse_string+0x1c4>)
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf14      	ite	ne
 8001318:	2301      	movne	r3, #1
 800131a:	2300      	moveq	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d163      	bne.n	80013ea <jsmn_parse_string+0x18a>
 8001322:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d054      	beq.n	80013de <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	e037      	b.n	80013b4 <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001350:	d906      	bls.n	8001360 <jsmn_parse_string+0x100>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b39      	cmp	r3, #57	@ 0x39
 800135e:	d921      	bls.n	80013a4 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800136a:	2b40      	cmp	r3, #64	@ 0x40
 800136c:	d906      	bls.n	800137c <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b46      	cmp	r3, #70	@ 0x46
 800137a:	d913      	bls.n	80013a4 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001386:	2b60      	cmp	r3, #96	@ 0x60
 8001388:	d906      	bls.n	8001398 <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b66      	cmp	r3, #102	@ 0x66
 8001396:	d905      	bls.n	80013a4 <jsmn_parse_string+0x144>
            parser->pos = start;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 800139e:	f06f 0301 	mvn.w	r3, #1
 80013a2:	e03a      	b.n	800141a <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	601a      	str	r2, [r3, #0]
             i++) {
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	dc0b      	bgt.n	80013d2 <jsmn_parse_string+0x172>
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d906      	bls.n	80013d2 <jsmn_parse_string+0x172>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1b8      	bne.n	8001344 <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	1e5a      	subs	r2, r3, #1
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	601a      	str	r2, [r3, #0]
        break;
 80013dc:	e006      	b.n	80013ec <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 80013e4:	f06f 0301 	mvn.w	r3, #1
 80013e8:	e017      	b.n	800141a <jsmn_parse_string+0x1ba>
        break;
 80013ea:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d907      	bls.n	8001410 <jsmn_parse_string+0x1b0>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f47f af38 	bne.w	8001280 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8001416:	f06f 0302 	mvn.w	r3, #2
}
 800141a:	4618      	mov	r0, r3
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	01440441 	.word	0x01440441

08001428 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	@ 0x30
 800142c:	af02      	add	r7, sp, #8
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800143c:	e176      	b.n	800172c <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	2b7d      	cmp	r3, #125	@ 0x7d
 800144e:	d06c      	beq.n	800152a <jsmn_parse+0x102>
 8001450:	2b7d      	cmp	r3, #125	@ 0x7d
 8001452:	f300 8136 	bgt.w	80016c2 <jsmn_parse+0x29a>
 8001456:	2b7b      	cmp	r3, #123	@ 0x7b
 8001458:	d030      	beq.n	80014bc <jsmn_parse+0x94>
 800145a:	2b7b      	cmp	r3, #123	@ 0x7b
 800145c:	f300 8131 	bgt.w	80016c2 <jsmn_parse+0x29a>
 8001460:	2b5d      	cmp	r3, #93	@ 0x5d
 8001462:	d062      	beq.n	800152a <jsmn_parse+0x102>
 8001464:	2b5d      	cmp	r3, #93	@ 0x5d
 8001466:	f300 812c 	bgt.w	80016c2 <jsmn_parse+0x29a>
 800146a:	2b5b      	cmp	r3, #91	@ 0x5b
 800146c:	d026      	beq.n	80014bc <jsmn_parse+0x94>
 800146e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001470:	f300 8127 	bgt.w	80016c2 <jsmn_parse+0x29a>
 8001474:	2b3a      	cmp	r3, #58	@ 0x3a
 8001476:	f000 80d6 	beq.w	8001626 <jsmn_parse+0x1fe>
 800147a:	2b3a      	cmp	r3, #58	@ 0x3a
 800147c:	f300 8121 	bgt.w	80016c2 <jsmn_parse+0x29a>
 8001480:	2b2c      	cmp	r3, #44	@ 0x2c
 8001482:	f000 80d7 	beq.w	8001634 <jsmn_parse+0x20c>
 8001486:	2b2c      	cmp	r3, #44	@ 0x2c
 8001488:	f300 811b 	bgt.w	80016c2 <jsmn_parse+0x29a>
 800148c:	2b20      	cmp	r3, #32
 800148e:	dc11      	bgt.n	80014b4 <jsmn_parse+0x8c>
 8001490:	2b09      	cmp	r3, #9
 8001492:	f2c0 8116 	blt.w	80016c2 <jsmn_parse+0x29a>
 8001496:	3b09      	subs	r3, #9
 8001498:	4a91      	ldr	r2, [pc, #580]	@ (80016e0 <jsmn_parse+0x2b8>)
 800149a:	fa22 f303 	lsr.w	r3, r2, r3
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf14      	ite	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	2300      	moveq	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 812d 	bne.w	800170c <jsmn_parse+0x2e4>
 80014b2:	e106      	b.n	80016c2 <jsmn_parse+0x29a>
 80014b4:	2b22      	cmp	r3, #34	@ 0x22
 80014b6:	f000 8092 	beq.w	80015de <jsmn_parse+0x1b6>
 80014ba:	e102      	b.n	80016c2 <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	3301      	adds	r3, #1
 80014c0:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 8123 	beq.w	8001710 <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 80014ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff fdfe 	bl	80010d0 <jsmn_alloc_token>
 80014d4:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	e153      	b.n	800178a <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ea:	d00a      	beq.n	8001502 <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8001502:	7ffb      	ldrb	r3, [r7, #31]
 8001504:	2b7b      	cmp	r3, #123	@ 0x7b
 8001506:	d101      	bne.n	800150c <jsmn_parse+0xe4>
 8001508:	2201      	movs	r2, #1
 800150a:	e000      	b.n	800150e <jsmn_parse+0xe6>
 800150c:	2202      	movs	r2, #2
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	3b01      	subs	r3, #1
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	609a      	str	r2, [r3, #8]
      break;
 8001528:	e0fb      	b.n	8001722 <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80f1 	beq.w	8001714 <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8001532:	7ffb      	ldrb	r3, [r7, #31]
 8001534:	2b7d      	cmp	r3, #125	@ 0x7d
 8001536:	d101      	bne.n	800153c <jsmn_parse+0x114>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <jsmn_parse+0x116>
 800153c:	2302      	movs	r3, #2
 800153e:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	3b01      	subs	r3, #1
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
 8001548:	e024      	b.n	8001594 <jsmn_parse+0x16c>
        token = &tokens[i];
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	4413      	add	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d017      	beq.n	800158e <jsmn_parse+0x166>
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001566:	d112      	bne.n	800158e <jsmn_parse+0x166>
          if (token->type != type) {
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	7fba      	ldrb	r2, [r7, #30]
 800156e:	429a      	cmp	r2, r3
 8001570:	d002      	beq.n	8001578 <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 8001572:	f06f 0301 	mvn.w	r3, #1
 8001576:	e108      	b.n	800178a <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f04f 32ff 	mov.w	r2, #4294967295
 800157e:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	461a      	mov	r2, r3
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	609a      	str	r2, [r3, #8]
          break;
 800158c:	e005      	b.n	800159a <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	3b01      	subs	r3, #1
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	2b00      	cmp	r3, #0
 8001598:	dad7      	bge.n	800154a <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d119      	bne.n	80015d6 <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 80015a2:	f06f 0301 	mvn.w	r3, #1
 80015a6:	e0f0      	b.n	800178a <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ba:	d009      	beq.n	80015d0 <jsmn_parse+0x1a8>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d104      	bne.n	80015d0 <jsmn_parse+0x1a8>
          parser->toksuper = i;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ca:	609a      	str	r2, [r3, #8]
          break;
 80015cc:	bf00      	nop
        }
      }
#endif
      break;
 80015ce:	e0a8      	b.n	8001722 <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	3b01      	subs	r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	2b00      	cmp	r3, #0
 80015da:	dae5      	bge.n	80015a8 <jsmn_parse+0x180>
      break;
 80015dc:	e0a1      	b.n	8001722 <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 80015de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f7ff fe39 	bl	8001260 <jsmn_parse_string>
 80015ee:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da01      	bge.n	80015fa <jsmn_parse+0x1d2>
        return r;
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	e0c7      	b.n	800178a <jsmn_parse+0x362>
      }
      count++;
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	3301      	adds	r3, #1
 80015fe:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	f000 8086 	beq.w	8001718 <jsmn_parse+0x2f0>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8082 	beq.w	8001718 <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	4413      	add	r3, r2
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	3201      	adds	r2, #1
 8001622:	60da      	str	r2, [r3, #12]
      }
      break;
 8001624:	e078      	b.n	8001718 <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	461a      	mov	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	609a      	str	r2, [r3, #8]
      break;
 8001632:	e076      	b.n	8001722 <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d070      	beq.n	800171c <jsmn_parse+0x2f4>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001642:	d06b      	beq.n	800171c <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8001650:	2b02      	cmp	r3, #2
 8001652:	d063      	beq.n	800171c <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	4413      	add	r3, r2
 800165e:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001660:	2b01      	cmp	r3, #1
 8001662:	d05b      	beq.n	800171c <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	3b01      	subs	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
 800166c:	e025      	b.n	80016ba <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	4413      	add	r3, r2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d006      	beq.n	800168a <jsmn_parse+0x262>
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d114      	bne.n	80016b4 <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4413      	add	r3, r2
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d00c      	beq.n	80016b4 <jsmn_parse+0x28c>
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a8:	d104      	bne.n	80016b4 <jsmn_parse+0x28c>
              parser->toksuper = i;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ae:	609a      	str	r2, [r3, #8]
              break;
 80016b0:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 80016b2:	e033      	b.n	800171c <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	3b01      	subs	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	2b00      	cmp	r3, #0
 80016be:	dad6      	bge.n	800166e <jsmn_parse+0x246>
      break;
 80016c0:	e02c      	b.n	800171c <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 80016c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f7ff fd3f 	bl	8001150 <jsmn_parse_primitive>
 80016d2:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	da04      	bge.n	80016e4 <jsmn_parse+0x2bc>
        return r;
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	e055      	b.n	800178a <jsmn_parse+0x362>
 80016de:	bf00      	nop
 80016e0:	00800013 	.word	0x00800013
      }
      count++;
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	3301      	adds	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f2:	d015      	beq.n	8001720 <jsmn_parse+0x2f8>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d012      	beq.n	8001720 <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	3201      	adds	r2, #1
 8001708:	60da      	str	r2, [r3, #12]
      }
      break;
 800170a:	e009      	b.n	8001720 <jsmn_parse+0x2f8>
      break;
 800170c:	bf00      	nop
 800170e:	e008      	b.n	8001722 <jsmn_parse+0x2fa>
        break;
 8001710:	bf00      	nop
 8001712:	e006      	b.n	8001722 <jsmn_parse+0x2fa>
        break;
 8001714:	bf00      	nop
 8001716:	e004      	b.n	8001722 <jsmn_parse+0x2fa>
      break;
 8001718:	bf00      	nop
 800171a:	e002      	b.n	8001722 <jsmn_parse+0x2fa>
      break;
 800171c:	bf00      	nop
 800171e:	e000      	b.n	8001722 <jsmn_parse+0x2fa>
      break;
 8001720:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	d907      	bls.n	8001746 <jsmn_parse+0x31e>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f47f ae7c 	bne.w	800143e <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01d      	beq.n	8001788 <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	3b01      	subs	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
 8001754:	e015      	b.n	8001782 <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	4413      	add	r3, r2
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d00a      	beq.n	800177c <jsmn_parse+0x354>
 8001766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	4413      	add	r3, r2
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d102      	bne.n	800177c <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 8001776:	f06f 0302 	mvn.w	r3, #2
 800177a:	e006      	b.n	800178a <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	3b01      	subs	r3, #1
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	dae6      	bge.n	8001756 <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 8001788:	6a3b      	ldr	r3, [r7, #32]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3728      	adds	r7, #40	@ 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop

08001794 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f04f 32ff 	mov.w	r2, #4294967295
 80017ae:	609a      	str	r2, [r3, #8]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
	...

080017bc <receiveESP>:

direction_t dir;
uint8_t			speed;

// 데이터 수신 함수
char* receiveESP() {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
	static char lineBuffer[2048] = {0,};
	int pos = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
	signed char ch;
	// 제한시간내에 첫 문자가 도착하지 않으면 타임아웃 반환
	int timeoutReceiveWifi = HAL_GetTick() + 10000;
 80017c6:	f001 fc01 	bl	8002fcc <HAL_GetTick>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80017d0:	3310      	adds	r3, #16
 80017d2:	607b      	str	r3, [r7, #4]
	do {
		ch = getUart();
 80017d4:	f001 fb24 	bl	8002e20 <getUart>
 80017d8:	4603      	mov	r3, r0
 80017da:	72fb      	strb	r3, [r7, #11]
		if(timeoutReceiveWifi < HAL_GetTick()) {
 80017dc:	f001 fbf6 	bl	8002fcc <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d901      	bls.n	80017ec <receiveESP+0x30>
			return lineBuffer;
 80017e8:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <receiveESP+0xcc>)
 80017ea:	e048      	b.n	800187e <receiveESP+0xc2>
		}
	} while(ch == 0);
 80017ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ef      	beq.n	80017d4 <receiveESP+0x18>
	timeoutReceiveWifi = HAL_GetTick() + 3000; // 타임아웃 초기화
 80017f4:	f001 fbea 	bl	8002fcc <HAL_GetTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80017fe:	607b      	str	r3, [r7, #4]
	while(ch != '\r') { // '\r'까지 읽기
 8001800:	e033      	b.n	800186a <receiveESP+0xae>
		if(ch == '\n') {
 8001802:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001806:	2b0a      	cmp	r3, #10
 8001808:	d102      	bne.n	8001810 <receiveESP+0x54>
			pos = 0; // 새로운 줄의 시작
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	e018      	b.n	8001842 <receiveESP+0x86>
		}
		else if(ch != 0) { // 유효한 문자만 버퍼에 저장
 8001810:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d014      	beq.n	8001842 <receiveESP+0x86>
			if(pos >= sizeof(lineBuffer) - 1) { // 버퍼 오버플로우 방지
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800181e:	4293      	cmp	r3, r2
 8001820:	d909      	bls.n	8001836 <receiveESP+0x7a>
				clearBuffer(); // Rx 버퍼 정리
 8001822:	f001 faeb 	bl	8002dfc <clearBuffer>
				memset(lineBuffer, 0, 2048);
 8001826:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800182a:	2100      	movs	r1, #0
 800182c:	4816      	ldr	r0, [pc, #88]	@ (8001888 <receiveESP+0xcc>)
 800182e:	f005 f957 	bl	8006ae0 <memset>
				return lineBuffer; // 에러 반환
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <receiveESP+0xcc>)
 8001834:	e023      	b.n	800187e <receiveESP+0xc2>
			}
			lineBuffer[pos++] = ch;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	60fa      	str	r2, [r7, #12]
 800183c:	7af9      	ldrb	r1, [r7, #11]
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <receiveESP+0xcc>)
 8001840:	54d1      	strb	r1, [r2, r3]
		}
		if(timeoutReceiveWifi < HAL_GetTick()) { // 타임아웃 발생 시
 8001842:	f001 fbc3 	bl	8002fcc <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	d909      	bls.n	8001862 <receiveESP+0xa6>
			clearBuffer(); // Rx 버퍼 정리
 800184e:	f001 fad5 	bl	8002dfc <clearBuffer>
			memset(lineBuffer, 0, 2048);
 8001852:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001856:	2100      	movs	r1, #0
 8001858:	480b      	ldr	r0, [pc, #44]	@ (8001888 <receiveESP+0xcc>)
 800185a:	f005 f941 	bl	8006ae0 <memset>
			return lineBuffer; // 타임아웃 반환
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <receiveESP+0xcc>)
 8001860:	e00d      	b.n	800187e <receiveESP+0xc2>
		}
		ch = getUart(); // 다음 문자 읽기
 8001862:	f001 fadd 	bl	8002e20 <getUart>
 8001866:	4603      	mov	r3, r0
 8001868:	72fb      	strb	r3, [r7, #11]
	while(ch != '\r') { // '\r'까지 읽기
 800186a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800186e:	2b0d      	cmp	r3, #13
 8001870:	d1c7      	bne.n	8001802 <receiveESP+0x46>
	}
	lineBuffer[pos] = '\0'; // 문자열 종료
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <receiveESP+0xcc>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
	return lineBuffer; // 읽은 데이터 반환
 800187c:	4b02      	ldr	r3, [pc, #8]	@ (8001888 <receiveESP+0xcc>)
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200001f8 	.word	0x200001f8

0800188c <receivePacketWithHeader>:

// 헤더 찾기
char *receivePacketWithHeader(char *header) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	char *rxData;
	char *result;
	rxData = receiveESP();
 8001894:	f7ff ff92 	bl	80017bc <receiveESP>
 8001898:	60f8      	str	r0, [r7, #12]
	if(strncmp(rxData, header, strlen(header)) == 0) {
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7fe fc58 	bl	8000150 <strlen>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f005 f92f 	bl	8006b0a <strncmp>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <receivePacketWithHeader+0x3a>
		result = strchr(rxData, ':');
 80018b2:	213a      	movs	r1, #58	@ 0x3a
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f005 f91b 	bl	8006af0 <strchr>
 80018ba:	60b8      	str	r0, [r7, #8]
		result++;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	3301      	adds	r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
	}
	else
		return 0;
	return result;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	e000      	b.n	80018c8 <receivePacketWithHeader+0x3c>
		return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <waitForResponse>:

// 수신 대기 함수
bool waitForResponse(char *cmpStr) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	char *rxData;
	int timeout;
	timeout = HAL_GetTick() + 3000;	// system timer(systick)의 값을 읽음(1ms마다 1씩 증가)
 80018d8:	f001 fb78 	bl	8002fcc <HAL_GetTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80018e2:	60bb      	str	r3, [r7, #8]
	rxData = receiveESP();
 80018e4:	f7ff ff6a 	bl	80017bc <receiveESP>
 80018e8:	60f8      	str	r0, [r7, #12]
	// 일치하지 않는 위치를 리턴, 일치시 0리턴 strncmp(첫번째 문자열, 두번째 문자열, 비교 개수)
	while(strncmp(rxData, cmpStr, strlen(cmpStr)) != 0) {
 80018ea:	e00d      	b.n	8001908 <waitForResponse+0x38>
		rxData = receiveESP();
 80018ec:	f7ff ff66 	bl	80017bc <receiveESP>
 80018f0:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick() > timeout) {
 80018f2:	f001 fb6b 	bl	8002fcc <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d901      	bls.n	8001902 <waitForResponse+0x32>
			return false;
 80018fe:	2300      	movs	r3, #0
 8001900:	e00f      	b.n	8001922 <waitForResponse+0x52>
		}
		HAL_Delay(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f001 fb6c 	bl	8002fe0 <HAL_Delay>
	while(strncmp(rxData, cmpStr, strlen(cmpStr)) != 0) {
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7fe fc21 	bl	8000150 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f005 f8f8 	bl	8006b0a <strncmp>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1e5      	bne.n	80018ec <waitForResponse+0x1c>
	}
	return true;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <resetESP>:

// esp를 리셋하는 함수
void resetESP() {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
	printf("AT\r\n");
 8001932:	481c      	ldr	r0, [pc, #112]	@ (80019a4 <resetESP+0x78>)
 8001934:	f004 ff96 	bl	8006864 <puts>
	HAL_Delay(50);
 8001938:	2032      	movs	r0, #50	@ 0x32
 800193a:	f001 fb51 	bl	8002fe0 <HAL_Delay>
	clearBuffer();
 800193e:	f001 fa5d 	bl	8002dfc <clearBuffer>
	printf("at+rst\r\n");
 8001942:	4819      	ldr	r0, [pc, #100]	@ (80019a8 <resetESP+0x7c>)
 8001944:	f004 ff8e 	bl	8006864 <puts>
	HAL_Delay(3000);
 8001948:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800194c:	f001 fb48 	bl	8002fe0 <HAL_Delay>
	int status = waitForResponse("ready");
 8001950:	4816      	ldr	r0, [pc, #88]	@ (80019ac <resetESP+0x80>)
 8001952:	f7ff ffbd 	bl	80018d0 <waitForResponse>
 8001956:	4603      	mov	r3, r0
 8001958:	607b      	str	r3, [r7, #4]
	if(status)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <resetESP+0x3c>
		printf2("-1 receive : ready\r\n");
 8001960:	4813      	ldr	r0, [pc, #76]	@ (80019b0 <resetESP+0x84>)
 8001962:	f001 fa8d 	bl	8002e80 <printf2>
 8001966:	e002      	b.n	800196e <resetESP+0x42>
	else
		printf2("-1 receive : ERROR\r\n");
 8001968:	4812      	ldr	r0, [pc, #72]	@ (80019b4 <resetESP+0x88>)
 800196a:	f001 fa89 	bl	8002e80 <printf2>
	clearBuffer();
 800196e:	f001 fa45 	bl	8002dfc <clearBuffer>
	printf("ate0\r\n");		// echo(에코)를 꺼야 데이터를 보낼때마다 반향되는 문자가 없다.
 8001972:	4811      	ldr	r0, [pc, #68]	@ (80019b8 <resetESP+0x8c>)
 8001974:	f004 ff76 	bl	8006864 <puts>
	status = waitForResponse("OK");
 8001978:	4810      	ldr	r0, [pc, #64]	@ (80019bc <resetESP+0x90>)
 800197a:	f7ff ffa9 	bl	80018d0 <waitForResponse>
 800197e:	4603      	mov	r3, r0
 8001980:	607b      	str	r3, [r7, #4]
	if(status)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <resetESP+0x64>
		printf2("0 receive : OK\r\n");
 8001988:	480d      	ldr	r0, [pc, #52]	@ (80019c0 <resetESP+0x94>)
 800198a:	f001 fa79 	bl	8002e80 <printf2>
 800198e:	e002      	b.n	8001996 <resetESP+0x6a>
	else
		printf2("0 receive : ERROR\r\n");
 8001990:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <resetESP+0x98>)
 8001992:	f001 fa75 	bl	8002e80 <printf2>
	clearBuffer();
 8001996:	f001 fa31 	bl	8002dfc <clearBuffer>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	08008be8 	.word	0x08008be8
 80019a8:	08008bec 	.word	0x08008bec
 80019ac:	08008bf4 	.word	0x08008bf4
 80019b0:	08008bfc 	.word	0x08008bfc
 80019b4:	08008c14 	.word	0x08008c14
 80019b8:	08008c2c 	.word	0x08008c2c
 80019bc:	08008c34 	.word	0x08008c34
 80019c0:	08008c38 	.word	0x08008c38
 80019c4:	08008c4c 	.word	0x08008c4c

080019c8 <connectAP>:

// ap에 접속하는 함수
void connectAP() {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
	// 초기 테스트
	printf("AT\r\n");
 80019ce:	482b      	ldr	r0, [pc, #172]	@ (8001a7c <connectAP+0xb4>)
 80019d0:	f004 ff48 	bl	8006864 <puts>
	int status = waitForResponse("OK");
 80019d4:	482a      	ldr	r0, [pc, #168]	@ (8001a80 <connectAP+0xb8>)
 80019d6:	f7ff ff7b 	bl	80018d0 <waitForResponse>
 80019da:	4603      	mov	r3, r0
 80019dc:	607b      	str	r3, [r7, #4]
	if(status)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <connectAP+0x24>
		printf2("1 receive : OK\r\n");
 80019e4:	4827      	ldr	r0, [pc, #156]	@ (8001a84 <connectAP+0xbc>)
 80019e6:	f001 fa4b 	bl	8002e80 <printf2>
 80019ea:	e002      	b.n	80019f2 <connectAP+0x2a>
	else
		printf2("1 receive : ERROR\r\n");
 80019ec:	4826      	ldr	r0, [pc, #152]	@ (8001a88 <connectAP+0xc0>)
 80019ee:	f001 fa47 	bl	8002e80 <printf2>
	clearBuffer();
 80019f2:	f001 fa03 	bl	8002dfc <clearBuffer>
	// WIFI 설정
	printf("AT+CWINIT=1\r\n");
 80019f6:	4825      	ldr	r0, [pc, #148]	@ (8001a8c <connectAP+0xc4>)
 80019f8:	f004 ff34 	bl	8006864 <puts>
	status = waitForResponse("OK");
 80019fc:	4820      	ldr	r0, [pc, #128]	@ (8001a80 <connectAP+0xb8>)
 80019fe:	f7ff ff67 	bl	80018d0 <waitForResponse>
 8001a02:	4603      	mov	r3, r0
 8001a04:	607b      	str	r3, [r7, #4]
	if(status)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <connectAP+0x4c>
		printf2("2 receive : OK\r\n");
 8001a0c:	4820      	ldr	r0, [pc, #128]	@ (8001a90 <connectAP+0xc8>)
 8001a0e:	f001 fa37 	bl	8002e80 <printf2>
 8001a12:	e002      	b.n	8001a1a <connectAP+0x52>
	else
		printf2("2 receive : ERROR\r\n");
 8001a14:	481f      	ldr	r0, [pc, #124]	@ (8001a94 <connectAP+0xcc>)
 8001a16:	f001 fa33 	bl	8002e80 <printf2>
	clearBuffer();
 8001a1a:	f001 f9ef 	bl	8002dfc <clearBuffer>
	// station mode
	printf("AT+CWMODE=1\r\n");
 8001a1e:	481e      	ldr	r0, [pc, #120]	@ (8001a98 <connectAP+0xd0>)
 8001a20:	f004 ff20 	bl	8006864 <puts>
	status = waitForResponse("OK");
 8001a24:	4816      	ldr	r0, [pc, #88]	@ (8001a80 <connectAP+0xb8>)
 8001a26:	f7ff ff53 	bl	80018d0 <waitForResponse>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	607b      	str	r3, [r7, #4]
	if(status)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <connectAP+0x74>
		printf2("3 receive : OK\r\n");
 8001a34:	4819      	ldr	r0, [pc, #100]	@ (8001a9c <connectAP+0xd4>)
 8001a36:	f001 fa23 	bl	8002e80 <printf2>
 8001a3a:	e002      	b.n	8001a42 <connectAP+0x7a>
	else
		printf2("3 receive : ERROR\r\n");
 8001a3c:	4818      	ldr	r0, [pc, #96]	@ (8001aa0 <connectAP+0xd8>)
 8001a3e:	f001 fa1f 	bl	8002e80 <printf2>
	clearBuffer();
 8001a42:	f001 f9db 	bl	8002dfc <clearBuffer>
	// connection ap
	printf("AT+CWJAP=\"iot_AI\",\"iotiotiot\"\r\n");
 8001a46:	4817      	ldr	r0, [pc, #92]	@ (8001aa4 <connectAP+0xdc>)
 8001a48:	f004 ff0c 	bl	8006864 <puts>
	status = waitForResponse("OK");
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <connectAP+0xb8>)
 8001a4e:	f7ff ff3f 	bl	80018d0 <waitForResponse>
 8001a52:	4603      	mov	r3, r0
 8001a54:	607b      	str	r3, [r7, #4]
	if(status)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <connectAP+0x9c>
		printf2("4 receive : OK\r\n");
 8001a5c:	4812      	ldr	r0, [pc, #72]	@ (8001aa8 <connectAP+0xe0>)
 8001a5e:	f001 fa0f 	bl	8002e80 <printf2>
 8001a62:	e002      	b.n	8001a6a <connectAP+0xa2>
	else
		printf2("4 receive : ERROR\r\n");
 8001a64:	4811      	ldr	r0, [pc, #68]	@ (8001aac <connectAP+0xe4>)
 8001a66:	f001 fa0b 	bl	8002e80 <printf2>
	HAL_Delay(50);
 8001a6a:	2032      	movs	r0, #50	@ 0x32
 8001a6c:	f001 fab8 	bl	8002fe0 <HAL_Delay>
	clearBuffer();
 8001a70:	f001 f9c4 	bl	8002dfc <clearBuffer>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	08008be8 	.word	0x08008be8
 8001a80:	08008c34 	.word	0x08008c34
 8001a84:	08008c60 	.word	0x08008c60
 8001a88:	08008c74 	.word	0x08008c74
 8001a8c:	08008c88 	.word	0x08008c88
 8001a90:	08008c98 	.word	0x08008c98
 8001a94:	08008cac 	.word	0x08008cac
 8001a98:	08008cc0 	.word	0x08008cc0
 8001a9c:	08008cd0 	.word	0x08008cd0
 8001aa0:	08008ce4 	.word	0x08008ce4
 8001aa4:	08008cf8 	.word	0x08008cf8
 8001aa8:	08008d18 	.word	0x08008d18
 8001aac:	08008d2c 	.word	0x08008d2c

08001ab0 <connectMQTT>:
	char rxData = receiveESP();
	printf2(receivePacketWithHeader("+IPD"));
}

// MQTT 서버 접속
void connectMQTT() {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
	printf("AT\r\n");
 8001ab6:	482a      	ldr	r0, [pc, #168]	@ (8001b60 <connectMQTT+0xb0>)
 8001ab8:	f004 fed4 	bl	8006864 <puts>
	HAL_Delay(10);
 8001abc:	200a      	movs	r0, #10
 8001abe:	f001 fa8f 	bl	8002fe0 <HAL_Delay>
	clearBuffer();
 8001ac2:	f001 f99b 	bl	8002dfc <clearBuffer>
	printf("AT+CIPMUX=1\r\n");	// 다중 접속 모드 활성, 이후 소켓 번호로 할당됨
 8001ac6:	4827      	ldr	r0, [pc, #156]	@ (8001b64 <connectMQTT+0xb4>)
 8001ac8:	f004 fecc 	bl	8006864 <puts>
	HAL_Delay(50);
 8001acc:	2032      	movs	r0, #50	@ 0x32
 8001ace:	f001 fa87 	bl	8002fe0 <HAL_Delay>
	clearBuffer();
 8001ad2:	f001 f993 	bl	8002dfc <clearBuffer>
	// MQTT Server 설정
	printf("AT+MQTTUSERCFG=0,1,\"MY_TOPIC\",\"\",\"\",0,0,\"\"\r\n");
 8001ad6:	4824      	ldr	r0, [pc, #144]	@ (8001b68 <connectMQTT+0xb8>)
 8001ad8:	f004 fec4 	bl	8006864 <puts>
	HAL_Delay(10);
 8001adc:	200a      	movs	r0, #10
 8001ade:	f001 fa7f 	bl	8002fe0 <HAL_Delay>
	bool status = waitForResponse("OK");
 8001ae2:	4822      	ldr	r0, [pc, #136]	@ (8001b6c <connectMQTT+0xbc>)
 8001ae4:	f7ff fef4 	bl	80018d0 <waitForResponse>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
	if(status)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <connectMQTT+0x4a>
		printf2("success mqtt config\r\n");
 8001af2:	481f      	ldr	r0, [pc, #124]	@ (8001b70 <connectMQTT+0xc0>)
 8001af4:	f001 f9c4 	bl	8002e80 <printf2>
 8001af8:	e002      	b.n	8001b00 <connectMQTT+0x50>
	else
		printf2("failed mqtt config\r\n");
 8001afa:	481e      	ldr	r0, [pc, #120]	@ (8001b74 <connectMQTT+0xc4>)
 8001afc:	f001 f9c0 	bl	8002e80 <printf2>
	// MQTT 접속
	printf("AT+MQTTCONN=0,\"192.168.0.51\",1883,1\r\n");
 8001b00:	481d      	ldr	r0, [pc, #116]	@ (8001b78 <connectMQTT+0xc8>)
 8001b02:	f004 feaf 	bl	8006864 <puts>
	HAL_Delay(10);
 8001b06:	200a      	movs	r0, #10
 8001b08:	f001 fa6a 	bl	8002fe0 <HAL_Delay>
	status = waitForResponse("+MQTTCONNECTED");
 8001b0c:	481b      	ldr	r0, [pc, #108]	@ (8001b7c <connectMQTT+0xcc>)
 8001b0e:	f7ff fedf 	bl	80018d0 <waitForResponse>
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	if(status)
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <connectMQTT+0x74>
		printf2("success mqtt connect\r\n");
 8001b1c:	4818      	ldr	r0, [pc, #96]	@ (8001b80 <connectMQTT+0xd0>)
 8001b1e:	f001 f9af 	bl	8002e80 <printf2>
 8001b22:	e002      	b.n	8001b2a <connectMQTT+0x7a>
	else
		printf2("failed matt connect\r\n");
 8001b24:	4817      	ldr	r0, [pc, #92]	@ (8001b84 <connectMQTT+0xd4>)
 8001b26:	f001 f9ab 	bl	8002e80 <printf2>
	clearBuffer();
 8001b2a:	f001 f967 	bl	8002dfc <clearBuffer>
	// Subscribe 등록 at+mqttsub=0,"topic",0
	printf("AT+MQTTSUB=0,\"MY_TOPIC\",0\r\n");
 8001b2e:	4816      	ldr	r0, [pc, #88]	@ (8001b88 <connectMQTT+0xd8>)
 8001b30:	f004 fe98 	bl	8006864 <puts>
	HAL_Delay(10);
 8001b34:	200a      	movs	r0, #10
 8001b36:	f001 fa53 	bl	8002fe0 <HAL_Delay>
	status = waitForResponse("OK");
 8001b3a:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <connectMQTT+0xbc>)
 8001b3c:	f7ff fec8 	bl	80018d0 <waitForResponse>
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
	if(status) printf2("success subscribe\r\n");
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <connectMQTT+0xa2>
 8001b4a:	4810      	ldr	r0, [pc, #64]	@ (8001b8c <connectMQTT+0xdc>)
 8001b4c:	f001 f998 	bl	8002e80 <printf2>
	else printf2("failed subscribe\r\n");
}
 8001b50:	e002      	b.n	8001b58 <connectMQTT+0xa8>
	else printf2("failed subscribe\r\n");
 8001b52:	480f      	ldr	r0, [pc, #60]	@ (8001b90 <connectMQTT+0xe0>)
 8001b54:	f001 f994 	bl	8002e80 <printf2>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	08008be8 	.word	0x08008be8
 8001b64:	08008dfc 	.word	0x08008dfc
 8001b68:	08008f50 	.word	0x08008f50
 8001b6c:	08008c34 	.word	0x08008c34
 8001b70:	08008f7c 	.word	0x08008f7c
 8001b74:	08008f94 	.word	0x08008f94
 8001b78:	08008fac 	.word	0x08008fac
 8001b7c:	08008fd4 	.word	0x08008fd4
 8001b80:	08008fe4 	.word	0x08008fe4
 8001b84:	08008ffc 	.word	0x08008ffc
 8001b88:	08009014 	.word	0x08009014
 8001b8c:	08009030 	.word	0x08009030
 8001b90:	08009044 	.word	0x08009044

08001b94 <receiveMQTT>:

// MQTT Subscribe
// +MQTTSUB:0,"MY_TOPIC",5,hello
char *receiveMQTT() {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
	char *receiveMsg;
	receiveMsg = receivePacketWithHeader("+MQTTSUB");
 8001b9a:	480b      	ldr	r0, [pc, #44]	@ (8001bc8 <receiveMQTT+0x34>)
 8001b9c:	f7ff fe76 	bl	800188c <receivePacketWithHeader>
 8001ba0:	6078      	str	r0, [r7, #4]
	if(strncmp(&receiveMsg[3], "MY_TOPIC", 8) != 0) return 0;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3303      	adds	r3, #3
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4908      	ldr	r1, [pc, #32]	@ (8001bcc <receiveMQTT+0x38>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	f004 ffad 	bl	8006b0a <strncmp>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <receiveMQTT+0x26>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e001      	b.n	8001bbe <receiveMQTT+0x2a>
	return &receiveMsg[2];
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3302      	adds	r3, #2
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	08009058 	.word	0x08009058
 8001bcc:	08009064 	.word	0x08009064

08001bd0 <jsoneq>:

int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d11e      	bne.n	8001c22 <jsoneq+0x52>
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7fe fab3 	bl	8000150 <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4619      	mov	r1, r3
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	4299      	cmp	r1, r3
 8001bfa:	d112      	bne.n	8001c22 <jsoneq+0x52>
      strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	461a      	mov	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1898      	adds	r0, r3, r2
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f004 ff79 	bl	8006b0a <strncmp>
 8001c18:	4603      	mov	r3, r0
  if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <jsoneq+0x52>
    return 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e001      	b.n	8001c26 <jsoneq+0x56>
  }
  return -1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <json_parse>:

void json_parse(char *inStr) {
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	f6ad 0d34 	subw	sp, sp, #2100	@ 0x834
 8001c36:	af02      	add	r7, sp, #8
 8001c38:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001c3c:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001c40:	6018      	str	r0, [r3, #0]
	jsmn_parser p;
	jsmntok_t		t[128];
	jsmn_init(&p);
 8001c42:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fda4 	bl	8001794 <jsmn_init>
	int result = jsmn_parse(&p, inStr, strlen(inStr), t, 128);
 8001c4c:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001c50:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	f7fe fa7b 	bl	8000150 <strlen>
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001c64:	f6a2 0124 	subw	r1, r2, #2084	@ 0x824
 8001c68:	f607 0014 	addw	r0, r7, #2068	@ 0x814
 8001c6c:	2280      	movs	r2, #128	@ 0x80
 8001c6e:	9200      	str	r2, [sp, #0]
 8001c70:	4622      	mov	r2, r4
 8001c72:	6809      	ldr	r1, [r1, #0]
 8001c74:	f7ff fbd8 	bl	8001428 <jsmn_parse>
 8001c78:	f8c7 0820 	str.w	r0, [r7, #2080]	@ 0x820
	// {"KEY":"VAR"}
	if(result < 1) {
 8001c7c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	dc03      	bgt.n	8001c8c <json_parse+0x5c>
		printf2("json format error\r\n");
 8001c84:	48c9      	ldr	r0, [pc, #804]	@ (8001fac <json_parse+0x37c>)
 8001c86:	f001 f8fb 	bl	8002e80 <printf2>
 8001c8a:	e256      	b.n	800213a <json_parse+0x50a>
		return;
	}
	for(int i = 1; i < result; i++) {
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001c92:	e24b      	b.n	800212c <json_parse+0x4fc>
		if(jsoneq(inStr, &t[i], "HEADER") == 0) {
 8001c94:	f107 0214 	add.w	r2, r7, #20
 8001c98:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	18d1      	adds	r1, r2, r3
 8001ca0:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001ca4:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001ca8:	4ac1      	ldr	r2, [pc, #772]	@ (8001fb0 <json_parse+0x380>)
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	f7ff ff90 	bl	8001bd0 <jsoneq>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d132      	bne.n	8001d1c <json_parse+0xec>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("HEADER = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 8001cb6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001cc0:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3308      	adds	r3, #8
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001cd6:	f6a1 0114 	subw	r1, r1, #2068	@ 0x814
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	440b      	add	r3, r1
 8001cde:	3304      	adds	r3, #4
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	1ad1      	subs	r1, r2, r3
 8001ce4:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001cee:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001d00:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	48aa      	ldr	r0, [pc, #680]	@ (8001fb4 <json_parse+0x384>)
 8001d0c:	f001 f8b8 	bl	8002e80 <printf2>
			i++;
 8001d10:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d14:	3301      	adds	r3, #1
 8001d16:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001d1a:	e202      	b.n	8002122 <json_parse+0x4f2>
		}
		else if(jsoneq(inStr, &t[i], "CONTENT") == 0) {
 8001d1c:	f107 0214 	add.w	r2, r7, #20
 8001d20:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	18d1      	adds	r1, r2, r3
 8001d28:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001d2c:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001d30:	4aa1      	ldr	r2, [pc, #644]	@ (8001fb8 <json_parse+0x388>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	f7ff ff4c 	bl	8001bd0 <jsoneq>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d132      	bne.n	8001da4 <json_parse+0x174>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("CONTENT = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 8001d3e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d42:	3301      	adds	r3, #1
 8001d44:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001d48:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	4413      	add	r3, r2
 8001d50:	3308      	adds	r3, #8
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001d5e:	f6a1 0114 	subw	r1, r1, #2068	@ 0x814
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	440b      	add	r3, r1
 8001d66:	3304      	adds	r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1ad1      	subs	r1, r2, r3
 8001d6c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d70:	3301      	adds	r3, #1
 8001d72:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001d76:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3304      	adds	r3, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001d88:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	488a      	ldr	r0, [pc, #552]	@ (8001fbc <json_parse+0x38c>)
 8001d94:	f001 f874 	bl	8002e80 <printf2>
			i++;
 8001d98:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001da2:	e1be      	b.n	8002122 <json_parse+0x4f2>
		}
		else if(jsoneq(inStr, &t[i], "ITEM1") == 0) {
 8001da4:	f107 0214 	add.w	r2, r7, #20
 8001da8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	18d1      	adds	r1, r2, r3
 8001db0:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001db4:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001db8:	4a81      	ldr	r2, [pc, #516]	@ (8001fc0 <json_parse+0x390>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	f7ff ff08 	bl	8001bd0 <jsoneq>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d132      	bne.n	8001e2c <json_parse+0x1fc>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("ITEM1 = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 8001dc6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001dd0:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3308      	adds	r3, #8
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001de0:	3301      	adds	r3, #1
 8001de2:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001de6:	f6a1 0114 	subw	r1, r1, #2068	@ 0x814
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	440b      	add	r3, r1
 8001dee:	3304      	adds	r3, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1ad1      	subs	r1, r2, r3
 8001df4:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001dfe:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	3304      	adds	r3, #4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001e10:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	486a      	ldr	r0, [pc, #424]	@ (8001fc4 <json_parse+0x394>)
 8001e1c:	f001 f830 	bl	8002e80 <printf2>
			i++;
 8001e20:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001e24:	3301      	adds	r3, #1
 8001e26:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001e2a:	e17a      	b.n	8002122 <json_parse+0x4f2>
		}
		else if(jsoneq(inStr, &t[i], "ITEM2") == 0) {
 8001e2c:	f107 0214 	add.w	r2, r7, #20
 8001e30:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	18d1      	adds	r1, r2, r3
 8001e38:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001e3c:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001e40:	4a61      	ldr	r2, [pc, #388]	@ (8001fc8 <json_parse+0x398>)
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	f7ff fec4 	bl	8001bd0 <jsoneq>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d132      	bne.n	8001eb4 <json_parse+0x284>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("ITEM2 = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 8001e4e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001e52:	3301      	adds	r3, #1
 8001e54:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001e58:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	4413      	add	r3, r2
 8001e60:	3308      	adds	r3, #8
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001e6e:	f6a1 0114 	subw	r1, r1, #2068	@ 0x814
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	440b      	add	r3, r1
 8001e76:	3304      	adds	r3, #4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	1ad1      	subs	r1, r2, r3
 8001e7c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001e80:	3301      	adds	r3, #1
 8001e82:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001e86:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3304      	adds	r3, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001e98:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	484a      	ldr	r0, [pc, #296]	@ (8001fcc <json_parse+0x39c>)
 8001ea4:	f000 ffec 	bl	8002e80 <printf2>
			i++;
 8001ea8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001eac:	3301      	adds	r3, #1
 8001eae:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001eb2:	e136      	b.n	8002122 <json_parse+0x4f2>
		}
		else if(jsoneq(inStr, &t[i], "IS_RUN") == 0) {
 8001eb4:	f107 0214 	add.w	r2, r7, #20
 8001eb8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	18d1      	adds	r1, r2, r3
 8001ec0:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001ec4:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001ec8:	4a41      	ldr	r2, [pc, #260]	@ (8001fd0 <json_parse+0x3a0>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	f7ff fe80 	bl	8001bd0 <jsoneq>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 80a9 	bne.w	800202a <json_parse+0x3fa>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("IS_RUN = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 8001ed8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001edc:	3301      	adds	r3, #1
 8001ede:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001ee2:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	3308      	adds	r3, #8
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001ef8:	f6a1 0114 	subw	r1, r1, #2068	@ 0x814
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	440b      	add	r3, r1
 8001f00:	3304      	adds	r3, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	1ad1      	subs	r1, r2, r3
 8001f06:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001f10:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	4413      	add	r3, r2
 8001f18:	3304      	adds	r3, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001f22:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4829      	ldr	r0, [pc, #164]	@ (8001fd4 <json_parse+0x3a4>)
 8001f2e:	f000 ffa7 	bl	8002e80 <printf2>
			if(strncmp(inStr + t[i+1].start, "NONE", 4) == 0) {
 8001f32:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001f36:	3301      	adds	r3, #1
 8001f38:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001f3c:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	3304      	adds	r3, #4
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001f4e:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	2204      	movs	r2, #4
 8001f58:	491f      	ldr	r1, [pc, #124]	@ (8001fd8 <json_parse+0x3a8>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 fdd5 	bl	8006b0a <strncmp>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <json_parse+0x33e>
				dir = dir_none;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <json_parse+0x3ac>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e057      	b.n	800201e <json_parse+0x3ee>
			}
			else if(strncmp(inStr + t[i+1].start, "CW", 2) == 0) {
 8001f6e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001f72:	3301      	adds	r3, #1
 8001f74:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001f78:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001f8a:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	2202      	movs	r2, #2
 8001f94:	4912      	ldr	r1, [pc, #72]	@ (8001fe0 <json_parse+0x3b0>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fdb7 	bl	8006b0a <strncmp>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d120      	bne.n	8001fe4 <json_parse+0x3b4>
				dir = dir_cw;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <json_parse+0x3ac>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e039      	b.n	800201e <json_parse+0x3ee>
 8001faa:	bf00      	nop
 8001fac:	08009070 	.word	0x08009070
 8001fb0:	08009084 	.word	0x08009084
 8001fb4:	0800908c 	.word	0x0800908c
 8001fb8:	0800909c 	.word	0x0800909c
 8001fbc:	080090a4 	.word	0x080090a4
 8001fc0:	080090b8 	.word	0x080090b8
 8001fc4:	080090c0 	.word	0x080090c0
 8001fc8:	080090d0 	.word	0x080090d0
 8001fcc:	080090d8 	.word	0x080090d8
 8001fd0:	080090e8 	.word	0x080090e8
 8001fd4:	080090f0 	.word	0x080090f0
 8001fd8:	08009100 	.word	0x08009100
 8001fdc:	200001f4 	.word	0x200001f4
 8001fe0:	08009108 	.word	0x08009108
			}
			else if(strncmp(inStr + t[i+1].start, "CCW", 3) == 0) {
 8001fe4:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001fee:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8002000:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4413      	add	r3, r2
 8002008:	2203      	movs	r2, #3
 800200a:	494e      	ldr	r1, [pc, #312]	@ (8002144 <json_parse+0x514>)
 800200c:	4618      	mov	r0, r3
 800200e:	f004 fd7c 	bl	8006b0a <strncmp>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <json_parse+0x3ee>
				dir = dir_ccw;
 8002018:	4b4b      	ldr	r3, [pc, #300]	@ (8002148 <json_parse+0x518>)
 800201a:	2202      	movs	r2, #2
 800201c:	701a      	strb	r2, [r3, #0]
			}
			i++;
 800201e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8002022:	3301      	adds	r3, #1
 8002024:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8002028:	e07b      	b.n	8002122 <json_parse+0x4f2>
		}
		else if(jsoneq(inStr, &t[i], "SPEED") == 0) {
 800202a:	f107 0214 	add.w	r2, r7, #20
 800202e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	18d1      	adds	r1, r2, r3
 8002036:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 800203a:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 800203e:	4a43      	ldr	r2, [pc, #268]	@ (800214c <json_parse+0x51c>)
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	f7ff fdc5 	bl	8001bd0 <jsoneq>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d16a      	bne.n	8002122 <json_parse+0x4f2>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("SPEED = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 800204c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8002050:	3301      	adds	r3, #1
 8002052:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8002056:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	3308      	adds	r3, #8
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8002066:	3301      	adds	r3, #1
 8002068:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 800206c:	f6a1 0114 	subw	r1, r1, #2068	@ 0x814
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	440b      	add	r3, r1
 8002074:	3304      	adds	r3, #4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	1ad1      	subs	r1, r2, r3
 800207a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 800207e:	3301      	adds	r3, #1
 8002080:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8002084:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	4413      	add	r3, r2
 800208c:	3304      	adds	r3, #4
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8002096:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4413      	add	r3, r2
 800209e:	461a      	mov	r2, r3
 80020a0:	482b      	ldr	r0, [pc, #172]	@ (8002150 <json_parse+0x520>)
 80020a2:	f000 feed 	bl	8002e80 <printf2>
			char tmp[5];
			strncpy(tmp, inStr + t[i+1].start, t[i+1].end - t[i+1].start);
 80020a6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 80020aa:	3301      	adds	r3, #1
 80020ac:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 80020b0:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	4413      	add	r3, r2
 80020b8:	3304      	adds	r3, #4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 80020c2:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	1898      	adds	r0, r3, r2
 80020ca:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 80020ce:	3301      	adds	r3, #1
 80020d0:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 80020d4:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	3308      	adds	r3, #8
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 80020e4:	3301      	adds	r3, #1
 80020e6:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 80020ea:	f6a1 0114 	subw	r1, r1, #2068	@ 0x814
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	440b      	add	r3, r1
 80020f2:	3304      	adds	r3, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4601      	mov	r1, r0
 8002100:	4618      	mov	r0, r3
 8002102:	f004 fd14 	bl	8006b2e <strncpy>
			speed = atoi(tmp);
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	4618      	mov	r0, r3
 800210c:	f003 fd9e 	bl	8005c4c <atoi>
 8002110:	4603      	mov	r3, r0
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <json_parse+0x524>)
 8002116:	701a      	strb	r2, [r3, #0]
			i++;
 8002118:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 800211c:	3301      	adds	r3, #1
 800211e:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
	for(int i = 1; i < result; i++) {
 8002122:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8002126:	3301      	adds	r3, #1
 8002128:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 800212c:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8002130:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002134:	429a      	cmp	r2, r3
 8002136:	f6ff adad 	blt.w	8001c94 <json_parse+0x64>
		}
	}
}
 800213a:	f607 072c 	addw	r7, r7, #2092	@ 0x82c
 800213e:	46bd      	mov	sp, r7
 8002140:	bd90      	pop	{r4, r7, pc}
 8002142:	bf00      	nop
 8002144:	0800910c 	.word	0x0800910c
 8002148:	200001f4 	.word	0x200001f4
 800214c:	08009110 	.word	0x08009110
 8002150:	08009118 	.word	0x08009118
 8002154:	200001f5 	.word	0x200001f5

08002158 <SystickCallback>:

// 1ms 주기로 호출됨
void SystickCallback() {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	static uint8_t cur_speed;
	if(cur_speed > 0) cur_speed--;
 800215c:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <SystickCallback+0x30>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <SystickCallback+0x1a>
 8002164:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <SystickCallback+0x30>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	3b01      	subs	r3, #1
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <SystickCallback+0x30>)
 800216e:	701a      	strb	r2, [r3, #0]
	else {
		cur_speed = speed;
		runStep(dir);
	}
}
 8002170:	e008      	b.n	8002184 <SystickCallback+0x2c>
		cur_speed = speed;
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <SystickCallback+0x34>)
 8002174:	781a      	ldrb	r2, [r3, #0]
 8002176:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <SystickCallback+0x30>)
 8002178:	701a      	strb	r2, [r3, #0]
		runStep(dir);
 800217a:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <SystickCallback+0x38>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 faa2 	bl	80026c8 <runStep>
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200009f8 	.word	0x200009f8
 800218c:	200001f5 	.word	0x200001f5
 8002190:	200001f4 	.word	0x200001f4

08002194 <app>:

void app() {
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 800219a:	af02      	add	r7, sp, #8
	// uart 초기화
	initUart(&huart1);	// to ESP32
 800219c:	4846      	ldr	r0, [pc, #280]	@ (80022b8 <app+0x124>)
 800219e:	f000 fe01 	bl	8002da4 <initUart>
	initUart2(&huart2);	// to PC by USB
 80021a2:	4846      	ldr	r0, [pc, #280]	@ (80022bc <app+0x128>)
 80021a4:	f000 fe14 	bl	8002dd0 <initUart2>
	// ESP 초기화
	resetESP();
 80021a8:	f7ff fbc0 	bl	800192c <resetESP>
	// AP 접속
	connectAP();
 80021ac:	f7ff fc0c 	bl	80019c8 <connectAP>
	// MQTT 접속
	connectMQTT();
 80021b0:	f7ff fc7e 	bl	8001ab0 <connectMQTT>
	// 모터 초기화
	speed = 255;
 80021b4:	4b42      	ldr	r3, [pc, #264]	@ (80022c0 <app+0x12c>)
 80021b6:	22ff      	movs	r2, #255	@ 0xff
 80021b8:	701a      	strb	r2, [r3, #0]
	dir = dir_none;
 80021ba:	4b42      	ldr	r3, [pc, #264]	@ (80022c4 <app+0x130>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
	while(1) {
		static uint32_t cycle_sub = 0, cycle_pub = 0;
		static uint8_t seq_num = 0;
		// publish
		if(HAL_GetTick() > cycle_pub) {
 80021c0:	f000 ff04 	bl	8002fcc <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b40      	ldr	r3, [pc, #256]	@ (80022c8 <app+0x134>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d94f      	bls.n	800226e <app+0xda>
			cycle_pub = HAL_GetTick() + 1000;
 80021ce:	f000 fefd 	bl	8002fcc <HAL_GetTick>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80021d8:	4a3b      	ldr	r2, [pc, #236]	@ (80022c8 <app+0x134>)
 80021da:	6013      	str	r3, [r2, #0]
			// ad conversion
			HAL_ADC_Start(&hadc1);
 80021dc:	483b      	ldr	r0, [pc, #236]	@ (80022cc <app+0x138>)
 80021de:	f000 fffb 	bl	80031d8 <HAL_ADC_Start>
			// wait for complete
			HAL_ADC_PollForConversion(&hadc1, 10);
 80021e2:	210a      	movs	r1, #10
 80021e4:	4839      	ldr	r0, [pc, #228]	@ (80022cc <app+0x138>)
 80021e6:	f001 f8d1 	bl	800338c <HAL_ADC_PollForConversion>
			// get adc value
			uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 80021ea:	4838      	ldr	r0, [pc, #224]	@ (80022cc <app+0x138>)
 80021ec:	f001 f9d4 	bl	8003598 <HAL_ADC_GetValue>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f8a7 31fe 	strh.w	r3, [r7, #510]	@ 0x1fe
			// stop adc
			HAL_ADC_Stop(&hadc1);
 80021f6:	4835      	ldr	r0, [pc, #212]	@ (80022cc <app+0x138>)
 80021f8:	f001 f89c 	bl	8003334 <HAL_ADC_Stop>
			char sendMsg[500];
			sprintf(sendMsg, "{\"TYPE\":\"TEMP\","
					"\"SEQ\":%d,"
					"\"STATUS\":[{"
					"\"TEMP1\":%2.1f,"
					"\"TEMP2\":-1}]}", seq_num++, lookupTemperature(adcValue));
 80021fc:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <app+0x13c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	b2d1      	uxtb	r1, r2
 8002204:	4a32      	ldr	r2, [pc, #200]	@ (80022d0 <app+0x13c>)
 8002206:	7011      	strb	r1, [r2, #0]
			sprintf(sendMsg, "{\"TYPE\":\"TEMP\","
 8002208:	461c      	mov	r4, r3
					"\"TEMP2\":-1}]}", seq_num++, lookupTemperature(adcValue));
 800220a:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	@ 0x1fe
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fca0 	bl	8002b54 <lookupTemperature>
 8002214:	4603      	mov	r3, r0
			sprintf(sendMsg, "{\"TYPE\":\"TEMP\","
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f906 	bl	8000428 <__aeabi_f2d>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	1d38      	adds	r0, r7, #4
 8002222:	e9cd 2300 	strd	r2, r3, [sp]
 8002226:	4622      	mov	r2, r4
 8002228:	492a      	ldr	r1, [pc, #168]	@ (80022d4 <app+0x140>)
 800222a:	f004 fb23 	bl	8006874 <siprintf>
			printf("AT+MQTTPUBRAW=0,\"MY_TOPIC\",%d,0,0\r\n", strlen(sendMsg));
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	4618      	mov	r0, r3
 8002232:	f7fd ff8d 	bl	8000150 <strlen>
 8002236:	4603      	mov	r3, r0
 8002238:	4619      	mov	r1, r3
 800223a:	4827      	ldr	r0, [pc, #156]	@ (80022d8 <app+0x144>)
 800223c:	f004 faaa 	bl	8006794 <iprintf>
			bool status = waitForResponse("OK");
 8002240:	4826      	ldr	r0, [pc, #152]	@ (80022dc <app+0x148>)
 8002242:	f7ff fb45 	bl	80018d0 <waitForResponse>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 31fd 	strb.w	r3, [r7, #509]	@ 0x1fd
			if(status) {
 800224c:	f897 31fd 	ldrb.w	r3, [r7, #509]	@ 0x1fd
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00c      	beq.n	800226e <app+0xda>
				while(getUart() != '>');	// 문자열 입력 프롬프트 대기
 8002254:	bf00      	nop
 8002256:	f000 fde3 	bl	8002e20 <getUart>
 800225a:	4603      	mov	r3, r0
 800225c:	2b3e      	cmp	r3, #62	@ 0x3e
 800225e:	d1fa      	bne.n	8002256 <app+0xc2>
				printf(sendMsg);
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	4618      	mov	r0, r3
 8002264:	f004 fa96 	bl	8006794 <iprintf>
				printf2("published\r\n");
 8002268:	481d      	ldr	r0, [pc, #116]	@ (80022e0 <app+0x14c>)
 800226a:	f000 fe09 	bl	8002e80 <printf2>
			}
		}
		// subscribe
		if(HAL_GetTick() > cycle_sub) {
 800226e:	f000 fead 	bl	8002fcc <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <app+0x150>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d9a1      	bls.n	80021c0 <app+0x2c>
			cycle_sub = HAL_GetTick() + 10;
 800227c:	f000 fea6 	bl	8002fcc <HAL_GetTick>
 8002280:	4603      	mov	r3, r0
 8002282:	330a      	adds	r3, #10
 8002284:	4a17      	ldr	r2, [pc, #92]	@ (80022e4 <app+0x150>)
 8002286:	6013      	str	r3, [r2, #0]
			char *msg = receiveMQTT();
 8002288:	f7ff fc84 	bl	8001b94 <receiveMQTT>
 800228c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
			if(msg[0] != 0) {
 8002290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d092      	beq.n	80021c0 <app+0x2c>
				printf2("%s\r\n", &msg[14]);
 800229a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800229e:	330e      	adds	r3, #14
 80022a0:	4619      	mov	r1, r3
 80022a2:	4811      	ldr	r0, [pc, #68]	@ (80022e8 <app+0x154>)
 80022a4:	f000 fdec 	bl	8002e80 <printf2>
				// json parse
				json_parse(&msg[14]);
 80022a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022ac:	330e      	adds	r3, #14
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fcbe 	bl	8001c30 <json_parse>
	while(1) {
 80022b4:	e784      	b.n	80021c0 <app+0x2c>
 80022b6:	bf00      	nop
 80022b8:	20000a80 	.word	0x20000a80
 80022bc:	20000ac8 	.word	0x20000ac8
 80022c0:	200001f5 	.word	0x200001f5
 80022c4:	200001f4 	.word	0x200001f4
 80022c8:	200009fc 	.word	0x200009fc
 80022cc:	20000a08 	.word	0x20000a08
 80022d0:	20000a00 	.word	0x20000a00
 80022d4:	08009128 	.word	0x08009128
 80022d8:	08009168 	.word	0x08009168
 80022dc:	08008c34 	.word	0x08008c34
 80022e0:	0800918c 	.word	0x0800918c
 80022e4:	20000a04 	.word	0x20000a04
 80022e8:	08008df4 	.word	0x08008df4

080022ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f0:	f000 fe14 	bl	8002f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f4:	f000 f80e 	bl	8002314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022f8:	f000 f946 	bl	8002588 <MX_GPIO_Init>
  MX_ADC1_Init();
 80022fc:	f000 f862 	bl	80023c4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002300:	f000 f8ee 	bl	80024e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002304:	f000 f916 	bl	8002534 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002308:	f000 f89a 	bl	8002440 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  app();
 800230c:	f7ff ff42 	bl	8002194 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <main+0x24>

08002314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b094      	sub	sp, #80	@ 0x50
 8002318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800231a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800231e:	2228      	movs	r2, #40	@ 0x28
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f004 fbdc 	bl	8006ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002344:	2302      	movs	r3, #2
 8002346:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002348:	2301      	movs	r3, #1
 800234a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800234c:	2310      	movs	r3, #16
 800234e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002350:	2302      	movs	r3, #2
 8002352:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002354:	2300      	movs	r3, #0
 8002356:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002358:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800235c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002362:	4618      	mov	r0, r3
 8002364:	f001 fe14 	bl	8003f90 <HAL_RCC_OscConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800236e:	f000 f961 	bl	8002634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002372:	230f      	movs	r3, #15
 8002374:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002376:	2302      	movs	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800237e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002382:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2102      	movs	r1, #2
 800238e:	4618      	mov	r0, r3
 8002390:	f002 f880 	bl	8004494 <HAL_RCC_ClockConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800239a:	f000 f94b 	bl	8002634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800239e:	2302      	movs	r3, #2
 80023a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 fa00 	bl	80047b0 <HAL_RCCEx_PeriphCLKConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80023b6:	f000 f93d 	bl	8002634 <Error_Handler>
  }
}
 80023ba:	bf00      	nop
 80023bc:	3750      	adds	r7, #80	@ 0x50
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023d4:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <MX_ADC1_Init+0x74>)
 80023d6:	4a19      	ldr	r2, [pc, #100]	@ (800243c <MX_ADC1_Init+0x78>)
 80023d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <MX_ADC1_Init+0x74>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023e0:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <MX_ADC1_Init+0x74>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023e6:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <MX_ADC1_Init+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023ec:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <MX_ADC1_Init+0x74>)
 80023ee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80023f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023f4:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <MX_ADC1_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <MX_ADC1_Init+0x74>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002400:	480d      	ldr	r0, [pc, #52]	@ (8002438 <MX_ADC1_Init+0x74>)
 8002402:	f000 fe11 	bl	8003028 <HAL_ADC_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800240c:	f000 f912 	bl	8002634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002410:	2300      	movs	r3, #0
 8002412:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002414:	2301      	movs	r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	@ (8002438 <MX_ADC1_Init+0x74>)
 8002422:	f001 f8c5 	bl	80035b0 <HAL_ADC_ConfigChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800242c:	f000 f902 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000a08 	.word	0x20000a08
 800243c:	40012400 	.word	0x40012400

08002440 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002454:	463b      	mov	r3, r7
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800245c:	4b1e      	ldr	r3, [pc, #120]	@ (80024d8 <MX_TIM1_Init+0x98>)
 800245e:	4a1f      	ldr	r2, [pc, #124]	@ (80024dc <MX_TIM1_Init+0x9c>)
 8002460:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002462:	4b1d      	ldr	r3, [pc, #116]	@ (80024d8 <MX_TIM1_Init+0x98>)
 8002464:	2200      	movs	r2, #0
 8002466:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002468:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <MX_TIM1_Init+0x98>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800246e:	4b1a      	ldr	r3, [pc, #104]	@ (80024d8 <MX_TIM1_Init+0x98>)
 8002470:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002474:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002476:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <MX_TIM1_Init+0x98>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800247c:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <MX_TIM1_Init+0x98>)
 800247e:	2200      	movs	r2, #0
 8002480:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <MX_TIM1_Init+0x98>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002488:	4813      	ldr	r0, [pc, #76]	@ (80024d8 <MX_TIM1_Init+0x98>)
 800248a:	f002 fafd 	bl	8004a88 <HAL_TIM_Base_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002494:	f000 f8ce 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800249c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800249e:	f107 0308 	add.w	r3, r7, #8
 80024a2:	4619      	mov	r1, r3
 80024a4:	480c      	ldr	r0, [pc, #48]	@ (80024d8 <MX_TIM1_Init+0x98>)
 80024a6:	f002 fb3e 	bl	8004b26 <HAL_TIM_ConfigClockSource>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024b0:	f000 f8c0 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024bc:	463b      	mov	r3, r7
 80024be:	4619      	mov	r1, r3
 80024c0:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <MX_TIM1_Init+0x98>)
 80024c2:	f002 fcfb 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80024cc:	f000 f8b2 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000a38 	.word	0x20000a38
 80024dc:	40012c00 	.word	0x40012c00

080024e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <MX_USART1_UART_Init+0x4c>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <MX_USART1_UART_Init+0x50>)
 80024e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ea:	4b10      	ldr	r3, [pc, #64]	@ (800252c <MX_USART1_UART_Init+0x4c>)
 80024ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <MX_USART1_UART_Init+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <MX_USART1_UART_Init+0x4c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <MX_USART1_UART_Init+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <MX_USART1_UART_Init+0x4c>)
 8002506:	220c      	movs	r2, #12
 8002508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250a:	4b08      	ldr	r3, [pc, #32]	@ (800252c <MX_USART1_UART_Init+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <MX_USART1_UART_Init+0x4c>)
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002516:	4805      	ldr	r0, [pc, #20]	@ (800252c <MX_USART1_UART_Init+0x4c>)
 8002518:	f002 fd2e 	bl	8004f78 <HAL_UART_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002522:	f000 f887 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000a80 	.word	0x20000a80
 8002530:	40013800 	.word	0x40013800

08002534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002538:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <MX_USART2_UART_Init+0x4c>)
 800253a:	4a12      	ldr	r2, [pc, #72]	@ (8002584 <MX_USART2_UART_Init+0x50>)
 800253c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800253e:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <MX_USART2_UART_Init+0x4c>)
 8002540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002546:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <MX_USART2_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800254c:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <MX_USART2_UART_Init+0x4c>)
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002552:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <MX_USART2_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <MX_USART2_UART_Init+0x4c>)
 800255a:	220c      	movs	r2, #12
 800255c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255e:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <MX_USART2_UART_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <MX_USART2_UART_Init+0x4c>)
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800256a:	4805      	ldr	r0, [pc, #20]	@ (8002580 <MX_USART2_UART_Init+0x4c>)
 800256c:	f002 fd04 	bl	8004f78 <HAL_UART_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002576:	f000 f85d 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000ac8 	.word	0x20000ac8
 8002584:	40004400 	.word	0x40004400

08002588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800259c:	4b22      	ldr	r3, [pc, #136]	@ (8002628 <MX_GPIO_Init+0xa0>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a21      	ldr	r2, [pc, #132]	@ (8002628 <MX_GPIO_Init+0xa0>)
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002628 <MX_GPIO_Init+0xa0>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002628 <MX_GPIO_Init+0xa0>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <MX_GPIO_Init+0xa0>)
 80025ba:	f043 0308 	orr.w	r3, r3, #8
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <MX_GPIO_Init+0xa0>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_Pin|MA1_Pin, GPIO_PIN_RESET);
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80025d2:	4816      	ldr	r0, [pc, #88]	@ (800262c <MX_GPIO_Init+0xa4>)
 80025d4:	f001 fcc4 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MA2_Pin|MB1_Pin|MB2_Pin, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80025de:	4814      	ldr	r0, [pc, #80]	@ (8002630 <MX_GPIO_Init+0xa8>)
 80025e0:	f001 fcbe 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_Pin MA1_Pin */
  GPIO_InitStruct.Pin = MOTOR_Pin|MA1_Pin;
 80025e4:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80025e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2302      	movs	r3, #2
 80025f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 0308 	add.w	r3, r7, #8
 80025fa:	4619      	mov	r1, r3
 80025fc:	480b      	ldr	r0, [pc, #44]	@ (800262c <MX_GPIO_Init+0xa4>)
 80025fe:	f001 fb2b 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : MA2_Pin MB1_Pin MB2_Pin */
  GPIO_InitStruct.Pin = MA2_Pin|MB1_Pin|MB2_Pin;
 8002602:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8002606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002608:	2301      	movs	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2302      	movs	r3, #2
 8002612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	4619      	mov	r1, r3
 800261a:	4805      	ldr	r0, [pc, #20]	@ (8002630 <MX_GPIO_Init+0xa8>)
 800261c:	f001 fb1c 	bl	8003c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002620:	bf00      	nop
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	40010800 	.word	0x40010800
 8002630:	40010c00 	.word	0x40010c00

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <Error_Handler+0x8>

08002640 <outStep>:
		0b0110,
		0b0101,
		0b1001
};

void outStep(uint8_t step) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MA1_GPIO_Port, MA1_Pin, stepLUT[step] >> 0 & 1);
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	4a1b      	ldr	r2, [pc, #108]	@ (80026bc <outStep+0x7c>)
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800265c:	4818      	ldr	r0, [pc, #96]	@ (80026c0 <outStep+0x80>)
 800265e:	f001 fc7f 	bl	8003f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MA2_GPIO_Port, MA2_Pin, stepLUT[step] >> 1 & 1);
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	4a15      	ldr	r2, [pc, #84]	@ (80026bc <outStep+0x7c>)
 8002666:	5cd3      	ldrb	r3, [r2, r3]
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002678:	4812      	ldr	r0, [pc, #72]	@ (80026c4 <outStep+0x84>)
 800267a:	f001 fc71 	bl	8003f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB1_GPIO_Port, MB1_Pin, stepLUT[step] >> 2 & 1);
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	4a0e      	ldr	r2, [pc, #56]	@ (80026bc <outStep+0x7c>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	2110      	movs	r1, #16
 8002692:	480c      	ldr	r0, [pc, #48]	@ (80026c4 <outStep+0x84>)
 8002694:	f001 fc64 	bl	8003f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB2_GPIO_Port, MB2_Pin, stepLUT[step] >> 3 & 1);
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <outStep+0x7c>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	2120      	movs	r1, #32
 80026ac:	4805      	ldr	r0, [pc, #20]	@ (80026c4 <outStep+0x84>)
 80026ae:	f001 fc57 	bl	8003f60 <HAL_GPIO_WritePin>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000000 	.word	0x20000000
 80026c0:	40010800 	.word	0x40010800
 80026c4:	40010c00 	.word	0x40010c00

080026c8 <runStep>:

// 모터의 동작을 제어. 호출 주기에 따라서 속도가 변화
void runStep(direction_t dir) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
	static uint8_t cur_step;	// 0 ~ 255;
	switch(dir) {
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d013      	beq.n	8002700 <runStep+0x38>
 80026d8:	2b02      	cmp	r3, #2
 80026da:	dc22      	bgt.n	8002722 <runStep+0x5a>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01d      	beq.n	800271c <runStep+0x54>
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d11e      	bne.n	8002722 <runStep+0x5a>
		case dir_none:
			break;
		case dir_cw:
			cur_step++;
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <runStep+0x6c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <runStep+0x6c>)
 80026ee:	701a      	strb	r2, [r3, #0]
			cur_step %= 4;
 80026f0:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <runStep+0x6c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <runStep+0x6c>)
 80026fc:	701a      	strb	r2, [r3, #0]
			break;
 80026fe:	e010      	b.n	8002722 <runStep+0x5a>
		case dir_ccw:
			cur_step--;
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <runStep+0x6c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	3b01      	subs	r3, #1
 8002706:	b2da      	uxtb	r2, r3
 8002708:	4b0a      	ldr	r3, [pc, #40]	@ (8002734 <runStep+0x6c>)
 800270a:	701a      	strb	r2, [r3, #0]
			if(cur_step == 255) cur_step = 3;
 800270c:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <runStep+0x6c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2bff      	cmp	r3, #255	@ 0xff
 8002712:	d105      	bne.n	8002720 <runStep+0x58>
 8002714:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <runStep+0x6c>)
 8002716:	2203      	movs	r2, #3
 8002718:	701a      	strb	r2, [r3, #0]
			break;
 800271a:	e001      	b.n	8002720 <runStep+0x58>
			break;
 800271c:	bf00      	nop
 800271e:	e000      	b.n	8002722 <runStep+0x5a>
			break;
 8002720:	bf00      	nop
	}
	outStep(cur_step);
 8002722:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <runStep+0x6c>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff8a 	bl	8002640 <outStep>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000b10 	.word	0x20000b10

08002738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_MspInit+0x5c>)
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	4a14      	ldr	r2, [pc, #80]	@ (8002794 <HAL_MspInit+0x5c>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6193      	str	r3, [r2, #24]
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <HAL_MspInit+0x5c>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <HAL_MspInit+0x5c>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4a0e      	ldr	r2, [pc, #56]	@ (8002794 <HAL_MspInit+0x5c>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002760:	61d3      	str	r3, [r2, #28]
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <HAL_MspInit+0x5c>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800276e:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <HAL_MspInit+0x60>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <HAL_MspInit+0x60>)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000

0800279c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a14      	ldr	r2, [pc, #80]	@ (8002808 <HAL_ADC_MspInit+0x6c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d121      	bne.n	8002800 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027bc:	4b13      	ldr	r3, [pc, #76]	@ (800280c <HAL_ADC_MspInit+0x70>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	4a12      	ldr	r2, [pc, #72]	@ (800280c <HAL_ADC_MspInit+0x70>)
 80027c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027c6:	6193      	str	r3, [r2, #24]
 80027c8:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_ADC_MspInit+0x70>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	4b0d      	ldr	r3, [pc, #52]	@ (800280c <HAL_ADC_MspInit+0x70>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a0c      	ldr	r2, [pc, #48]	@ (800280c <HAL_ADC_MspInit+0x70>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <HAL_ADC_MspInit+0x70>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027ec:	2301      	movs	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f0:	2303      	movs	r3, #3
 80027f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4619      	mov	r1, r3
 80027fa:	4805      	ldr	r0, [pc, #20]	@ (8002810 <HAL_ADC_MspInit+0x74>)
 80027fc:	f001 fa2c 	bl	8003c58 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002800:	bf00      	nop
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40012400 	.word	0x40012400
 800280c:	40021000 	.word	0x40021000
 8002810:	40010800 	.word	0x40010800

08002814 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a09      	ldr	r2, [pc, #36]	@ (8002848 <HAL_TIM_Base_MspInit+0x34>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10b      	bne.n	800283e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002826:	4b09      	ldr	r3, [pc, #36]	@ (800284c <HAL_TIM_Base_MspInit+0x38>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	4a08      	ldr	r2, [pc, #32]	@ (800284c <HAL_TIM_Base_MspInit+0x38>)
 800282c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002830:	6193      	str	r3, [r2, #24]
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_TIM_Base_MspInit+0x38>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40021000 	.word	0x40021000

08002850 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	@ 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0318 	add.w	r3, r7, #24
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a3f      	ldr	r2, [pc, #252]	@ (8002968 <HAL_UART_MspInit+0x118>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d13a      	bne.n	80028e6 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002870:	4b3e      	ldr	r3, [pc, #248]	@ (800296c <HAL_UART_MspInit+0x11c>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4a3d      	ldr	r2, [pc, #244]	@ (800296c <HAL_UART_MspInit+0x11c>)
 8002876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800287a:	6193      	str	r3, [r2, #24]
 800287c:	4b3b      	ldr	r3, [pc, #236]	@ (800296c <HAL_UART_MspInit+0x11c>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002888:	4b38      	ldr	r3, [pc, #224]	@ (800296c <HAL_UART_MspInit+0x11c>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	4a37      	ldr	r2, [pc, #220]	@ (800296c <HAL_UART_MspInit+0x11c>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6193      	str	r3, [r2, #24]
 8002894:	4b35      	ldr	r3, [pc, #212]	@ (800296c <HAL_UART_MspInit+0x11c>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	f107 0318 	add.w	r3, r7, #24
 80028b2:	4619      	mov	r1, r3
 80028b4:	482e      	ldr	r0, [pc, #184]	@ (8002970 <HAL_UART_MspInit+0x120>)
 80028b6:	f001 f9cf 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 0318 	add.w	r3, r7, #24
 80028cc:	4619      	mov	r1, r3
 80028ce:	4828      	ldr	r0, [pc, #160]	@ (8002970 <HAL_UART_MspInit+0x120>)
 80028d0:	f001 f9c2 	bl	8003c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	2025      	movs	r0, #37	@ 0x25
 80028da:	f001 f8d4 	bl	8003a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028de:	2025      	movs	r0, #37	@ 0x25
 80028e0:	f001 f8ed 	bl	8003abe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80028e4:	e03c      	b.n	8002960 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a22      	ldr	r2, [pc, #136]	@ (8002974 <HAL_UART_MspInit+0x124>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d137      	bne.n	8002960 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f0:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <HAL_UART_MspInit+0x11c>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <HAL_UART_MspInit+0x11c>)
 80028f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028fa:	61d3      	str	r3, [r2, #28]
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <HAL_UART_MspInit+0x11c>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002908:	4b18      	ldr	r3, [pc, #96]	@ (800296c <HAL_UART_MspInit+0x11c>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4a17      	ldr	r2, [pc, #92]	@ (800296c <HAL_UART_MspInit+0x11c>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6193      	str	r3, [r2, #24]
 8002914:	4b15      	ldr	r3, [pc, #84]	@ (800296c <HAL_UART_MspInit+0x11c>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002920:	2304      	movs	r3, #4
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 0318 	add.w	r3, r7, #24
 8002930:	4619      	mov	r1, r3
 8002932:	480f      	ldr	r0, [pc, #60]	@ (8002970 <HAL_UART_MspInit+0x120>)
 8002934:	f001 f990 	bl	8003c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002938:	2308      	movs	r3, #8
 800293a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 0318 	add.w	r3, r7, #24
 8002948:	4619      	mov	r1, r3
 800294a:	4809      	ldr	r0, [pc, #36]	@ (8002970 <HAL_UART_MspInit+0x120>)
 800294c:	f001 f984 	bl	8003c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	2026      	movs	r0, #38	@ 0x26
 8002956:	f001 f896 	bl	8003a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800295a:	2026      	movs	r0, #38	@ 0x26
 800295c:	f001 f8af 	bl	8003abe <HAL_NVIC_EnableIRQ>
}
 8002960:	bf00      	nop
 8002962:	3728      	adds	r7, #40	@ 0x28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40013800 	.word	0x40013800
 800296c:	40021000 	.word	0x40021000
 8002970:	40010800 	.word	0x40010800
 8002974:	40004400 	.word	0x40004400

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <NMI_Handler+0x4>

08002980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <MemManage_Handler+0x4>

08002990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <BusFault_Handler+0x4>

08002998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <UsageFault_Handler+0x4>

080029a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SystickCallback();
 80029c8:	f7ff fbc6 	bl	8002158 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029cc:	f000 faec 	bl	8002fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d8:	4802      	ldr	r0, [pc, #8]	@ (80029e4 <USART1_IRQHandler+0x10>)
 80029da:	f002 fbcd 	bl	8005178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000a80 	.word	0x20000a80

080029e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <USART2_IRQHandler+0x10>)
 80029ee:	f002 fbc3 	bl	8005178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000ac8 	.word	0x20000ac8

080029fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return 1;
 8002a00:	2301      	movs	r3, #1
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <_kill>:

int _kill(int pid, int sig)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a14:	f004 f8e8 	bl	8006be8 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2216      	movs	r2, #22
 8002a1c:	601a      	str	r2, [r3, #0]
  return -1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_exit>:

void _exit (int status)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a32:	f04f 31ff 	mov.w	r1, #4294967295
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ffe7 	bl	8002a0a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <_exit+0x12>

08002a40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	e00a      	b.n	8002a68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a52:	f3af 8000 	nop.w
 8002a56:	4601      	mov	r1, r0
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	60ba      	str	r2, [r7, #8]
 8002a5e:	b2ca      	uxtb	r2, r1
 8002a60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3301      	adds	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	dbf0      	blt.n	8002a52 <_read+0x12>
  }

  return len;
 8002a70:	687b      	ldr	r3, [r7, #4]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <_isatty>:

int _isatty(int file)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ab6:	2301      	movs	r3, #1
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
	...

08002adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae4:	4a14      	ldr	r2, [pc, #80]	@ (8002b38 <_sbrk+0x5c>)
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <_sbrk+0x60>)
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002af0:	4b13      	ldr	r3, [pc, #76]	@ (8002b40 <_sbrk+0x64>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af8:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <_sbrk+0x64>)
 8002afa:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <_sbrk+0x68>)
 8002afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <_sbrk+0x64>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d207      	bcs.n	8002b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b0c:	f004 f86c 	bl	8006be8 <__errno>
 8002b10:	4603      	mov	r3, r0
 8002b12:	220c      	movs	r2, #12
 8002b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1a:	e009      	b.n	8002b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b1c:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <_sbrk+0x64>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b22:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <_sbrk+0x64>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	4a05      	ldr	r2, [pc, #20]	@ (8002b40 <_sbrk+0x64>)
 8002b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20005000 	.word	0x20005000
 8002b3c:	00000400 	.word	0x00000400
 8002b40:	20000b14 	.word	0x20000b14
 8002b44:	20000d48 	.word	0x20000d48

08002b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <lookupTemperature>:
		3380, 3242, 3111, 2985, 2865, 2751, 2642, 2538, 2438, 2343, 2252, 2165,
		2082, 2003, 1927, 1855, 1785, 1718, 1655, 1594, 1536, 1480, 1427, 1375,
		1326, 1279, 1234, 1190, 1149, 1109, 1070, 1034 };

// ADC Value를 입력 받아 온도를 계산
float lookupTemperature(uint16_t adcValue) {
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b08a      	sub	sp, #40	@ 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
	const float Vcc = 3.3;
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c90 <lookupTemperature+0x13c>)
 8002b60:	61fb      	str	r3, [r7, #28]
	const float R1 = 10000;
 8002b62:	4b4c      	ldr	r3, [pc, #304]	@ (8002c94 <lookupTemperature+0x140>)
 8002b64:	61bb      	str	r3, [r7, #24]
	float Vo;	// 서미스터의 전압값
	float R2;	// 서미스터의 저항값
	float temperature;

	// ADC값으로부터 전압 계산 (12bit adc = 0 ~ 4095)
	Vo = ((float)adcValue * Vcc) / 4095.0;
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe f893 	bl	8000c94 <__aeabi_ui2f>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	69f9      	ldr	r1, [r7, #28]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe f8e6 	bl	8000d44 <__aeabi_fmul>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4947      	ldr	r1, [pc, #284]	@ (8002c98 <lookupTemperature+0x144>)
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe f995 	bl	8000eac <__aeabi_fdiv>
 8002b82:	4603      	mov	r3, r0
 8002b84:	617b      	str	r3, [r7, #20]
	// Vo를 이용하여 서미스터의 현재 저항값을 계산
	R2 = R1 / ((Vcc / Vo) - 1.0);
 8002b86:	69b8      	ldr	r0, [r7, #24]
 8002b88:	f7fd fc4e 	bl	8000428 <__aeabi_f2d>
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	460d      	mov	r5, r1
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	69f8      	ldr	r0, [r7, #28]
 8002b94:	f7fe f98a 	bl	8000eac <__aeabi_fdiv>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fc44 	bl	8000428 <__aeabi_f2d>
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8002c9c <lookupTemperature+0x148>)
 8002ba6:	f7fd fadf 	bl	8000168 <__aeabi_dsub>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4620      	mov	r0, r4
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f7fd fdbb 	bl	800072c <__aeabi_ddiv>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f7fd ff63 	bl	8000a88 <__aeabi_d2f>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	613b      	str	r3, [r7, #16]

	// 테이블의 크기를 계산
	const int tableSize = sizeof(temperatures) / sizeof(temperatures[0]);
 8002bc6:	2372      	movs	r3, #114	@ 0x72
 8002bc8:	60fb      	str	r3, [r7, #12]

	// LUT에서 해당 저항값의 위치를 찾고, 그 위치에 해당하는 온도 값을 꺼내옴
	for(int i = 0; i < tableSize - 1; i++) {
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	e055      	b.n	8002c7c <lookupTemperature+0x128>
		if (R2 <= resistances[i] && R2 > resistances[i+1]) {
 8002bd0:	4a33      	ldr	r2, [pc, #204]	@ (8002ca0 <lookupTemperature+0x14c>)
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6938      	ldr	r0, [r7, #16]
 8002bdc:	f7fe fa5a 	bl	8001094 <__aeabi_fcmple>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d047      	beq.n	8002c76 <lookupTemperature+0x122>
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	3301      	adds	r3, #1
 8002bea:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca0 <lookupTemperature+0x14c>)
 8002bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	6938      	ldr	r0, [r7, #16]
 8002bf4:	f7fe fa62 	bl	80010bc <__aeabi_fcmpgt>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d03b      	beq.n	8002c76 <lookupTemperature+0x122>
			// 선형 보간을 사용하여 온도를 계산
			float slope = (temperatures[i+1] - temperatures[i]) / (resistances[i+1] - resistances[i]);
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	3301      	adds	r3, #1
 8002c02:	4a28      	ldr	r2, [pc, #160]	@ (8002ca4 <lookupTemperature+0x150>)
 8002c04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c08:	4926      	ldr	r1, [pc, #152]	@ (8002ca4 <lookupTemperature+0x150>)
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	f7fd ff8c 	bl	8000b30 <__aeabi_fsub>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	461c      	mov	r4, r3
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca0 <lookupTemperature+0x14c>)
 8002c22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c26:	491e      	ldr	r1, [pc, #120]	@ (8002ca0 <lookupTemperature+0x14c>)
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f7fd ff7d 	bl	8000b30 <__aeabi_fsub>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7fe f936 	bl	8000eac <__aeabi_fdiv>
 8002c40:	4603      	mov	r3, r0
 8002c42:	60bb      	str	r3, [r7, #8]
			temperature = temperatures[i] + slope * (R2 - resistances[i]);
 8002c44:	4a17      	ldr	r2, [pc, #92]	@ (8002ca4 <lookupTemperature+0x150>)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002c4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <lookupTemperature+0x14c>)
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c54:	4619      	mov	r1, r3
 8002c56:	6938      	ldr	r0, [r7, #16]
 8002c58:	f7fd ff6a 	bl	8000b30 <__aeabi_fsub>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe f86f 	bl	8000d44 <__aeabi_fmul>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7fd ff62 	bl	8000b34 <__addsf3>
 8002c70:	4603      	mov	r3, r0
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 8002c74:	e007      	b.n	8002c86 <lookupTemperature+0x132>
	for(int i = 0; i < tableSize - 1; i++) {
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	6a3a      	ldr	r2, [r7, #32]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	dba4      	blt.n	8002bd0 <lookupTemperature+0x7c>
		}
	}
	return temperature;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3728      	adds	r7, #40	@ 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c90:	40533333 	.word	0x40533333
 8002c94:	461c4000 	.word	0x461c4000
 8002c98:	457ff000 	.word	0x457ff000
 8002c9c:	3ff00000 	.word	0x3ff00000
 8002ca0:	08009378 	.word	0x08009378
 8002ca4:	080091b0 	.word	0x080091b0

08002ca8 <_write>:
uint16_t	rxBufferWriteIndex2;			// 쓰기 인덱스
uint16_t	rxBufferReadIndex2;			// 읽기 인덱스
uint8_t		rxChar2;									// 수신된 1바이트

// printf 장치 재설정
int _write(int file, char *p, int len) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uart, (uint8_t *)p, len, len);
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <_write+0x28>)
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	f002 f9aa 	bl	8005018 <HAL_UART_Transmit>
	return len;
 8002cc4:	687b      	ldr	r3, [r7, #4]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000b18 	.word	0x20000b18

08002cd4 <HAL_UART_RxCpltCallback>:

// uart 수신 인터럽트(문자 수신시 이곳으로 이동됨)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	// uart1에서 수신된 인터럽트 처리
	if(huart->Instance == uart->Instance) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b27      	ldr	r3, [pc, #156]	@ (8002d80 <HAL_UART_RxCpltCallback+0xac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d11f      	bne.n	8002d2a <HAL_UART_RxCpltCallback+0x56>
		rxBuffer[rxBufferWriteIndex++] = rxChar;	// 버퍼에 1바이트 넣고 쓰기 인덱스 1증가
 8002cea:	4b26      	ldr	r3, [pc, #152]	@ (8002d84 <HAL_UART_RxCpltCallback+0xb0>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	b291      	uxth	r1, r2
 8002cf2:	4a24      	ldr	r2, [pc, #144]	@ (8002d84 <HAL_UART_RxCpltCallback+0xb0>)
 8002cf4:	8011      	strh	r1, [r2, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b23      	ldr	r3, [pc, #140]	@ (8002d88 <HAL_UART_RxCpltCallback+0xb4>)
 8002cfa:	7819      	ldrb	r1, [r3, #0]
 8002cfc:	4b23      	ldr	r3, [pc, #140]	@ (8002d8c <HAL_UART_RxCpltCallback+0xb8>)
 8002cfe:	5499      	strb	r1, [r3, r2]
		rxBufferWriteIndex %= rxBufferMax;			// 쓰기 인덱스가 마지막에서 처음으로 이동
 8002d00:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <HAL_UART_RxCpltCallback+0xb0>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	4a22      	ldr	r2, [pc, #136]	@ (8002d90 <HAL_UART_RxCpltCallback+0xbc>)
 8002d06:	fba2 1203 	umull	r1, r2, r2, r3
 8002d0a:	0952      	lsrs	r2, r2, #5
 8002d0c:	2164      	movs	r1, #100	@ 0x64
 8002d0e:	fb01 f202 	mul.w	r2, r1, r2
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_UART_RxCpltCallback+0xb0>)
 8002d18:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(uart, &rxChar, 1);	// 수신 인터럽트 활성화(재장전)
 8002d1a:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <HAL_UART_RxCpltCallback+0xac>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4919      	ldr	r1, [pc, #100]	@ (8002d88 <HAL_UART_RxCpltCallback+0xb4>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 fa03 	bl	800512e <HAL_UART_Receive_IT>
	else if(huart->Instance == uart2->Instance) {
		rxBuffer2[rxBufferWriteIndex2++] = rxChar2;	// 버퍼에 1바이트 넣고 쓰기 인덱스 1증가
		rxBufferWriteIndex2 %= rxBufferMax2;			// 쓰기 인덱스가 마지막에서 처음으로 이동
		HAL_UART_Receive_IT(uart2, &rxChar2, 1);	// 수신 인터럽트 활성화(재장전)
	}
}
 8002d28:	e025      	b.n	8002d76 <HAL_UART_RxCpltCallback+0xa2>
	else if(huart->Instance == uart2->Instance) {
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <HAL_UART_RxCpltCallback+0xc0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d11e      	bne.n	8002d76 <HAL_UART_RxCpltCallback+0xa2>
		rxBuffer2[rxBufferWriteIndex2++] = rxChar2;	// 버퍼에 1바이트 넣고 쓰기 인덱스 1증가
 8002d38:	4b17      	ldr	r3, [pc, #92]	@ (8002d98 <HAL_UART_RxCpltCallback+0xc4>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	b291      	uxth	r1, r2
 8002d40:	4a15      	ldr	r2, [pc, #84]	@ (8002d98 <HAL_UART_RxCpltCallback+0xc4>)
 8002d42:	8011      	strh	r1, [r2, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_UART_RxCpltCallback+0xc8>)
 8002d48:	7819      	ldrb	r1, [r3, #0]
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <HAL_UART_RxCpltCallback+0xcc>)
 8002d4c:	5499      	strb	r1, [r3, r2]
		rxBufferWriteIndex2 %= rxBufferMax2;			// 쓰기 인덱스가 마지막에서 처음으로 이동
 8002d4e:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_UART_RxCpltCallback+0xc4>)
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	4a0f      	ldr	r2, [pc, #60]	@ (8002d90 <HAL_UART_RxCpltCallback+0xbc>)
 8002d54:	fba2 1203 	umull	r1, r2, r2, r3
 8002d58:	0952      	lsrs	r2, r2, #5
 8002d5a:	2164      	movs	r1, #100	@ 0x64
 8002d5c:	fb01 f202 	mul.w	r2, r1, r2
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <HAL_UART_RxCpltCallback+0xc4>)
 8002d66:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(uart2, &rxChar2, 1);	// 수신 인터럽트 활성화(재장전)
 8002d68:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <HAL_UART_RxCpltCallback+0xc0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	490b      	ldr	r1, [pc, #44]	@ (8002d9c <HAL_UART_RxCpltCallback+0xc8>)
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 f9dc 	bl	800512e <HAL_UART_Receive_IT>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000b18 	.word	0x20000b18
 8002d84:	20000b84 	.word	0x20000b84
 8002d88:	20000b88 	.word	0x20000b88
 8002d8c:	20000b20 	.word	0x20000b20
 8002d90:	51eb851f 	.word	0x51eb851f
 8002d94:	20000b1c 	.word	0x20000b1c
 8002d98:	20000bf0 	.word	0x20000bf0
 8002d9c:	20000bf2 	.word	0x20000bf2
 8002da0:	20000b8c 	.word	0x20000b8c

08002da4 <initUart>:

// function implementation
// 함수 초기화
void initUart(UART_HandleTypeDef *huart) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	uart = huart;	// uart 장치 핸들 저장
 8002dac:	4a06      	ldr	r2, [pc, #24]	@ (8002dc8 <initUart+0x24>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(uart, &rxChar, 1);	// 수신 인터럽트 활성화
 8002db2:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <initUart+0x24>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2201      	movs	r2, #1
 8002db8:	4904      	ldr	r1, [pc, #16]	@ (8002dcc <initUart+0x28>)
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 f9b7 	bl	800512e <HAL_UART_Receive_IT>
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000b18 	.word	0x20000b18
 8002dcc:	20000b88 	.word	0x20000b88

08002dd0 <initUart2>:

void initUart2(UART_HandleTypeDef *huart) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	uart2 = huart;	// uart 장치 핸들 저장
 8002dd8:	4a06      	ldr	r2, [pc, #24]	@ (8002df4 <initUart2+0x24>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(uart2, &rxChar2, 1);	// 수신 인터럽트 활성화
 8002dde:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <initUart2+0x24>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2201      	movs	r2, #1
 8002de4:	4904      	ldr	r1, [pc, #16]	@ (8002df8 <initUart2+0x28>)
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 f9a1 	bl	800512e <HAL_UART_Receive_IT>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000b1c 	.word	0x20000b1c
 8002df8:	20000bf2 	.word	0x20000bf2

08002dfc <clearBuffer>:

// 수신 버퍼 초기화
void clearBuffer() {
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
	rxBufferWriteIndex = rxBufferReadIndex = 0;
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <clearBuffer+0x1c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	801a      	strh	r2, [r3, #0]
 8002e06:	4b04      	ldr	r3, [pc, #16]	@ (8002e18 <clearBuffer+0x1c>)
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <clearBuffer+0x20>)
 8002e0c:	801a      	strh	r2, [r3, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000b86 	.word	0x20000b86
 8002e1c:	20000b84 	.word	0x20000b84

08002e20 <getUart>:

char getUart() {
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
	char result;
	if(rxBufferWriteIndex == rxBufferReadIndex) return 0;	// 버퍼가 비어있음
 8002e26:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <getUart+0x50>)
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	4b12      	ldr	r3, [pc, #72]	@ (8002e74 <getUart+0x54>)
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d101      	bne.n	8002e36 <getUart+0x16>
 8002e32:	2300      	movs	r3, #0
 8002e34:	e017      	b.n	8002e66 <getUart+0x46>
	result = rxBuffer[rxBufferReadIndex++];	// 버퍼에서 1바이트 꺼내고 읽기 인덱스 1증가
 8002e36:	4b0f      	ldr	r3, [pc, #60]	@ (8002e74 <getUart+0x54>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	b291      	uxth	r1, r2
 8002e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e74 <getUart+0x54>)
 8002e40:	8011      	strh	r1, [r2, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <getUart+0x58>)
 8002e46:	5c9b      	ldrb	r3, [r3, r2]
 8002e48:	71fb      	strb	r3, [r7, #7]
	rxBufferReadIndex %= rxBufferMax;	// 읽기 인덱스가 마지막에서 처음으로 이동
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <getUart+0x54>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e7c <getUart+0x5c>)
 8002e50:	fba2 1203 	umull	r1, r2, r2, r3
 8002e54:	0952      	lsrs	r2, r2, #5
 8002e56:	2164      	movs	r1, #100	@ 0x64
 8002e58:	fb01 f202 	mul.w	r2, r1, r2
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <getUart+0x54>)
 8002e62:	801a      	strh	r2, [r3, #0]
	return result;
 8002e64:	79fb      	ldrb	r3, [r7, #7]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000b84 	.word	0x20000b84
 8002e74:	20000b86 	.word	0x20000b86
 8002e78:	20000b20 	.word	0x20000b20
 8002e7c:	51eb851f 	.word	0x51eb851f

08002e80 <printf2>:
		}
	}
	return msg;
}

void printf2(const char *format, ...) {
 8002e80:	b40f      	push	{r0, r1, r2, r3}
 8002e82:	b5b0      	push	{r4, r5, r7, lr}
 8002e84:	b09a      	sub	sp, #104	@ 0x68
 8002e86:	af00      	add	r7, sp, #0
	char buffer[100];
	va_list args;
	va_start(args, format);
 8002e88:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002e8c:	603b      	str	r3, [r7, #0]
	// snprintf(배열, 배열크기, ...)
	vsnprintf(buffer, sizeof(buffer), format, args);
 8002e8e:	1d38      	adds	r0, r7, #4
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002e94:	2164      	movs	r1, #100	@ 0x64
 8002e96:	f003 fd81 	bl	800699c <vsniprintf>
	va_end(args);
	HAL_UART_Transmit(uart2, buffer, strlen(buffer), strlen(buffer));
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <printf2+0x4c>)
 8002e9c:	681c      	ldr	r4, [r3, #0]
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fd f955 	bl	8000150 <strlen>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	b29d      	uxth	r5, r3
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd f94f 	bl	8000150 <strlen>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	1d39      	adds	r1, r7, #4
 8002eb6:	462a      	mov	r2, r5
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f002 f8ad 	bl	8005018 <HAL_UART_Transmit>
}
 8002ebe:	bf00      	nop
 8002ec0:	3768      	adds	r7, #104	@ 0x68
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ec8:	b004      	add	sp, #16
 8002eca:	4770      	bx	lr
 8002ecc:	20000b1c 	.word	0x20000b1c

08002ed0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ed0:	f7ff fe3a 	bl	8002b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ed4:	480b      	ldr	r0, [pc, #44]	@ (8002f04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ed6:	490c      	ldr	r1, [pc, #48]	@ (8002f08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8002f0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002edc:	e002      	b.n	8002ee4 <LoopCopyDataInit>

08002ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ee2:	3304      	adds	r3, #4

08002ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee8:	d3f9      	bcc.n	8002ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eea:	4a09      	ldr	r2, [pc, #36]	@ (8002f10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002eec:	4c09      	ldr	r4, [pc, #36]	@ (8002f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef0:	e001      	b.n	8002ef6 <LoopFillZerobss>

08002ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef4:	3204      	adds	r2, #4

08002ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef8:	d3fb      	bcc.n	8002ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002efa:	f003 fe7b 	bl	8006bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002efe:	f7ff f9f5 	bl	80022ec <main>
  bx lr
 8002f02:	4770      	bx	lr
  ldr r0, =_sdata
 8002f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f08:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002f0c:	080098e8 	.word	0x080098e8
  ldr r2, =_sbss
 8002f10:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002f14:	20000d44 	.word	0x20000d44

08002f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC1_2_IRQHandler>
	...

08002f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f20:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <HAL_Init+0x28>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a07      	ldr	r2, [pc, #28]	@ (8002f44 <HAL_Init+0x28>)
 8002f26:	f043 0310 	orr.w	r3, r3, #16
 8002f2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f000 fd9f 	bl	8003a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f32:	200f      	movs	r0, #15
 8002f34:	f000 f808 	bl	8002f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f38:	f7ff fbfe 	bl	8002738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40022000 	.word	0x40022000

08002f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f50:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <HAL_InitTick+0x54>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_InitTick+0x58>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fdb7 	bl	8003ada <HAL_SYSTICK_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00e      	b.n	8002f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b0f      	cmp	r3, #15
 8002f7a:	d80a      	bhi.n	8002f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f000 fd7f 	bl	8003a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f88:	4a06      	ldr	r2, [pc, #24]	@ (8002fa4 <HAL_InitTick+0x5c>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	2000000c 	.word	0x2000000c
 8002fa4:	20000008 	.word	0x20000008

08002fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_IncTick+0x1c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_IncTick+0x20>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a03      	ldr	r2, [pc, #12]	@ (8002fc8 <HAL_IncTick+0x20>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	2000000c 	.word	0x2000000c
 8002fc8:	20000bf4 	.word	0x20000bf4

08002fcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b02      	ldr	r3, [pc, #8]	@ (8002fdc <HAL_GetTick+0x10>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	20000bf4 	.word	0x20000bf4

08002fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d005      	beq.n	8003006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <HAL_Delay+0x44>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003006:	bf00      	nop
 8003008:	f7ff ffe0 	bl	8002fcc <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d8f7      	bhi.n	8003008 <HAL_Delay+0x28>
  {
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	2000000c 	.word	0x2000000c

08003028 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0be      	b.n	80031c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fb98 	bl	800279c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fbf1 	bl	8003854 <ADC_ConversionStop_Disable>
 8003072:	4603      	mov	r3, r0
 8003074:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 8099 	bne.w	80031b6 <HAL_ADC_Init+0x18e>
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 8095 	bne.w	80031b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003094:	f023 0302 	bic.w	r3, r3, #2
 8003098:	f043 0202 	orr.w	r2, r3, #2
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	7b1b      	ldrb	r3, [r3, #12]
 80030ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030c0:	d003      	beq.n	80030ca <HAL_ADC_Init+0xa2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d102      	bne.n	80030d0 <HAL_ADC_Init+0xa8>
 80030ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030ce:	e000      	b.n	80030d2 <HAL_ADC_Init+0xaa>
 80030d0:	2300      	movs	r3, #0
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7d1b      	ldrb	r3, [r3, #20]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d119      	bne.n	8003114 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7b1b      	ldrb	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	035a      	lsls	r2, r3, #13
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	e00b      	b.n	8003114 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <HAL_ADC_Init+0x1a8>)
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	430b      	orrs	r3, r1
 800313a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003144:	d003      	beq.n	800314e <HAL_ADC_Init+0x126>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d104      	bne.n	8003158 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	3b01      	subs	r3, #1
 8003154:	051b      	lsls	r3, r3, #20
 8003156:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	430a      	orrs	r2, r1
 800316a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	4b18      	ldr	r3, [pc, #96]	@ (80031d4 <HAL_ADC_Init+0x1ac>)
 8003174:	4013      	ands	r3, r2
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	d10b      	bne.n	8003194 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003192:	e018      	b.n	80031c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	f023 0312 	bic.w	r3, r3, #18
 800319c:	f043 0210 	orr.w	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031b4:	e007      	b.n	80031c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	f043 0210 	orr.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	ffe1f7fd 	.word	0xffe1f7fd
 80031d4:	ff1f0efe 	.word	0xff1f0efe

080031d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_Start+0x1a>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e098      	b.n	8003324 <HAL_ADC_Start+0x14c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fad0 	bl	80037a0 <ADC_Enable>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 8087 	bne.w	800331a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a41      	ldr	r2, [pc, #260]	@ (800332c <HAL_ADC_Start+0x154>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d105      	bne.n	8003236 <HAL_ADC_Start+0x5e>
 800322a:	4b41      	ldr	r3, [pc, #260]	@ (8003330 <HAL_ADC_Start+0x158>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d115      	bne.n	8003262 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d026      	beq.n	800329e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003258:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003260:	e01d      	b.n	800329e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2f      	ldr	r2, [pc, #188]	@ (8003330 <HAL_ADC_Start+0x158>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d004      	beq.n	8003282 <HAL_ADC_Start+0xaa>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2b      	ldr	r2, [pc, #172]	@ (800332c <HAL_ADC_Start+0x154>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10d      	bne.n	800329e <HAL_ADC_Start+0xc6>
 8003282:	4b2b      	ldr	r3, [pc, #172]	@ (8003330 <HAL_ADC_Start+0x158>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003292:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003296:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d006      	beq.n	80032b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ae:	f023 0206 	bic.w	r2, r3, #6
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032b6:	e002      	b.n	80032be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0202 	mvn.w	r2, #2
 80032ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80032da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80032de:	d113      	bne.n	8003308 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032e4:	4a11      	ldr	r2, [pc, #68]	@ (800332c <HAL_ADC_Start+0x154>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d105      	bne.n	80032f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032ea:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <HAL_ADC_Start+0x158>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003304:	609a      	str	r2, [r3, #8]
 8003306:	e00c      	b.n	8003322 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	e003      	b.n	8003322 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40012800 	.word	0x40012800
 8003330:	40012400 	.word	0x40012400

08003334 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_ADC_Stop+0x1a>
 800334a:	2302      	movs	r3, #2
 800334c:	e01a      	b.n	8003384 <HAL_ADC_Stop+0x50>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa7c 	bl	8003854 <ADC_ConversionStop_Disable>
 800335c:	4603      	mov	r3, r0
 800335e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80033a2:	f7ff fe13 	bl	8002fcc <HAL_GetTick>
 80033a6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e0d3      	b.n	8003576 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d131      	bne.n	8003440 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d12a      	bne.n	8003440 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80033ea:	e021      	b.n	8003430 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d01d      	beq.n	8003430 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_ADC_PollForConversion+0x7e>
 80033fa:	f7ff fde7 	bl	8002fcc <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d212      	bcs.n	8003430 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341c:	f043 0204 	orr.w	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0a2      	b.n	8003576 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0d6      	beq.n	80033ec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800343e:	e070      	b.n	8003522 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003440:	4b4f      	ldr	r3, [pc, #316]	@ (8003580 <HAL_ADC_PollForConversion+0x1f4>)
 8003442:	681c      	ldr	r4, [r3, #0]
 8003444:	2002      	movs	r0, #2
 8003446:	f001 fa69 	bl	800491c <HAL_RCCEx_GetPeriphCLKFreq>
 800344a:	4603      	mov	r3, r0
 800344c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6919      	ldr	r1, [r3, #16]
 8003456:	4b4b      	ldr	r3, [pc, #300]	@ (8003584 <HAL_ADC_PollForConversion+0x1f8>)
 8003458:	400b      	ands	r3, r1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_ADC_PollForConversion+0x104>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68d9      	ldr	r1, [r3, #12]
 8003464:	4b48      	ldr	r3, [pc, #288]	@ (8003588 <HAL_ADC_PollForConversion+0x1fc>)
 8003466:	400b      	ands	r3, r1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <HAL_ADC_PollForConversion+0x104>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6919      	ldr	r1, [r3, #16]
 8003472:	4b46      	ldr	r3, [pc, #280]	@ (800358c <HAL_ADC_PollForConversion+0x200>)
 8003474:	400b      	ands	r3, r1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d108      	bne.n	800348c <HAL_ADC_PollForConversion+0x100>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68d9      	ldr	r1, [r3, #12]
 8003480:	4b43      	ldr	r3, [pc, #268]	@ (8003590 <HAL_ADC_PollForConversion+0x204>)
 8003482:	400b      	ands	r3, r1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_ADC_PollForConversion+0x100>
 8003488:	2314      	movs	r3, #20
 800348a:	e020      	b.n	80034ce <HAL_ADC_PollForConversion+0x142>
 800348c:	2329      	movs	r3, #41	@ 0x29
 800348e:	e01e      	b.n	80034ce <HAL_ADC_PollForConversion+0x142>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6919      	ldr	r1, [r3, #16]
 8003496:	4b3d      	ldr	r3, [pc, #244]	@ (800358c <HAL_ADC_PollForConversion+0x200>)
 8003498:	400b      	ands	r3, r1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_ADC_PollForConversion+0x120>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68d9      	ldr	r1, [r3, #12]
 80034a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003590 <HAL_ADC_PollForConversion+0x204>)
 80034a6:	400b      	ands	r3, r1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <HAL_ADC_PollForConversion+0x13c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6919      	ldr	r1, [r3, #16]
 80034b2:	4b38      	ldr	r3, [pc, #224]	@ (8003594 <HAL_ADC_PollForConversion+0x208>)
 80034b4:	400b      	ands	r3, r1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <HAL_ADC_PollForConversion+0x140>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68d9      	ldr	r1, [r3, #12]
 80034c0:	4b34      	ldr	r3, [pc, #208]	@ (8003594 <HAL_ADC_PollForConversion+0x208>)
 80034c2:	400b      	ands	r3, r1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_PollForConversion+0x140>
 80034c8:	2354      	movs	r3, #84	@ 0x54
 80034ca:	e000      	b.n	80034ce <HAL_ADC_PollForConversion+0x142>
 80034cc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80034d4:	e021      	b.n	800351a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d01a      	beq.n	8003514 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_ADC_PollForConversion+0x168>
 80034e4:	f7ff fd72 	bl	8002fcc <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d20f      	bcs.n	8003514 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d90b      	bls.n	8003514 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	f043 0204 	orr.w	r2, r3, #4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e030      	b.n	8003576 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3301      	adds	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	429a      	cmp	r2, r3
 8003520:	d8d9      	bhi.n	80034d6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0212 	mvn.w	r2, #18
 800352a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003542:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003546:	d115      	bne.n	8003574 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800354c:	2b00      	cmp	r3, #0
 800354e:	d111      	bne.n	8003574 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	bd90      	pop	{r4, r7, pc}
 800357e:	bf00      	nop
 8003580:	20000004 	.word	0x20000004
 8003584:	24924924 	.word	0x24924924
 8003588:	00924924 	.word	0x00924924
 800358c:	12492492 	.word	0x12492492
 8003590:	00492492 	.word	0x00492492
 8003594:	00249249 	.word	0x00249249

08003598 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x20>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e0dc      	b.n	800378a <HAL_ADC_ConfigChannel+0x1da>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b06      	cmp	r3, #6
 80035de:	d81c      	bhi.n	800361a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	3b05      	subs	r3, #5
 80035f2:	221f      	movs	r2, #31
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	4019      	ands	r1, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	3b05      	subs	r3, #5
 800360c:	fa00 f203 	lsl.w	r2, r0, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	635a      	str	r2, [r3, #52]	@ 0x34
 8003618:	e03c      	b.n	8003694 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d81c      	bhi.n	800365c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	3b23      	subs	r3, #35	@ 0x23
 8003634:	221f      	movs	r2, #31
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	4019      	ands	r1, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	3b23      	subs	r3, #35	@ 0x23
 800364e:	fa00 f203 	lsl.w	r2, r0, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	631a      	str	r2, [r3, #48]	@ 0x30
 800365a:	e01b      	b.n	8003694 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	3b41      	subs	r3, #65	@ 0x41
 800366e:	221f      	movs	r2, #31
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	4019      	ands	r1, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	3b41      	subs	r3, #65	@ 0x41
 8003688:	fa00 f203 	lsl.w	r2, r0, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b09      	cmp	r3, #9
 800369a:	d91c      	bls.n	80036d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	3b1e      	subs	r3, #30
 80036ae:	2207      	movs	r2, #7
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	4019      	ands	r1, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6898      	ldr	r0, [r3, #8]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4413      	add	r3, r2
 80036c6:	3b1e      	subs	r3, #30
 80036c8:	fa00 f203 	lsl.w	r2, r0, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	60da      	str	r2, [r3, #12]
 80036d4:	e019      	b.n	800370a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6919      	ldr	r1, [r3, #16]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4413      	add	r3, r2
 80036e6:	2207      	movs	r2, #7
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	4019      	ands	r1, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6898      	ldr	r0, [r3, #8]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b10      	cmp	r3, #16
 8003710:	d003      	beq.n	800371a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003716:	2b11      	cmp	r3, #17
 8003718:	d132      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1d      	ldr	r2, [pc, #116]	@ (8003794 <HAL_ADC_ConfigChannel+0x1e4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d125      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d126      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003740:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b10      	cmp	r3, #16
 8003748:	d11a      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800374a:	4b13      	ldr	r3, [pc, #76]	@ (8003798 <HAL_ADC_ConfigChannel+0x1e8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a13      	ldr	r2, [pc, #76]	@ (800379c <HAL_ADC_ConfigChannel+0x1ec>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	0c9a      	lsrs	r2, r3, #18
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003760:	e002      	b.n	8003768 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3b01      	subs	r3, #1
 8003766:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f9      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x1b2>
 800376e:	e007      	b.n	8003780 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	40012400 	.word	0x40012400
 8003798:	20000004 	.word	0x20000004
 800379c:	431bde83 	.word	0x431bde83

080037a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d040      	beq.n	8003840 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037ce:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <ADC_Enable+0xac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <ADC_Enable+0xb0>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	0c9b      	lsrs	r3, r3, #18
 80037da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037dc:	e002      	b.n	80037e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f9      	bne.n	80037de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037ea:	f7ff fbef 	bl	8002fcc <HAL_GetTick>
 80037ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037f0:	e01f      	b.n	8003832 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037f2:	f7ff fbeb 	bl	8002fcc <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d918      	bls.n	8003832 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d011      	beq.n	8003832 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	f043 0210 	orr.w	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	f043 0201 	orr.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e007      	b.n	8003842 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d1d8      	bne.n	80037f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000004 	.word	0x20000004
 8003850:	431bde83 	.word	0x431bde83

08003854 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d12e      	bne.n	80038cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800387e:	f7ff fba5 	bl	8002fcc <HAL_GetTick>
 8003882:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003884:	e01b      	b.n	80038be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003886:	f7ff fba1 	bl	8002fcc <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d914      	bls.n	80038be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d10d      	bne.n	80038be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	f043 0210 	orr.w	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e007      	b.n	80038ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d0dc      	beq.n	8003886 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e8:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <__NVIC_SetPriorityGrouping+0x44>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038f4:	4013      	ands	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800390a:	4a04      	ldr	r2, [pc, #16]	@ (800391c <__NVIC_SetPriorityGrouping+0x44>)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	60d3      	str	r3, [r2, #12]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003924:	4b04      	ldr	r3, [pc, #16]	@ (8003938 <__NVIC_GetPriorityGrouping+0x18>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	0a1b      	lsrs	r3, r3, #8
 800392a:	f003 0307 	and.w	r3, r3, #7
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	2b00      	cmp	r3, #0
 800394c:	db0b      	blt.n	8003966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	f003 021f 	and.w	r2, r3, #31
 8003954:	4906      	ldr	r1, [pc, #24]	@ (8003970 <__NVIC_EnableIRQ+0x34>)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	2001      	movs	r0, #1
 800395e:	fa00 f202 	lsl.w	r2, r0, r2
 8003962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100

08003974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003984:	2b00      	cmp	r3, #0
 8003986:	db0a      	blt.n	800399e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	490c      	ldr	r1, [pc, #48]	@ (80039c0 <__NVIC_SetPriority+0x4c>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	440b      	add	r3, r1
 8003998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800399c:	e00a      	b.n	80039b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4908      	ldr	r1, [pc, #32]	@ (80039c4 <__NVIC_SetPriority+0x50>)
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3b04      	subs	r3, #4
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	440b      	add	r3, r1
 80039b2:	761a      	strb	r2, [r3, #24]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000e100 	.word	0xe000e100
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	@ 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f1c3 0307 	rsb	r3, r3, #7
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	bf28      	it	cs
 80039e6:	2304      	movcs	r3, #4
 80039e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d902      	bls.n	80039f8 <NVIC_EncodePriority+0x30>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3b03      	subs	r3, #3
 80039f6:	e000      	b.n	80039fa <NVIC_EncodePriority+0x32>
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a10:	f04f 31ff 	mov.w	r1, #4294967295
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43d9      	mvns	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	4313      	orrs	r3, r2
         );
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3724      	adds	r7, #36	@ 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a3c:	d301      	bcc.n	8003a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00f      	b.n	8003a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <SysTick_Config+0x40>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4a:	210f      	movs	r1, #15
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	f7ff ff90 	bl	8003974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a54:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <SysTick_Config+0x40>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5a:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <SysTick_Config+0x40>)
 8003a5c:	2207      	movs	r2, #7
 8003a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	e000e010 	.word	0xe000e010

08003a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ff2d 	bl	80038d8 <__NVIC_SetPriorityGrouping>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a98:	f7ff ff42 	bl	8003920 <__NVIC_GetPriorityGrouping>
 8003a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	6978      	ldr	r0, [r7, #20]
 8003aa4:	f7ff ff90 	bl	80039c8 <NVIC_EncodePriority>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff5f 	bl	8003974 <__NVIC_SetPriority>
}
 8003ab6:	bf00      	nop
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff35 	bl	800393c <__NVIC_EnableIRQ>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ffa2 	bl	8003a2c <SysTick_Config>
 8003ae8:	4603      	mov	r3, r0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d008      	beq.n	8003b1c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e020      	b.n	8003b5e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 020e 	bic.w	r2, r2, #14
 8003b2a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d005      	beq.n	8003b8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2204      	movs	r2, #4
 8003b84:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
 8003b8a:	e051      	b.n	8003c30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 020e 	bic.w	r2, r2, #14
 8003b9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a22      	ldr	r2, [pc, #136]	@ (8003c3c <HAL_DMA_Abort_IT+0xd4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d029      	beq.n	8003c0a <HAL_DMA_Abort_IT+0xa2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a21      	ldr	r2, [pc, #132]	@ (8003c40 <HAL_DMA_Abort_IT+0xd8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <HAL_DMA_Abort_IT+0x9e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c44 <HAL_DMA_Abort_IT+0xdc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01a      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x98>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1e      	ldr	r2, [pc, #120]	@ (8003c48 <HAL_DMA_Abort_IT+0xe0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d012      	beq.n	8003bfa <HAL_DMA_Abort_IT+0x92>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <HAL_DMA_Abort_IT+0xe4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_DMA_Abort_IT+0x8c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <HAL_DMA_Abort_IT+0xe8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d102      	bne.n	8003bee <HAL_DMA_Abort_IT+0x86>
 8003be8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003bec:	e00e      	b.n	8003c0c <HAL_DMA_Abort_IT+0xa4>
 8003bee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bf2:	e00b      	b.n	8003c0c <HAL_DMA_Abort_IT+0xa4>
 8003bf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bf8:	e008      	b.n	8003c0c <HAL_DMA_Abort_IT+0xa4>
 8003bfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bfe:	e005      	b.n	8003c0c <HAL_DMA_Abort_IT+0xa4>
 8003c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c04:	e002      	b.n	8003c0c <HAL_DMA_Abort_IT+0xa4>
 8003c06:	2310      	movs	r3, #16
 8003c08:	e000      	b.n	8003c0c <HAL_DMA_Abort_IT+0xa4>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	4a11      	ldr	r2, [pc, #68]	@ (8003c54 <HAL_DMA_Abort_IT+0xec>)
 8003c0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
    } 
  }
  return status;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40020008 	.word	0x40020008
 8003c40:	4002001c 	.word	0x4002001c
 8003c44:	40020030 	.word	0x40020030
 8003c48:	40020044 	.word	0x40020044
 8003c4c:	40020058 	.word	0x40020058
 8003c50:	4002006c 	.word	0x4002006c
 8003c54:	40020000 	.word	0x40020000

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b08b      	sub	sp, #44	@ 0x2c
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c66:	2300      	movs	r3, #0
 8003c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c6a:	e169      	b.n	8003f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	f040 8158 	bne.w	8003f3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a9a      	ldr	r2, [pc, #616]	@ (8003ef8 <HAL_GPIO_Init+0x2a0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d05e      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
 8003c94:	4a98      	ldr	r2, [pc, #608]	@ (8003ef8 <HAL_GPIO_Init+0x2a0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d875      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003c9a:	4a98      	ldr	r2, [pc, #608]	@ (8003efc <HAL_GPIO_Init+0x2a4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d058      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
 8003ca0:	4a96      	ldr	r2, [pc, #600]	@ (8003efc <HAL_GPIO_Init+0x2a4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d86f      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003ca6:	4a96      	ldr	r2, [pc, #600]	@ (8003f00 <HAL_GPIO_Init+0x2a8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d052      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
 8003cac:	4a94      	ldr	r2, [pc, #592]	@ (8003f00 <HAL_GPIO_Init+0x2a8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d869      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003cb2:	4a94      	ldr	r2, [pc, #592]	@ (8003f04 <HAL_GPIO_Init+0x2ac>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d04c      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
 8003cb8:	4a92      	ldr	r2, [pc, #584]	@ (8003f04 <HAL_GPIO_Init+0x2ac>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d863      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003cbe:	4a92      	ldr	r2, [pc, #584]	@ (8003f08 <HAL_GPIO_Init+0x2b0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d046      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
 8003cc4:	4a90      	ldr	r2, [pc, #576]	@ (8003f08 <HAL_GPIO_Init+0x2b0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d85d      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003cca:	2b12      	cmp	r3, #18
 8003ccc:	d82a      	bhi.n	8003d24 <HAL_GPIO_Init+0xcc>
 8003cce:	2b12      	cmp	r3, #18
 8003cd0:	d859      	bhi.n	8003d86 <HAL_GPIO_Init+0x12e>
 8003cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <HAL_GPIO_Init+0x80>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003d53 	.word	0x08003d53
 8003cdc:	08003d2d 	.word	0x08003d2d
 8003ce0:	08003d3f 	.word	0x08003d3f
 8003ce4:	08003d81 	.word	0x08003d81
 8003ce8:	08003d87 	.word	0x08003d87
 8003cec:	08003d87 	.word	0x08003d87
 8003cf0:	08003d87 	.word	0x08003d87
 8003cf4:	08003d87 	.word	0x08003d87
 8003cf8:	08003d87 	.word	0x08003d87
 8003cfc:	08003d87 	.word	0x08003d87
 8003d00:	08003d87 	.word	0x08003d87
 8003d04:	08003d87 	.word	0x08003d87
 8003d08:	08003d87 	.word	0x08003d87
 8003d0c:	08003d87 	.word	0x08003d87
 8003d10:	08003d87 	.word	0x08003d87
 8003d14:	08003d87 	.word	0x08003d87
 8003d18:	08003d87 	.word	0x08003d87
 8003d1c:	08003d35 	.word	0x08003d35
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	4a79      	ldr	r2, [pc, #484]	@ (8003f0c <HAL_GPIO_Init+0x2b4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d2a:	e02c      	b.n	8003d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	623b      	str	r3, [r7, #32]
          break;
 8003d32:	e029      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	623b      	str	r3, [r7, #32]
          break;
 8003d3c:	e024      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	3308      	adds	r3, #8
 8003d44:	623b      	str	r3, [r7, #32]
          break;
 8003d46:	e01f      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	623b      	str	r3, [r7, #32]
          break;
 8003d50:	e01a      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	623b      	str	r3, [r7, #32]
          break;
 8003d5e:	e013      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d105      	bne.n	8003d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d68:	2308      	movs	r3, #8
 8003d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	611a      	str	r2, [r3, #16]
          break;
 8003d72:	e009      	b.n	8003d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d74:	2308      	movs	r3, #8
 8003d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	615a      	str	r2, [r3, #20]
          break;
 8003d7e:	e003      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d80:	2300      	movs	r3, #0
 8003d82:	623b      	str	r3, [r7, #32]
          break;
 8003d84:	e000      	b.n	8003d88 <HAL_GPIO_Init+0x130>
          break;
 8003d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2bff      	cmp	r3, #255	@ 0xff
 8003d8c:	d801      	bhi.n	8003d92 <HAL_GPIO_Init+0x13a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	e001      	b.n	8003d96 <HAL_GPIO_Init+0x13e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2bff      	cmp	r3, #255	@ 0xff
 8003d9c:	d802      	bhi.n	8003da4 <HAL_GPIO_Init+0x14c>
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	e002      	b.n	8003daa <HAL_GPIO_Init+0x152>
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	3b08      	subs	r3, #8
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	210f      	movs	r1, #15
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	401a      	ands	r2, r3
 8003dbc:	6a39      	ldr	r1, [r7, #32]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80b1 	beq.w	8003f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f10 <HAL_GPIO_Init+0x2b8>)
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8003f10 <HAL_GPIO_Init+0x2b8>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6193      	str	r3, [r2, #24]
 8003de4:	4b4a      	ldr	r3, [pc, #296]	@ (8003f10 <HAL_GPIO_Init+0x2b8>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003df0:	4a48      	ldr	r2, [pc, #288]	@ (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	3302      	adds	r3, #2
 8003df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	220f      	movs	r2, #15
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4013      	ands	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a40      	ldr	r2, [pc, #256]	@ (8003f18 <HAL_GPIO_Init+0x2c0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_GPIO_Init+0x1ec>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f1c <HAL_GPIO_Init+0x2c4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00d      	beq.n	8003e40 <HAL_GPIO_Init+0x1e8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3e      	ldr	r2, [pc, #248]	@ (8003f20 <HAL_GPIO_Init+0x2c8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d007      	beq.n	8003e3c <HAL_GPIO_Init+0x1e4>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f24 <HAL_GPIO_Init+0x2cc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_GPIO_Init+0x1e0>
 8003e34:	2303      	movs	r3, #3
 8003e36:	e006      	b.n	8003e46 <HAL_GPIO_Init+0x1ee>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	e004      	b.n	8003e46 <HAL_GPIO_Init+0x1ee>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e002      	b.n	8003e46 <HAL_GPIO_Init+0x1ee>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_GPIO_Init+0x1ee>
 8003e44:	2300      	movs	r3, #0
 8003e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e48:	f002 0203 	and.w	r2, r2, #3
 8003e4c:	0092      	lsls	r2, r2, #2
 8003e4e:	4093      	lsls	r3, r2
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e56:	492f      	ldr	r1, [pc, #188]	@ (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d006      	beq.n	8003e7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e70:	4b2d      	ldr	r3, [pc, #180]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	492c      	ldr	r1, [pc, #176]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	608b      	str	r3, [r1, #8]
 8003e7c:	e006      	b.n	8003e8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	4928      	ldr	r1, [pc, #160]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e98:	4b23      	ldr	r3, [pc, #140]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	4922      	ldr	r1, [pc, #136]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60cb      	str	r3, [r1, #12]
 8003ea4:	e006      	b.n	8003eb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ea6:	4b20      	ldr	r3, [pc, #128]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	491e      	ldr	r1, [pc, #120]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d006      	beq.n	8003ece <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ec0:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	4918      	ldr	r1, [pc, #96]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
 8003ecc:	e006      	b.n	8003edc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ece:	4b16      	ldr	r3, [pc, #88]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	4914      	ldr	r1, [pc, #80]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d021      	beq.n	8003f2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	490e      	ldr	r1, [pc, #56]	@ (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	e021      	b.n	8003f3a <HAL_GPIO_Init+0x2e2>
 8003ef6:	bf00      	nop
 8003ef8:	10320000 	.word	0x10320000
 8003efc:	10310000 	.word	0x10310000
 8003f00:	10220000 	.word	0x10220000
 8003f04:	10210000 	.word	0x10210000
 8003f08:	10120000 	.word	0x10120000
 8003f0c:	10110000 	.word	0x10110000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40010800 	.word	0x40010800
 8003f1c:	40010c00 	.word	0x40010c00
 8003f20:	40011000 	.word	0x40011000
 8003f24:	40011400 	.word	0x40011400
 8003f28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f5c <HAL_GPIO_Init+0x304>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	4909      	ldr	r1, [pc, #36]	@ (8003f5c <HAL_GPIO_Init+0x304>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f47f ae8e 	bne.w	8003c6c <HAL_GPIO_Init+0x14>
  }
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	372c      	adds	r7, #44	@ 0x2c
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	40010400 	.word	0x40010400

08003f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f70:	787b      	ldrb	r3, [r7, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f7c:	e003      	b.n	8003f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	041a      	lsls	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	611a      	str	r2, [r3, #16]
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e272      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8087 	beq.w	80040be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb0:	4b92      	ldr	r3, [pc, #584]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d00c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fbc:	4b8f      	ldr	r3, [pc, #572]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d112      	bne.n	8003fee <HAL_RCC_OscConfig+0x5e>
 8003fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd6:	4b89      	ldr	r3, [pc, #548]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d06c      	beq.n	80040bc <HAL_RCC_OscConfig+0x12c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d168      	bne.n	80040bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e24c      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x76>
 8003ff8:	4b80      	ldr	r3, [pc, #512]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a7f      	ldr	r2, [pc, #508]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e02e      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x98>
 800400e:	4b7b      	ldr	r3, [pc, #492]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7a      	ldr	r2, [pc, #488]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b78      	ldr	r3, [pc, #480]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a77      	ldr	r2, [pc, #476]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004020:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e01d      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0xbc>
 8004032:	4b72      	ldr	r3, [pc, #456]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a71      	ldr	r2, [pc, #452]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	4b6f      	ldr	r3, [pc, #444]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a6e      	ldr	r2, [pc, #440]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e00b      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 800404c:	4b6b      	ldr	r3, [pc, #428]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a6a      	ldr	r2, [pc, #424]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b68      	ldr	r3, [pc, #416]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a67      	ldr	r2, [pc, #412]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 800405e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004062:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fe ffae 	bl	8002fcc <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fe ffaa 	bl	8002fcc <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	@ 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e200      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	4b5d      	ldr	r3, [pc, #372]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0xe4>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe ff9a 	bl	8002fcc <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fe ff96 	bl	8002fcc <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	@ 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e1ec      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ae:	4b53      	ldr	r3, [pc, #332]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x10c>
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d063      	beq.n	8004192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ca:	4b4c      	ldr	r3, [pc, #304]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040d6:	4b49      	ldr	r3, [pc, #292]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d11c      	bne.n	800411c <HAL_RCC_OscConfig+0x18c>
 80040e2:	4b46      	ldr	r3, [pc, #280]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d116      	bne.n	800411c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ee:	4b43      	ldr	r3, [pc, #268]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_RCC_OscConfig+0x176>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d001      	beq.n	8004106 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e1c0      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004106:	4b3d      	ldr	r3, [pc, #244]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4939      	ldr	r1, [pc, #228]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411a:	e03a      	b.n	8004192 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004124:	4b36      	ldr	r3, [pc, #216]	@ (8004200 <HAL_RCC_OscConfig+0x270>)
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412a:	f7fe ff4f 	bl	8002fcc <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004132:	f7fe ff4b 	bl	8002fcc <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e1a1      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	4b2d      	ldr	r3, [pc, #180]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004150:	4b2a      	ldr	r3, [pc, #168]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4927      	ldr	r1, [pc, #156]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]
 8004164:	e015      	b.n	8004192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004166:	4b26      	ldr	r3, [pc, #152]	@ (8004200 <HAL_RCC_OscConfig+0x270>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe ff2e 	bl	8002fcc <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004174:	f7fe ff2a 	bl	8002fcc <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e180      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	4b1d      	ldr	r3, [pc, #116]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d03a      	beq.n	8004214 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d019      	beq.n	80041da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a6:	4b17      	ldr	r3, [pc, #92]	@ (8004204 <HAL_RCC_OscConfig+0x274>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ac:	f7fe ff0e 	bl	8002fcc <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b4:	f7fe ff0a 	bl	8002fcc <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e160      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <HAL_RCC_OscConfig+0x26c>)
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041d2:	2001      	movs	r0, #1
 80041d4:	f000 face 	bl	8004774 <RCC_Delay>
 80041d8:	e01c      	b.n	8004214 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041da:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <HAL_RCC_OscConfig+0x274>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e0:	f7fe fef4 	bl	8002fcc <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e6:	e00f      	b.n	8004208 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e8:	f7fe fef0 	bl	8002fcc <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d908      	bls.n	8004208 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e146      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	42420000 	.word	0x42420000
 8004204:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b92      	ldr	r3, [pc, #584]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e9      	bne.n	80041e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a6 	beq.w	800436e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b8b      	ldr	r3, [pc, #556]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4b88      	ldr	r3, [pc, #544]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4a87      	ldr	r2, [pc, #540]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800423c:	61d3      	str	r3, [r2, #28]
 800423e:	4b85      	ldr	r3, [pc, #532]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424e:	4b82      	ldr	r3, [pc, #520]	@ (8004458 <HAL_RCC_OscConfig+0x4c8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d118      	bne.n	800428c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425a:	4b7f      	ldr	r3, [pc, #508]	@ (8004458 <HAL_RCC_OscConfig+0x4c8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7e      	ldr	r2, [pc, #504]	@ (8004458 <HAL_RCC_OscConfig+0x4c8>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7fe feb1 	bl	8002fcc <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fe fead 	bl	8002fcc <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b64      	cmp	r3, #100	@ 0x64
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e103      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	4b75      	ldr	r3, [pc, #468]	@ (8004458 <HAL_RCC_OscConfig+0x4c8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x312>
 8004294:	4b6f      	ldr	r3, [pc, #444]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4a6e      	ldr	r2, [pc, #440]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6213      	str	r3, [r2, #32]
 80042a0:	e02d      	b.n	80042fe <HAL_RCC_OscConfig+0x36e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x334>
 80042aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a69      	ldr	r2, [pc, #420]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6213      	str	r3, [r2, #32]
 80042b6:	4b67      	ldr	r3, [pc, #412]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4a66      	ldr	r2, [pc, #408]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	6213      	str	r3, [r2, #32]
 80042c2:	e01c      	b.n	80042fe <HAL_RCC_OscConfig+0x36e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCC_OscConfig+0x356>
 80042cc:	4b61      	ldr	r3, [pc, #388]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4a60      	ldr	r2, [pc, #384]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6213      	str	r3, [r2, #32]
 80042d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6213      	str	r3, [r2, #32]
 80042e4:	e00b      	b.n	80042fe <HAL_RCC_OscConfig+0x36e>
 80042e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4a5a      	ldr	r2, [pc, #360]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6213      	str	r3, [r2, #32]
 80042f2:	4b58      	ldr	r3, [pc, #352]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	4a57      	ldr	r2, [pc, #348]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004306:	f7fe fe61 	bl	8002fcc <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fe fe5d 	bl	8002fcc <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0b1      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	4b4b      	ldr	r3, [pc, #300]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ee      	beq.n	800430e <HAL_RCC_OscConfig+0x37e>
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004332:	f7fe fe4b 	bl	8002fcc <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fe fe47 	bl	8002fcc <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e09b      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004350:	4b40      	ldr	r3, [pc, #256]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ee      	bne.n	800433a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004362:	4b3c      	ldr	r3, [pc, #240]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	4a3b      	ldr	r2, [pc, #236]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8087 	beq.w	8004486 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004378:	4b36      	ldr	r3, [pc, #216]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d061      	beq.n	8004448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d146      	bne.n	800441a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438c:	4b33      	ldr	r3, [pc, #204]	@ (800445c <HAL_RCC_OscConfig+0x4cc>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fe fe1b 	bl	8002fcc <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439a:	f7fe fe17 	bl	8002fcc <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e06d      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ac:	4b29      	ldr	r3, [pc, #164]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c0:	d108      	bne.n	80043d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043c2:	4b24      	ldr	r3, [pc, #144]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	4921      	ldr	r1, [pc, #132]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a19      	ldr	r1, [r3, #32]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	430b      	orrs	r3, r1
 80043e6:	491b      	ldr	r1, [pc, #108]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ec:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <HAL_RCC_OscConfig+0x4cc>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fe fdeb 	bl	8002fcc <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fe fde7 	bl	8002fcc <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e03d      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800440c:	4b11      	ldr	r3, [pc, #68]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x46a>
 8004418:	e035      	b.n	8004486 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441a:	4b10      	ldr	r3, [pc, #64]	@ (800445c <HAL_RCC_OscConfig+0x4cc>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fe fdd4 	bl	8002fcc <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fe fdd0 	bl	8002fcc <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e026      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800443a:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <HAL_RCC_OscConfig+0x4c4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x498>
 8004446:	e01e      	b.n	8004486 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d107      	bne.n	8004460 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e019      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
 8004454:	40021000 	.word	0x40021000
 8004458:	40007000 	.word	0x40007000
 800445c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004460:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <HAL_RCC_OscConfig+0x500>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	429a      	cmp	r2, r3
 8004472:	d106      	bne.n	8004482 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d001      	beq.n	8004486 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0d0      	b.n	800464a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <HAL_RCC_ClockConfig+0x1c0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d910      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b67      	ldr	r3, [pc, #412]	@ (8004654 <HAL_RCC_ClockConfig+0x1c0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 0207 	bic.w	r2, r3, #7
 80044be:	4965      	ldr	r1, [pc, #404]	@ (8004654 <HAL_RCC_ClockConfig+0x1c0>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b63      	ldr	r3, [pc, #396]	@ (8004654 <HAL_RCC_ClockConfig+0x1c0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0b8      	b.n	800464a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f0:	4b59      	ldr	r3, [pc, #356]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4a58      	ldr	r2, [pc, #352]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80044f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004508:	4b53      	ldr	r3, [pc, #332]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4a52      	ldr	r2, [pc, #328]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004512:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004514:	4b50      	ldr	r3, [pc, #320]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	494d      	ldr	r1, [pc, #308]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d040      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d107      	bne.n	800454a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	4b47      	ldr	r3, [pc, #284]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d115      	bne.n	8004572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e07f      	b.n	800464a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004552:	4b41      	ldr	r3, [pc, #260]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e073      	b.n	800464a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004562:	4b3d      	ldr	r3, [pc, #244]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e06b      	b.n	800464a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004572:	4b39      	ldr	r3, [pc, #228]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f023 0203 	bic.w	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4936      	ldr	r1, [pc, #216]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004584:	f7fe fd22 	bl	8002fcc <HAL_GetTick>
 8004588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458c:	f7fe fd1e 	bl	8002fcc <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e053      	b.n	800464a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 020c 	and.w	r2, r3, #12
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d1eb      	bne.n	800458c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045b4:	4b27      	ldr	r3, [pc, #156]	@ (8004654 <HAL_RCC_ClockConfig+0x1c0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d210      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b24      	ldr	r3, [pc, #144]	@ (8004654 <HAL_RCC_ClockConfig+0x1c0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 0207 	bic.w	r2, r3, #7
 80045ca:	4922      	ldr	r1, [pc, #136]	@ (8004654 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b20      	ldr	r3, [pc, #128]	@ (8004654 <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e032      	b.n	800464a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f0:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4916      	ldr	r1, [pc, #88]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800460e:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	490e      	ldr	r1, [pc, #56]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004622:	f000 f821 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8004626:	4602      	mov	r2, r0
 8004628:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	490a      	ldr	r1, [pc, #40]	@ (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004634:	5ccb      	ldrb	r3, [r1, r3]
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <HAL_RCC_ClockConfig+0x1cc>)
 800463c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800463e:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <HAL_RCC_ClockConfig+0x1d0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fc80 	bl	8002f48 <HAL_InitTick>

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40022000 	.word	0x40022000
 8004658:	40021000 	.word	0x40021000
 800465c:	08009198 	.word	0x08009198
 8004660:	20000004 	.word	0x20000004
 8004664:	20000008 	.word	0x20000008

08004668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	2300      	movs	r3, #0
 800467c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004682:	4b1e      	ldr	r3, [pc, #120]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x94>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b04      	cmp	r3, #4
 8004690:	d002      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0x30>
 8004692:	2b08      	cmp	r3, #8
 8004694:	d003      	beq.n	800469e <HAL_RCC_GetSysClockFreq+0x36>
 8004696:	e027      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004698:	4b19      	ldr	r3, [pc, #100]	@ (8004700 <HAL_RCC_GetSysClockFreq+0x98>)
 800469a:	613b      	str	r3, [r7, #16]
      break;
 800469c:	e027      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	0c9b      	lsrs	r3, r3, #18
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	4a17      	ldr	r2, [pc, #92]	@ (8004704 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046a8:	5cd3      	ldrb	r3, [r2, r3]
 80046aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d010      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046b6:	4b11      	ldr	r3, [pc, #68]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x94>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	0c5b      	lsrs	r3, r3, #17
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	4a11      	ldr	r2, [pc, #68]	@ (8004708 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046c2:	5cd3      	ldrb	r3, [r2, r3]
 80046c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004700 <HAL_RCC_GetSysClockFreq+0x98>)
 80046ca:	fb03 f202 	mul.w	r2, r3, r2
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e004      	b.n	80046e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a0c      	ldr	r2, [pc, #48]	@ (800470c <HAL_RCC_GetSysClockFreq+0xa4>)
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	613b      	str	r3, [r7, #16]
      break;
 80046e6:	e002      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <HAL_RCC_GetSysClockFreq+0x98>)
 80046ea:	613b      	str	r3, [r7, #16]
      break;
 80046ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ee:	693b      	ldr	r3, [r7, #16]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000
 8004700:	007a1200 	.word	0x007a1200
 8004704:	08009540 	.word	0x08009540
 8004708:	08009550 	.word	0x08009550
 800470c:	003d0900 	.word	0x003d0900

08004710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004714:	4b02      	ldr	r3, [pc, #8]	@ (8004720 <HAL_RCC_GetHCLKFreq+0x10>)
 8004716:	681b      	ldr	r3, [r3, #0]
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	20000004 	.word	0x20000004

08004724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004728:	f7ff fff2 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 800472c:	4602      	mov	r2, r0
 800472e:	4b05      	ldr	r3, [pc, #20]	@ (8004744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	4903      	ldr	r1, [pc, #12]	@ (8004748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800473a:	5ccb      	ldrb	r3, [r1, r3]
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40021000 	.word	0x40021000
 8004748:	080091a8 	.word	0x080091a8

0800474c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004750:	f7ff ffde 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 8004754:	4602      	mov	r2, r0
 8004756:	4b05      	ldr	r3, [pc, #20]	@ (800476c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	0adb      	lsrs	r3, r3, #11
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	4903      	ldr	r1, [pc, #12]	@ (8004770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004768:	4618      	mov	r0, r3
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40021000 	.word	0x40021000
 8004770:	080091a8 	.word	0x080091a8

08004774 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800477c:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <RCC_Delay+0x34>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0a      	ldr	r2, [pc, #40]	@ (80047ac <RCC_Delay+0x38>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	0a5b      	lsrs	r3, r3, #9
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004790:	bf00      	nop
  }
  while (Delay --);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1e5a      	subs	r2, r3, #1
 8004796:	60fa      	str	r2, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f9      	bne.n	8004790 <RCC_Delay+0x1c>
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	20000004 	.word	0x20000004
 80047ac:	10624dd3 	.word	0x10624dd3

080047b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d07d      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047cc:	2300      	movs	r3, #0
 80047ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10d      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047dc:	4b4c      	ldr	r3, [pc, #304]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e6:	61d3      	str	r3, [r2, #28]
 80047e8:	4b49      	ldr	r3, [pc, #292]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f4:	2301      	movs	r3, #1
 80047f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	4b46      	ldr	r3, [pc, #280]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d118      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004804:	4b43      	ldr	r3, [pc, #268]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a42      	ldr	r2, [pc, #264]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800480a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800480e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004810:	f7fe fbdc 	bl	8002fcc <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004816:	e008      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004818:	f7fe fbd8 	bl	8002fcc <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	@ 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e06d      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482a:	4b3a      	ldr	r3, [pc, #232]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004836:	4b36      	ldr	r3, [pc, #216]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02e      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	429a      	cmp	r2, r3
 8004852:	d027      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004854:	4b2e      	ldr	r3, [pc, #184]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800485c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800485e:	4b2e      	ldr	r3, [pc, #184]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004864:	4b2c      	ldr	r3, [pc, #176]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800486a:	4a29      	ldr	r2, [pc, #164]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d014      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fe fba7 	bl	8002fcc <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004880:	e00a      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004882:	f7fe fba3 	bl	8002fcc <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004890:	4293      	cmp	r3, r2
 8004892:	d901      	bls.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e036      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004898:	4b1d      	ldr	r3, [pc, #116]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0ee      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4917      	ldr	r1, [pc, #92]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d105      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048bc:	4b14      	ldr	r3, [pc, #80]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	4a13      	ldr	r2, [pc, #76]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	490b      	ldr	r1, [pc, #44]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048f2:	4b07      	ldr	r3, [pc, #28]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4904      	ldr	r1, [pc, #16]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40021000 	.word	0x40021000
 8004914:	40007000 	.word	0x40007000
 8004918:	42420440 	.word	0x42420440

0800491c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	2300      	movs	r3, #0
 800492e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	2300      	movs	r3, #0
 8004936:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b10      	cmp	r3, #16
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b10      	cmp	r3, #16
 8004942:	f200 808a 	bhi.w	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d045      	beq.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d075      	beq.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004952:	e082      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004954:	4b46      	ldr	r3, [pc, #280]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800495a:	4b45      	ldr	r3, [pc, #276]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d07b      	beq.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	0c9b      	lsrs	r3, r3, #18
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	4a41      	ldr	r2, [pc, #260]	@ (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004970:	5cd3      	ldrb	r3, [r2, r3]
 8004972:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800497e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	0c5b      	lsrs	r3, r3, #17
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	4a3b      	ldr	r2, [pc, #236]	@ (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800498a:	5cd3      	ldrb	r3, [r2, r3]
 800498c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00d      	beq.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004998:	4a38      	ldr	r2, [pc, #224]	@ (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	fbb2 f2f3 	udiv	r2, r2, r3
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e004      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4a34      	ldr	r2, [pc, #208]	@ (8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80049b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c0:	d102      	bne.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	61bb      	str	r3, [r7, #24]
      break;
 80049c6:	e04a      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	61bb      	str	r3, [r7, #24]
      break;
 80049d6:	e042      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80049d8:	4b25      	ldr	r3, [pc, #148]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e8:	d108      	bne.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80049f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e01f      	b.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a06:	d109      	bne.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004a08:	4b19      	ldr	r3, [pc, #100]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004a14:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	e00f      	b.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a26:	d11c      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004a28:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d016      	beq.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004a34:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004a38:	61bb      	str	r3, [r7, #24]
      break;
 8004a3a:	e012      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004a3c:	e011      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a3e:	f7ff fe85 	bl	800474c <HAL_RCC_GetPCLK2Freq>
 8004a42:	4602      	mov	r2, r0
 8004a44:	4b0a      	ldr	r3, [pc, #40]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	0b9b      	lsrs	r3, r3, #14
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	3301      	adds	r3, #1
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	61bb      	str	r3, [r7, #24]
      break;
 8004a58:	e004      	b.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e002      	b.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e000      	b.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a62:	bf00      	nop
    }
  }
  return (frequency);
 8004a64:	69bb      	ldr	r3, [r7, #24]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40021000 	.word	0x40021000
 8004a74:	08009554 	.word	0x08009554
 8004a78:	08009564 	.word	0x08009564
 8004a7c:	007a1200 	.word	0x007a1200
 8004a80:	003d0900 	.word	0x003d0900
 8004a84:	aaaaaaab 	.word	0xaaaaaaab

08004a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e041      	b.n	8004b1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fd feb0 	bl	8002814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f000 f8f4 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_ConfigClockSource+0x1c>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e0b4      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x186>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b68:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b7a:	d03e      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0xd4>
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b80:	f200 8087 	bhi.w	8004c92 <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b88:	f000 8086 	beq.w	8004c98 <HAL_TIM_ConfigClockSource+0x172>
 8004b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b90:	d87f      	bhi.n	8004c92 <HAL_TIM_ConfigClockSource+0x16c>
 8004b92:	2b70      	cmp	r3, #112	@ 0x70
 8004b94:	d01a      	beq.n	8004bcc <HAL_TIM_ConfigClockSource+0xa6>
 8004b96:	2b70      	cmp	r3, #112	@ 0x70
 8004b98:	d87b      	bhi.n	8004c92 <HAL_TIM_ConfigClockSource+0x16c>
 8004b9a:	2b60      	cmp	r3, #96	@ 0x60
 8004b9c:	d050      	beq.n	8004c40 <HAL_TIM_ConfigClockSource+0x11a>
 8004b9e:	2b60      	cmp	r3, #96	@ 0x60
 8004ba0:	d877      	bhi.n	8004c92 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba2:	2b50      	cmp	r3, #80	@ 0x50
 8004ba4:	d03c      	beq.n	8004c20 <HAL_TIM_ConfigClockSource+0xfa>
 8004ba6:	2b50      	cmp	r3, #80	@ 0x50
 8004ba8:	d873      	bhi.n	8004c92 <HAL_TIM_ConfigClockSource+0x16c>
 8004baa:	2b40      	cmp	r3, #64	@ 0x40
 8004bac:	d058      	beq.n	8004c60 <HAL_TIM_ConfigClockSource+0x13a>
 8004bae:	2b40      	cmp	r3, #64	@ 0x40
 8004bb0:	d86f      	bhi.n	8004c92 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb2:	2b30      	cmp	r3, #48	@ 0x30
 8004bb4:	d064      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0x15a>
 8004bb6:	2b30      	cmp	r3, #48	@ 0x30
 8004bb8:	d86b      	bhi.n	8004c92 <HAL_TIM_ConfigClockSource+0x16c>
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d060      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0x15a>
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d867      	bhi.n	8004c92 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d05c      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0x15a>
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d05a      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0x15a>
 8004bca:	e062      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bdc:	f000 f94f 	bl	8004e7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	609a      	str	r2, [r3, #8]
      break;
 8004bf8:	e04f      	b.n	8004c9a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c0a:	f000 f938 	bl	8004e7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c1c:	609a      	str	r2, [r3, #8]
      break;
 8004c1e:	e03c      	b.n	8004c9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	f000 f8af 	bl	8004d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2150      	movs	r1, #80	@ 0x50
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f906 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004c3e:	e02c      	b.n	8004c9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f000 f8cd 	bl	8004dec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2160      	movs	r1, #96	@ 0x60
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f8f6 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004c5e:	e01c      	b.n	8004c9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f000 f88f 	bl	8004d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2140      	movs	r1, #64	@ 0x40
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f8e6 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004c7e:	e00c      	b.n	8004c9a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f000 f8dd 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004c90:	e003      	b.n	8004c9a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
      break;
 8004c96:	e000      	b.n	8004c9a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8004d84 <TIM_Base_SetConfig+0xd0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0x30>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x30>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d88 <TIM_Base_SetConfig+0xd4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x30>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a2b      	ldr	r2, [pc, #172]	@ (8004d8c <TIM_Base_SetConfig+0xd8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a22      	ldr	r2, [pc, #136]	@ (8004d84 <TIM_Base_SetConfig+0xd0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <TIM_Base_SetConfig+0x62>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d04:	d007      	beq.n	8004d16 <TIM_Base_SetConfig+0x62>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1f      	ldr	r2, [pc, #124]	@ (8004d88 <TIM_Base_SetConfig+0xd4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_Base_SetConfig+0x62>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1e      	ldr	r2, [pc, #120]	@ (8004d8c <TIM_Base_SetConfig+0xd8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d108      	bne.n	8004d28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004d84 <TIM_Base_SetConfig+0xd0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	611a      	str	r2, [r3, #16]
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800

08004d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f023 0201 	bic.w	r2, r3, #1
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f023 030a 	bic.w	r3, r3, #10
 8004dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr

08004dec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0210 	bic.w	r2, r3, #16
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	031b      	lsls	r3, r3, #12
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	621a      	str	r2, [r3, #32]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f043 0307 	orr.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b087      	sub	sp, #28
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
 8004e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	021a      	lsls	r2, r3, #8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e046      	b.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a16      	ldr	r2, [pc, #88]	@ (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f20:	d009      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a12      	ldr	r2, [pc, #72]	@ (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a10      	ldr	r2, [pc, #64]	@ (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d10c      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800

08004f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e042      	b.n	8005010 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fd fc56 	bl	8002850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	@ 0x24
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fdb7 	bl	8005b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695a      	ldr	r2, [r3, #20]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	@ 0x28
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b20      	cmp	r3, #32
 8005036:	d175      	bne.n	8005124 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <HAL_UART_Transmit+0x2c>
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e06e      	b.n	8005126 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2221      	movs	r2, #33	@ 0x21
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005056:	f7fd ffb9 	bl	8002fcc <HAL_GetTick>
 800505a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	88fa      	ldrh	r2, [r7, #6]
 8005066:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005070:	d108      	bne.n	8005084 <HAL_UART_Transmit+0x6c>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d104      	bne.n	8005084 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	e003      	b.n	800508c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005088:	2300      	movs	r3, #0
 800508a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800508c:	e02e      	b.n	80050ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2200      	movs	r2, #0
 8005096:	2180      	movs	r1, #128	@ 0x80
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fb1c 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e03a      	b.n	8005126 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10b      	bne.n	80050ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	3302      	adds	r3, #2
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	e007      	b.n	80050de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	781a      	ldrb	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3301      	adds	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1cb      	bne.n	800508e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2140      	movs	r1, #64	@ 0x40
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fae8 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e006      	b.n	8005126 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	4613      	mov	r3, r2
 800513a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b20      	cmp	r3, #32
 8005146:	d112      	bne.n	800516e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <HAL_UART_Receive_IT+0x26>
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e00b      	b.n	8005170 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	461a      	mov	r2, r3
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fb0f 	bl	8005788 <UART_Start_Receive_IT>
 800516a:	4603      	mov	r3, r0
 800516c:	e000      	b.n	8005170 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
  }
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b0ba      	sub	sp, #232	@ 0xe8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80051b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10f      	bne.n	80051de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d009      	beq.n	80051de <HAL_UART_IRQHandler+0x66>
 80051ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fbec 	bl	80059b4 <UART_Receive_IT>
      return;
 80051dc:	e25b      	b.n	8005696 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 80de 	beq.w	80053a4 <HAL_UART_IRQHandler+0x22c>
 80051e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80d1 	beq.w	80053a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <HAL_UART_IRQHandler+0xae>
 800520e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521e:	f043 0201 	orr.w	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_UART_IRQHandler+0xd2>
 8005232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005242:	f043 0202 	orr.w	r2, r3, #2
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_UART_IRQHandler+0xf6>
 8005256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	f043 0204 	orr.w	r2, r3, #4
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d011      	beq.n	800529e <HAL_UART_IRQHandler+0x126>
 800527a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d105      	bne.n	8005292 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005296:	f043 0208 	orr.w	r2, r3, #8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 81f2 	beq.w	800568c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <HAL_UART_IRQHandler+0x14e>
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fb77 	bl	80059b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d103      	bne.n	80052f2 <HAL_UART_IRQHandler+0x17a>
 80052ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d04f      	beq.n	8005392 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fa81 	bl	80057fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d041      	beq.n	800538a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3314      	adds	r3, #20
 800530c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800531c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3314      	adds	r3, #20
 800532e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005332:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800533e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800534a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1d9      	bne.n	8005306 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d013      	beq.n	8005382 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535e:	4a7e      	ldr	r2, [pc, #504]	@ (8005558 <HAL_UART_IRQHandler+0x3e0>)
 8005360:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fbfe 	bl	8003b68 <HAL_DMA_Abort_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800537c:	4610      	mov	r0, r2
 800537e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005380:	e00e      	b.n	80053a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f993 	bl	80056ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	e00a      	b.n	80053a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f98f 	bl	80056ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	e006      	b.n	80053a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f98b 	bl	80056ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800539e:	e175      	b.n	800568c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a0:	bf00      	nop
    return;
 80053a2:	e173      	b.n	800568c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	f040 814f 	bne.w	800564c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8148 	beq.w	800564c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8141 	beq.w	800564c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 80b6 	beq.w	800555c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8145 	beq.w	8005690 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800540a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800540e:	429a      	cmp	r2, r3
 8005410:	f080 813e 	bcs.w	8005690 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800541a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	2b20      	cmp	r3, #32
 8005424:	f000 8088 	beq.w	8005538 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800543e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005442:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005446:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	330c      	adds	r3, #12
 8005450:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005454:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005458:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005460:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800546c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1d9      	bne.n	8005428 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005484:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005486:	f023 0301 	bic.w	r3, r3, #1
 800548a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005498:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800549c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80054a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80054aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e1      	bne.n	8005474 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3314      	adds	r3, #20
 80054b6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80054c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3314      	adds	r3, #20
 80054d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e3      	bne.n	80054b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005508:	f023 0310 	bic.w	r3, r3, #16
 800550c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800551a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800551c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e3      	bne.n	80054f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe fadd 	bl	8003af2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005546:	b29b      	uxth	r3, r3
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	b29b      	uxth	r3, r3
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f8b6 	bl	80056c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005554:	e09c      	b.n	8005690 <HAL_UART_IRQHandler+0x518>
 8005556:	bf00      	nop
 8005558:	080058bf 	.word	0x080058bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005564:	b29b      	uxth	r3, r3
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 808e 	beq.w	8005694 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8089 	beq.w	8005694 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	330c      	adds	r3, #12
 8005588:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005598:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80055a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80055a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e3      	bne.n	8005582 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	623b      	str	r3, [r7, #32]
   return(result);
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055de:	633a      	str	r2, [r7, #48]	@ 0x30
 80055e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e3      	bne.n	80055ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0310 	bic.w	r3, r3, #16
 8005616:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005624:	61fa      	str	r2, [r7, #28]
 8005626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	69b9      	ldr	r1, [r7, #24]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	617b      	str	r3, [r7, #20]
   return(result);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e3      	bne.n	8005600 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800563e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f83b 	bl	80056c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800564a:	e023      	b.n	8005694 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <HAL_UART_IRQHandler+0x4f4>
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f93e 	bl	80058e6 <UART_Transmit_IT>
    return;
 800566a:	e014      	b.n	8005696 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800566c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00e      	beq.n	8005696 <HAL_UART_IRQHandler+0x51e>
 8005678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800567c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f97d 	bl	8005984 <UART_EndTransmit_IT>
    return;
 800568a:	e004      	b.n	8005696 <HAL_UART_IRQHandler+0x51e>
    return;
 800568c:	bf00      	nop
 800568e:	e002      	b.n	8005696 <HAL_UART_IRQHandler+0x51e>
      return;
 8005690:	bf00      	nop
 8005692:	e000      	b.n	8005696 <HAL_UART_IRQHandler+0x51e>
      return;
 8005694:	bf00      	nop
  }
}
 8005696:	37e8      	adds	r7, #232	@ 0xe8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr

080056ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr

080056d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b086      	sub	sp, #24
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	4613      	mov	r3, r2
 80056e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e6:	e03b      	b.n	8005760 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d037      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f0:	f7fd fc6c 	bl	8002fcc <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	6a3a      	ldr	r2, [r7, #32]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d302      	bcc.n	8005706 <UART_WaitOnFlagUntilTimeout+0x30>
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e03a      	b.n	8005780 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d023      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b80      	cmp	r3, #128	@ 0x80
 800571c:	d020      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0x8a>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b40      	cmp	r3, #64	@ 0x40
 8005722:	d01d      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b08      	cmp	r3, #8
 8005730:	d116      	bne.n	8005760 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f856 	bl	80057fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2208      	movs	r2, #8
 8005752:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e00f      	b.n	8005780 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4013      	ands	r3, r2
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	429a      	cmp	r2, r3
 800577c:	d0b4      	beq.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2222      	movs	r2, #34	@ 0x22
 80057b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695a      	ldr	r2, [r3, #20]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0220 	orr.w	r2, r2, #32
 80057ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b095      	sub	sp, #84	@ 0x54
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	330c      	adds	r3, #12
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005822:	643a      	str	r2, [r7, #64]	@ 0x40
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e5      	bne.n	8005802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3314      	adds	r3, #20
 800583c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	61fb      	str	r3, [r7, #28]
   return(result);
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f023 0301 	bic.w	r3, r3, #1
 800584c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3314      	adds	r3, #20
 8005854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800585c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e5      	bne.n	8005836 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	2b01      	cmp	r3, #1
 8005870:	d119      	bne.n	80058a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	60bb      	str	r3, [r7, #8]
   return(result);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f023 0310 	bic.w	r3, r3, #16
 8005888:	647b      	str	r3, [r7, #68]	@ 0x44
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005892:	61ba      	str	r2, [r7, #24]
 8005894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6979      	ldr	r1, [r7, #20]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	613b      	str	r3, [r7, #16]
   return(result);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058b4:	bf00      	nop
 80058b6:	3754      	adds	r7, #84	@ 0x54
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff fee8 	bl	80056ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b21      	cmp	r3, #33	@ 0x21
 80058f8:	d13e      	bne.n	8005978 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005902:	d114      	bne.n	800592e <UART_Transmit_IT+0x48>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d110      	bne.n	800592e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005920:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	1c9a      	adds	r2, r3, #2
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]
 800592c:	e008      	b.n	8005940 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	1c59      	adds	r1, r3, #1
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6211      	str	r1, [r2, #32]
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29b      	uxth	r3, r3
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4619      	mov	r1, r3
 800594e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10f      	bne.n	8005974 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005962:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005972:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	e000      	b.n	800597a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005978:	2302      	movs	r3, #2
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800599a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff fe79 	bl	800569c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	@ 0x30
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b22      	cmp	r3, #34	@ 0x22
 80059c6:	f040 80ae 	bne.w	8005b26 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d117      	bne.n	8005a04 <UART_Receive_IT+0x50>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d113      	bne.n	8005a04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	1c9a      	adds	r2, r3, #2
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a02:	e026      	b.n	8005a52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a16:	d007      	beq.n	8005a28 <UART_Receive_IT+0x74>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <UART_Receive_IT+0x82>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	e008      	b.n	8005a48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d15d      	bne.n	8005b22 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0220 	bic.w	r2, r2, #32
 8005a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d135      	bne.n	8005b18 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f023 0310 	bic.w	r3, r3, #16
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad2:	623a      	str	r2, [r7, #32]
 8005ad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	69f9      	ldr	r1, [r7, #28]
 8005ad8:	6a3a      	ldr	r2, [r7, #32]
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e5      	bne.n	8005ab2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d10a      	bne.n	8005b0a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff fdd5 	bl	80056c0 <HAL_UARTEx_RxEventCallback>
 8005b16:	e002      	b.n	8005b1e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7fd f8db 	bl	8002cd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e002      	b.n	8005b28 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e000      	b.n	8005b28 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b26:	2302      	movs	r3, #2
  }
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3730      	adds	r7, #48	@ 0x30
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005b6a:	f023 030c 	bic.w	r3, r3, #12
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a2c      	ldr	r2, [pc, #176]	@ (8005c44 <UART_SetConfig+0x114>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d103      	bne.n	8005ba0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fe fdd8 	bl	800474c <HAL_RCC_GetPCLK2Freq>
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	e002      	b.n	8005ba6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ba0:	f7fe fdc0 	bl	8004724 <HAL_RCC_GetPCLK1Freq>
 8005ba4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009a      	lsls	r2, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	4a22      	ldr	r2, [pc, #136]	@ (8005c48 <UART_SetConfig+0x118>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	0119      	lsls	r1, r3, #4
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009a      	lsls	r2, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c48 <UART_SetConfig+0x118>)
 8005bde:	fba3 0302 	umull	r0, r3, r3, r2
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	2064      	movs	r0, #100	@ 0x64
 8005be6:	fb00 f303 	mul.w	r3, r0, r3
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	3332      	adds	r3, #50	@ 0x32
 8005bf0:	4a15      	ldr	r2, [pc, #84]	@ (8005c48 <UART_SetConfig+0x118>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bfc:	4419      	add	r1, r3
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009a      	lsls	r2, r3, #2
 8005c08:	441a      	add	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c14:	4b0c      	ldr	r3, [pc, #48]	@ (8005c48 <UART_SetConfig+0x118>)
 8005c16:	fba3 0302 	umull	r0, r3, r3, r2
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	2064      	movs	r0, #100	@ 0x64
 8005c1e:	fb00 f303 	mul.w	r3, r0, r3
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	3332      	adds	r3, #50	@ 0x32
 8005c28:	4a07      	ldr	r2, [pc, #28]	@ (8005c48 <UART_SetConfig+0x118>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	f003 020f 	and.w	r2, r3, #15
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	440a      	add	r2, r1
 8005c3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40013800 	.word	0x40013800
 8005c48:	51eb851f 	.word	0x51eb851f

08005c4c <atoi>:
 8005c4c:	220a      	movs	r2, #10
 8005c4e:	2100      	movs	r1, #0
 8005c50:	f000 b87a 	b.w	8005d48 <strtol>

08005c54 <_strtol_l.isra.0>:
 8005c54:	2b24      	cmp	r3, #36	@ 0x24
 8005c56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5a:	4686      	mov	lr, r0
 8005c5c:	4690      	mov	r8, r2
 8005c5e:	d801      	bhi.n	8005c64 <_strtol_l.isra.0+0x10>
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d106      	bne.n	8005c72 <_strtol_l.isra.0+0x1e>
 8005c64:	f000 ffc0 	bl	8006be8 <__errno>
 8005c68:	2316      	movs	r3, #22
 8005c6a:	6003      	str	r3, [r0, #0]
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c72:	460d      	mov	r5, r1
 8005c74:	4833      	ldr	r0, [pc, #204]	@ (8005d44 <_strtol_l.isra.0+0xf0>)
 8005c76:	462a      	mov	r2, r5
 8005c78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c7c:	5d06      	ldrb	r6, [r0, r4]
 8005c7e:	f016 0608 	ands.w	r6, r6, #8
 8005c82:	d1f8      	bne.n	8005c76 <_strtol_l.isra.0+0x22>
 8005c84:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c86:	d110      	bne.n	8005caa <_strtol_l.isra.0+0x56>
 8005c88:	2601      	movs	r6, #1
 8005c8a:	782c      	ldrb	r4, [r5, #0]
 8005c8c:	1c95      	adds	r5, r2, #2
 8005c8e:	f033 0210 	bics.w	r2, r3, #16
 8005c92:	d115      	bne.n	8005cc0 <_strtol_l.isra.0+0x6c>
 8005c94:	2c30      	cmp	r4, #48	@ 0x30
 8005c96:	d10d      	bne.n	8005cb4 <_strtol_l.isra.0+0x60>
 8005c98:	782a      	ldrb	r2, [r5, #0]
 8005c9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c9e:	2a58      	cmp	r2, #88	@ 0x58
 8005ca0:	d108      	bne.n	8005cb4 <_strtol_l.isra.0+0x60>
 8005ca2:	786c      	ldrb	r4, [r5, #1]
 8005ca4:	3502      	adds	r5, #2
 8005ca6:	2310      	movs	r3, #16
 8005ca8:	e00a      	b.n	8005cc0 <_strtol_l.isra.0+0x6c>
 8005caa:	2c2b      	cmp	r4, #43	@ 0x2b
 8005cac:	bf04      	itt	eq
 8005cae:	782c      	ldrbeq	r4, [r5, #0]
 8005cb0:	1c95      	addeq	r5, r2, #2
 8005cb2:	e7ec      	b.n	8005c8e <_strtol_l.isra.0+0x3a>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f6      	bne.n	8005ca6 <_strtol_l.isra.0+0x52>
 8005cb8:	2c30      	cmp	r4, #48	@ 0x30
 8005cba:	bf14      	ite	ne
 8005cbc:	230a      	movne	r3, #10
 8005cbe:	2308      	moveq	r3, #8
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005cc6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005cca:	fbbc f9f3 	udiv	r9, ip, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005cd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005cd8:	2f09      	cmp	r7, #9
 8005cda:	d80f      	bhi.n	8005cfc <_strtol_l.isra.0+0xa8>
 8005cdc:	463c      	mov	r4, r7
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	dd1b      	ble.n	8005d1a <_strtol_l.isra.0+0xc6>
 8005ce2:	1c57      	adds	r7, r2, #1
 8005ce4:	d007      	beq.n	8005cf6 <_strtol_l.isra.0+0xa2>
 8005ce6:	4581      	cmp	r9, r0
 8005ce8:	d314      	bcc.n	8005d14 <_strtol_l.isra.0+0xc0>
 8005cea:	d101      	bne.n	8005cf0 <_strtol_l.isra.0+0x9c>
 8005cec:	45a2      	cmp	sl, r4
 8005cee:	db11      	blt.n	8005d14 <_strtol_l.isra.0+0xc0>
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	fb00 4003 	mla	r0, r0, r3, r4
 8005cf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cfa:	e7eb      	b.n	8005cd4 <_strtol_l.isra.0+0x80>
 8005cfc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005d00:	2f19      	cmp	r7, #25
 8005d02:	d801      	bhi.n	8005d08 <_strtol_l.isra.0+0xb4>
 8005d04:	3c37      	subs	r4, #55	@ 0x37
 8005d06:	e7ea      	b.n	8005cde <_strtol_l.isra.0+0x8a>
 8005d08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005d0c:	2f19      	cmp	r7, #25
 8005d0e:	d804      	bhi.n	8005d1a <_strtol_l.isra.0+0xc6>
 8005d10:	3c57      	subs	r4, #87	@ 0x57
 8005d12:	e7e4      	b.n	8005cde <_strtol_l.isra.0+0x8a>
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295
 8005d18:	e7ed      	b.n	8005cf6 <_strtol_l.isra.0+0xa2>
 8005d1a:	1c53      	adds	r3, r2, #1
 8005d1c:	d108      	bne.n	8005d30 <_strtol_l.isra.0+0xdc>
 8005d1e:	2322      	movs	r3, #34	@ 0x22
 8005d20:	4660      	mov	r0, ip
 8005d22:	f8ce 3000 	str.w	r3, [lr]
 8005d26:	f1b8 0f00 	cmp.w	r8, #0
 8005d2a:	d0a0      	beq.n	8005c6e <_strtol_l.isra.0+0x1a>
 8005d2c:	1e69      	subs	r1, r5, #1
 8005d2e:	e006      	b.n	8005d3e <_strtol_l.isra.0+0xea>
 8005d30:	b106      	cbz	r6, 8005d34 <_strtol_l.isra.0+0xe0>
 8005d32:	4240      	negs	r0, r0
 8005d34:	f1b8 0f00 	cmp.w	r8, #0
 8005d38:	d099      	beq.n	8005c6e <_strtol_l.isra.0+0x1a>
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	d1f6      	bne.n	8005d2c <_strtol_l.isra.0+0xd8>
 8005d3e:	f8c8 1000 	str.w	r1, [r8]
 8005d42:	e794      	b.n	8005c6e <_strtol_l.isra.0+0x1a>
 8005d44:	08009567 	.word	0x08009567

08005d48 <strtol>:
 8005d48:	4613      	mov	r3, r2
 8005d4a:	460a      	mov	r2, r1
 8005d4c:	4601      	mov	r1, r0
 8005d4e:	4802      	ldr	r0, [pc, #8]	@ (8005d58 <strtol+0x10>)
 8005d50:	6800      	ldr	r0, [r0, #0]
 8005d52:	f7ff bf7f 	b.w	8005c54 <_strtol_l.isra.0>
 8005d56:	bf00      	nop
 8005d58:	2000001c 	.word	0x2000001c

08005d5c <__cvt>:
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d62:	461d      	mov	r5, r3
 8005d64:	bfbb      	ittet	lt
 8005d66:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005d6a:	461d      	movlt	r5, r3
 8005d6c:	2300      	movge	r3, #0
 8005d6e:	232d      	movlt	r3, #45	@ 0x2d
 8005d70:	b088      	sub	sp, #32
 8005d72:	4614      	mov	r4, r2
 8005d74:	bfb8      	it	lt
 8005d76:	4614      	movlt	r4, r2
 8005d78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d7a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005d7c:	7013      	strb	r3, [r2, #0]
 8005d7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d80:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005d84:	f023 0820 	bic.w	r8, r3, #32
 8005d88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d8c:	d005      	beq.n	8005d9a <__cvt+0x3e>
 8005d8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d92:	d100      	bne.n	8005d96 <__cvt+0x3a>
 8005d94:	3601      	adds	r6, #1
 8005d96:	2302      	movs	r3, #2
 8005d98:	e000      	b.n	8005d9c <__cvt+0x40>
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	aa07      	add	r2, sp, #28
 8005d9e:	9204      	str	r2, [sp, #16]
 8005da0:	aa06      	add	r2, sp, #24
 8005da2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005da6:	e9cd 3600 	strd	r3, r6, [sp]
 8005daa:	4622      	mov	r2, r4
 8005dac:	462b      	mov	r3, r5
 8005dae:	f000 ffdf 	bl	8006d70 <_dtoa_r>
 8005db2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005db6:	4607      	mov	r7, r0
 8005db8:	d119      	bne.n	8005dee <__cvt+0x92>
 8005dba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005dbc:	07db      	lsls	r3, r3, #31
 8005dbe:	d50e      	bpl.n	8005dde <__cvt+0x82>
 8005dc0:	eb00 0906 	add.w	r9, r0, r6
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fdec 	bl	80009a8 <__aeabi_dcmpeq>
 8005dd0:	b108      	cbz	r0, 8005dd6 <__cvt+0x7a>
 8005dd2:	f8cd 901c 	str.w	r9, [sp, #28]
 8005dd6:	2230      	movs	r2, #48	@ 0x30
 8005dd8:	9b07      	ldr	r3, [sp, #28]
 8005dda:	454b      	cmp	r3, r9
 8005ddc:	d31e      	bcc.n	8005e1c <__cvt+0xc0>
 8005dde:	4638      	mov	r0, r7
 8005de0:	9b07      	ldr	r3, [sp, #28]
 8005de2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005de4:	1bdb      	subs	r3, r3, r7
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	b008      	add	sp, #32
 8005dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005df2:	eb00 0906 	add.w	r9, r0, r6
 8005df6:	d1e5      	bne.n	8005dc4 <__cvt+0x68>
 8005df8:	7803      	ldrb	r3, [r0, #0]
 8005dfa:	2b30      	cmp	r3, #48	@ 0x30
 8005dfc:	d10a      	bne.n	8005e14 <__cvt+0xb8>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2300      	movs	r3, #0
 8005e02:	4620      	mov	r0, r4
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7fa fdcf 	bl	80009a8 <__aeabi_dcmpeq>
 8005e0a:	b918      	cbnz	r0, 8005e14 <__cvt+0xb8>
 8005e0c:	f1c6 0601 	rsb	r6, r6, #1
 8005e10:	f8ca 6000 	str.w	r6, [sl]
 8005e14:	f8da 3000 	ldr.w	r3, [sl]
 8005e18:	4499      	add	r9, r3
 8005e1a:	e7d3      	b.n	8005dc4 <__cvt+0x68>
 8005e1c:	1c59      	adds	r1, r3, #1
 8005e1e:	9107      	str	r1, [sp, #28]
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	e7d9      	b.n	8005dd8 <__cvt+0x7c>

08005e24 <__exponent>:
 8005e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e26:	2900      	cmp	r1, #0
 8005e28:	bfb6      	itet	lt
 8005e2a:	232d      	movlt	r3, #45	@ 0x2d
 8005e2c:	232b      	movge	r3, #43	@ 0x2b
 8005e2e:	4249      	neglt	r1, r1
 8005e30:	2909      	cmp	r1, #9
 8005e32:	7002      	strb	r2, [r0, #0]
 8005e34:	7043      	strb	r3, [r0, #1]
 8005e36:	dd29      	ble.n	8005e8c <__exponent+0x68>
 8005e38:	f10d 0307 	add.w	r3, sp, #7
 8005e3c:	461d      	mov	r5, r3
 8005e3e:	270a      	movs	r7, #10
 8005e40:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e44:	461a      	mov	r2, r3
 8005e46:	fb07 1416 	mls	r4, r7, r6, r1
 8005e4a:	3430      	adds	r4, #48	@ 0x30
 8005e4c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e50:	460c      	mov	r4, r1
 8005e52:	2c63      	cmp	r4, #99	@ 0x63
 8005e54:	4631      	mov	r1, r6
 8005e56:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e5a:	dcf1      	bgt.n	8005e40 <__exponent+0x1c>
 8005e5c:	3130      	adds	r1, #48	@ 0x30
 8005e5e:	1e94      	subs	r4, r2, #2
 8005e60:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e64:	4623      	mov	r3, r4
 8005e66:	1c41      	adds	r1, r0, #1
 8005e68:	42ab      	cmp	r3, r5
 8005e6a:	d30a      	bcc.n	8005e82 <__exponent+0x5e>
 8005e6c:	f10d 0309 	add.w	r3, sp, #9
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	42ac      	cmp	r4, r5
 8005e74:	bf88      	it	hi
 8005e76:	2300      	movhi	r3, #0
 8005e78:	3302      	adds	r3, #2
 8005e7a:	4403      	add	r3, r0
 8005e7c:	1a18      	subs	r0, r3, r0
 8005e7e:	b003      	add	sp, #12
 8005e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e82:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e86:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e8a:	e7ed      	b.n	8005e68 <__exponent+0x44>
 8005e8c:	2330      	movs	r3, #48	@ 0x30
 8005e8e:	3130      	adds	r1, #48	@ 0x30
 8005e90:	7083      	strb	r3, [r0, #2]
 8005e92:	70c1      	strb	r1, [r0, #3]
 8005e94:	1d03      	adds	r3, r0, #4
 8005e96:	e7f1      	b.n	8005e7c <__exponent+0x58>

08005e98 <_printf_float>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	b091      	sub	sp, #68	@ 0x44
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005ea4:	4616      	mov	r6, r2
 8005ea6:	461f      	mov	r7, r3
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	f000 fe53 	bl	8006b54 <_localeconv_r>
 8005eae:	6803      	ldr	r3, [r0, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	9308      	str	r3, [sp, #32]
 8005eb4:	f7fa f94c 	bl	8000150 <strlen>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec0:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ec2:	3307      	adds	r3, #7
 8005ec4:	f023 0307 	bic.w	r3, r3, #7
 8005ec8:	f103 0208 	add.w	r2, r3, #8
 8005ecc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ed0:	f8d4 b000 	ldr.w	fp, [r4]
 8005ed4:	f8c8 2000 	str.w	r2, [r8]
 8005ed8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005edc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ee2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005eee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ef2:	4b9c      	ldr	r3, [pc, #624]	@ (8006164 <_printf_float+0x2cc>)
 8005ef4:	f7fa fd8a 	bl	8000a0c <__aeabi_dcmpun>
 8005ef8:	bb70      	cbnz	r0, 8005f58 <_printf_float+0xc0>
 8005efa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005efe:	f04f 32ff 	mov.w	r2, #4294967295
 8005f02:	4b98      	ldr	r3, [pc, #608]	@ (8006164 <_printf_float+0x2cc>)
 8005f04:	f7fa fd64 	bl	80009d0 <__aeabi_dcmple>
 8005f08:	bb30      	cbnz	r0, 8005f58 <_printf_float+0xc0>
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4640      	mov	r0, r8
 8005f10:	4649      	mov	r1, r9
 8005f12:	f7fa fd53 	bl	80009bc <__aeabi_dcmplt>
 8005f16:	b110      	cbz	r0, 8005f1e <_printf_float+0x86>
 8005f18:	232d      	movs	r3, #45	@ 0x2d
 8005f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f1e:	4a92      	ldr	r2, [pc, #584]	@ (8006168 <_printf_float+0x2d0>)
 8005f20:	4b92      	ldr	r3, [pc, #584]	@ (800616c <_printf_float+0x2d4>)
 8005f22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f26:	bf8c      	ite	hi
 8005f28:	4690      	movhi	r8, r2
 8005f2a:	4698      	movls	r8, r3
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	f04f 0900 	mov.w	r9, #0
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	f02b 0304 	bic.w	r3, fp, #4
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	4633      	mov	r3, r6
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4628      	mov	r0, r5
 8005f40:	9700      	str	r7, [sp, #0]
 8005f42:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005f44:	f000 f9d4 	bl	80062f0 <_printf_common>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	f040 8090 	bne.w	800606e <_printf_float+0x1d6>
 8005f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f52:	b011      	add	sp, #68	@ 0x44
 8005f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f58:	4642      	mov	r2, r8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	4649      	mov	r1, r9
 8005f60:	f7fa fd54 	bl	8000a0c <__aeabi_dcmpun>
 8005f64:	b148      	cbz	r0, 8005f7a <_printf_float+0xe2>
 8005f66:	464b      	mov	r3, r9
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bfb8      	it	lt
 8005f6c:	232d      	movlt	r3, #45	@ 0x2d
 8005f6e:	4a80      	ldr	r2, [pc, #512]	@ (8006170 <_printf_float+0x2d8>)
 8005f70:	bfb8      	it	lt
 8005f72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f76:	4b7f      	ldr	r3, [pc, #508]	@ (8006174 <_printf_float+0x2dc>)
 8005f78:	e7d3      	b.n	8005f22 <_printf_float+0x8a>
 8005f7a:	6863      	ldr	r3, [r4, #4]
 8005f7c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	d13f      	bne.n	8006004 <_printf_float+0x16c>
 8005f84:	2306      	movs	r3, #6
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005f8e:	6023      	str	r3, [r4, #0]
 8005f90:	9206      	str	r2, [sp, #24]
 8005f92:	aa0e      	add	r2, sp, #56	@ 0x38
 8005f94:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005f98:	aa0d      	add	r2, sp, #52	@ 0x34
 8005f9a:	9203      	str	r2, [sp, #12]
 8005f9c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005fa0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005fa4:	6863      	ldr	r3, [r4, #4]
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	4628      	mov	r0, r5
 8005fac:	464b      	mov	r3, r9
 8005fae:	910a      	str	r1, [sp, #40]	@ 0x28
 8005fb0:	f7ff fed4 	bl	8005d5c <__cvt>
 8005fb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	2947      	cmp	r1, #71	@ 0x47
 8005fba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005fbc:	d128      	bne.n	8006010 <_printf_float+0x178>
 8005fbe:	1cc8      	adds	r0, r1, #3
 8005fc0:	db02      	blt.n	8005fc8 <_printf_float+0x130>
 8005fc2:	6863      	ldr	r3, [r4, #4]
 8005fc4:	4299      	cmp	r1, r3
 8005fc6:	dd40      	ble.n	800604a <_printf_float+0x1b2>
 8005fc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fcc:	fa5f fa8a 	uxtb.w	sl, sl
 8005fd0:	4652      	mov	r2, sl
 8005fd2:	3901      	subs	r1, #1
 8005fd4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fd8:	910d      	str	r1, [sp, #52]	@ 0x34
 8005fda:	f7ff ff23 	bl	8005e24 <__exponent>
 8005fde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fe0:	4681      	mov	r9, r0
 8005fe2:	1813      	adds	r3, r2, r0
 8005fe4:	2a01      	cmp	r2, #1
 8005fe6:	6123      	str	r3, [r4, #16]
 8005fe8:	dc02      	bgt.n	8005ff0 <_printf_float+0x158>
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	07d2      	lsls	r2, r2, #31
 8005fee:	d501      	bpl.n	8005ff4 <_printf_float+0x15c>
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	6123      	str	r3, [r4, #16]
 8005ff4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d09e      	beq.n	8005f3a <_printf_float+0xa2>
 8005ffc:	232d      	movs	r3, #45	@ 0x2d
 8005ffe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006002:	e79a      	b.n	8005f3a <_printf_float+0xa2>
 8006004:	2947      	cmp	r1, #71	@ 0x47
 8006006:	d1bf      	bne.n	8005f88 <_printf_float+0xf0>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1bd      	bne.n	8005f88 <_printf_float+0xf0>
 800600c:	2301      	movs	r3, #1
 800600e:	e7ba      	b.n	8005f86 <_printf_float+0xee>
 8006010:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006014:	d9dc      	bls.n	8005fd0 <_printf_float+0x138>
 8006016:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800601a:	d118      	bne.n	800604e <_printf_float+0x1b6>
 800601c:	2900      	cmp	r1, #0
 800601e:	6863      	ldr	r3, [r4, #4]
 8006020:	dd0b      	ble.n	800603a <_printf_float+0x1a2>
 8006022:	6121      	str	r1, [r4, #16]
 8006024:	b913      	cbnz	r3, 800602c <_printf_float+0x194>
 8006026:	6822      	ldr	r2, [r4, #0]
 8006028:	07d0      	lsls	r0, r2, #31
 800602a:	d502      	bpl.n	8006032 <_printf_float+0x19a>
 800602c:	3301      	adds	r3, #1
 800602e:	440b      	add	r3, r1
 8006030:	6123      	str	r3, [r4, #16]
 8006032:	f04f 0900 	mov.w	r9, #0
 8006036:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006038:	e7dc      	b.n	8005ff4 <_printf_float+0x15c>
 800603a:	b913      	cbnz	r3, 8006042 <_printf_float+0x1aa>
 800603c:	6822      	ldr	r2, [r4, #0]
 800603e:	07d2      	lsls	r2, r2, #31
 8006040:	d501      	bpl.n	8006046 <_printf_float+0x1ae>
 8006042:	3302      	adds	r3, #2
 8006044:	e7f4      	b.n	8006030 <_printf_float+0x198>
 8006046:	2301      	movs	r3, #1
 8006048:	e7f2      	b.n	8006030 <_printf_float+0x198>
 800604a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800604e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006050:	4299      	cmp	r1, r3
 8006052:	db05      	blt.n	8006060 <_printf_float+0x1c8>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	6121      	str	r1, [r4, #16]
 8006058:	07d8      	lsls	r0, r3, #31
 800605a:	d5ea      	bpl.n	8006032 <_printf_float+0x19a>
 800605c:	1c4b      	adds	r3, r1, #1
 800605e:	e7e7      	b.n	8006030 <_printf_float+0x198>
 8006060:	2900      	cmp	r1, #0
 8006062:	bfcc      	ite	gt
 8006064:	2201      	movgt	r2, #1
 8006066:	f1c1 0202 	rsble	r2, r1, #2
 800606a:	4413      	add	r3, r2
 800606c:	e7e0      	b.n	8006030 <_printf_float+0x198>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	055a      	lsls	r2, r3, #21
 8006072:	d407      	bmi.n	8006084 <_printf_float+0x1ec>
 8006074:	6923      	ldr	r3, [r4, #16]
 8006076:	4642      	mov	r2, r8
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	d12b      	bne.n	80060da <_printf_float+0x242>
 8006082:	e764      	b.n	8005f4e <_printf_float+0xb6>
 8006084:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006088:	f240 80dc 	bls.w	8006244 <_printf_float+0x3ac>
 800608c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006090:	2200      	movs	r2, #0
 8006092:	2300      	movs	r3, #0
 8006094:	f7fa fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8006098:	2800      	cmp	r0, #0
 800609a:	d033      	beq.n	8006104 <_printf_float+0x26c>
 800609c:	2301      	movs	r3, #1
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	4a35      	ldr	r2, [pc, #212]	@ (8006178 <_printf_float+0x2e0>)
 80060a4:	47b8      	blx	r7
 80060a6:	3001      	adds	r0, #1
 80060a8:	f43f af51 	beq.w	8005f4e <_printf_float+0xb6>
 80060ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80060b0:	4543      	cmp	r3, r8
 80060b2:	db02      	blt.n	80060ba <_printf_float+0x222>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	07d8      	lsls	r0, r3, #31
 80060b8:	d50f      	bpl.n	80060da <_printf_float+0x242>
 80060ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060be:	4631      	mov	r1, r6
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b8      	blx	r7
 80060c4:	3001      	adds	r0, #1
 80060c6:	f43f af42 	beq.w	8005f4e <_printf_float+0xb6>
 80060ca:	f04f 0900 	mov.w	r9, #0
 80060ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80060d2:	f104 0a1a 	add.w	sl, r4, #26
 80060d6:	45c8      	cmp	r8, r9
 80060d8:	dc09      	bgt.n	80060ee <_printf_float+0x256>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	079b      	lsls	r3, r3, #30
 80060de:	f100 8102 	bmi.w	80062e6 <_printf_float+0x44e>
 80060e2:	68e0      	ldr	r0, [r4, #12]
 80060e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060e6:	4298      	cmp	r0, r3
 80060e8:	bfb8      	it	lt
 80060ea:	4618      	movlt	r0, r3
 80060ec:	e731      	b.n	8005f52 <_printf_float+0xba>
 80060ee:	2301      	movs	r3, #1
 80060f0:	4652      	mov	r2, sl
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	47b8      	blx	r7
 80060f8:	3001      	adds	r0, #1
 80060fa:	f43f af28 	beq.w	8005f4e <_printf_float+0xb6>
 80060fe:	f109 0901 	add.w	r9, r9, #1
 8006102:	e7e8      	b.n	80060d6 <_printf_float+0x23e>
 8006104:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006106:	2b00      	cmp	r3, #0
 8006108:	dc38      	bgt.n	800617c <_printf_float+0x2e4>
 800610a:	2301      	movs	r3, #1
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	4a19      	ldr	r2, [pc, #100]	@ (8006178 <_printf_float+0x2e0>)
 8006112:	47b8      	blx	r7
 8006114:	3001      	adds	r0, #1
 8006116:	f43f af1a 	beq.w	8005f4e <_printf_float+0xb6>
 800611a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800611e:	ea59 0303 	orrs.w	r3, r9, r3
 8006122:	d102      	bne.n	800612a <_printf_float+0x292>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	07d9      	lsls	r1, r3, #31
 8006128:	d5d7      	bpl.n	80060da <_printf_float+0x242>
 800612a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800612e:	4631      	mov	r1, r6
 8006130:	4628      	mov	r0, r5
 8006132:	47b8      	blx	r7
 8006134:	3001      	adds	r0, #1
 8006136:	f43f af0a 	beq.w	8005f4e <_printf_float+0xb6>
 800613a:	f04f 0a00 	mov.w	sl, #0
 800613e:	f104 0b1a 	add.w	fp, r4, #26
 8006142:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006144:	425b      	negs	r3, r3
 8006146:	4553      	cmp	r3, sl
 8006148:	dc01      	bgt.n	800614e <_printf_float+0x2b6>
 800614a:	464b      	mov	r3, r9
 800614c:	e793      	b.n	8006076 <_printf_float+0x1de>
 800614e:	2301      	movs	r3, #1
 8006150:	465a      	mov	r2, fp
 8006152:	4631      	mov	r1, r6
 8006154:	4628      	mov	r0, r5
 8006156:	47b8      	blx	r7
 8006158:	3001      	adds	r0, #1
 800615a:	f43f aef8 	beq.w	8005f4e <_printf_float+0xb6>
 800615e:	f10a 0a01 	add.w	sl, sl, #1
 8006162:	e7ee      	b.n	8006142 <_printf_float+0x2aa>
 8006164:	7fefffff 	.word	0x7fefffff
 8006168:	0800966b 	.word	0x0800966b
 800616c:	08009667 	.word	0x08009667
 8006170:	08009673 	.word	0x08009673
 8006174:	0800966f 	.word	0x0800966f
 8006178:	08009677 	.word	0x08009677
 800617c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800617e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006182:	4553      	cmp	r3, sl
 8006184:	bfa8      	it	ge
 8006186:	4653      	movge	r3, sl
 8006188:	2b00      	cmp	r3, #0
 800618a:	4699      	mov	r9, r3
 800618c:	dc36      	bgt.n	80061fc <_printf_float+0x364>
 800618e:	f04f 0b00 	mov.w	fp, #0
 8006192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006196:	f104 021a 	add.w	r2, r4, #26
 800619a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800619c:	930a      	str	r3, [sp, #40]	@ 0x28
 800619e:	eba3 0309 	sub.w	r3, r3, r9
 80061a2:	455b      	cmp	r3, fp
 80061a4:	dc31      	bgt.n	800620a <_printf_float+0x372>
 80061a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061a8:	459a      	cmp	sl, r3
 80061aa:	dc3a      	bgt.n	8006222 <_printf_float+0x38a>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	07da      	lsls	r2, r3, #31
 80061b0:	d437      	bmi.n	8006222 <_printf_float+0x38a>
 80061b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061b4:	ebaa 0903 	sub.w	r9, sl, r3
 80061b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ba:	ebaa 0303 	sub.w	r3, sl, r3
 80061be:	4599      	cmp	r9, r3
 80061c0:	bfa8      	it	ge
 80061c2:	4699      	movge	r9, r3
 80061c4:	f1b9 0f00 	cmp.w	r9, #0
 80061c8:	dc33      	bgt.n	8006232 <_printf_float+0x39a>
 80061ca:	f04f 0800 	mov.w	r8, #0
 80061ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061d2:	f104 0b1a 	add.w	fp, r4, #26
 80061d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061d8:	ebaa 0303 	sub.w	r3, sl, r3
 80061dc:	eba3 0309 	sub.w	r3, r3, r9
 80061e0:	4543      	cmp	r3, r8
 80061e2:	f77f af7a 	ble.w	80060da <_printf_float+0x242>
 80061e6:	2301      	movs	r3, #1
 80061e8:	465a      	mov	r2, fp
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	f43f aeac 	beq.w	8005f4e <_printf_float+0xb6>
 80061f6:	f108 0801 	add.w	r8, r8, #1
 80061fa:	e7ec      	b.n	80061d6 <_printf_float+0x33e>
 80061fc:	4642      	mov	r2, r8
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	d1c2      	bne.n	800618e <_printf_float+0x2f6>
 8006208:	e6a1      	b.n	8005f4e <_printf_float+0xb6>
 800620a:	2301      	movs	r3, #1
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	920a      	str	r2, [sp, #40]	@ 0x28
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f ae9a 	beq.w	8005f4e <_printf_float+0xb6>
 800621a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800621c:	f10b 0b01 	add.w	fp, fp, #1
 8006220:	e7bb      	b.n	800619a <_printf_float+0x302>
 8006222:	4631      	mov	r1, r6
 8006224:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006228:	4628      	mov	r0, r5
 800622a:	47b8      	blx	r7
 800622c:	3001      	adds	r0, #1
 800622e:	d1c0      	bne.n	80061b2 <_printf_float+0x31a>
 8006230:	e68d      	b.n	8005f4e <_printf_float+0xb6>
 8006232:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006234:	464b      	mov	r3, r9
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	4442      	add	r2, r8
 800623c:	47b8      	blx	r7
 800623e:	3001      	adds	r0, #1
 8006240:	d1c3      	bne.n	80061ca <_printf_float+0x332>
 8006242:	e684      	b.n	8005f4e <_printf_float+0xb6>
 8006244:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006248:	f1ba 0f01 	cmp.w	sl, #1
 800624c:	dc01      	bgt.n	8006252 <_printf_float+0x3ba>
 800624e:	07db      	lsls	r3, r3, #31
 8006250:	d536      	bpl.n	80062c0 <_printf_float+0x428>
 8006252:	2301      	movs	r3, #1
 8006254:	4642      	mov	r2, r8
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	f43f ae76 	beq.w	8005f4e <_printf_float+0xb6>
 8006262:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f ae6e 	beq.w	8005f4e <_printf_float+0xb6>
 8006272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006276:	2200      	movs	r2, #0
 8006278:	2300      	movs	r3, #0
 800627a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800627e:	f7fa fb93 	bl	80009a8 <__aeabi_dcmpeq>
 8006282:	b9c0      	cbnz	r0, 80062b6 <_printf_float+0x41e>
 8006284:	4653      	mov	r3, sl
 8006286:	f108 0201 	add.w	r2, r8, #1
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	d10c      	bne.n	80062ae <_printf_float+0x416>
 8006294:	e65b      	b.n	8005f4e <_printf_float+0xb6>
 8006296:	2301      	movs	r3, #1
 8006298:	465a      	mov	r2, fp
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f ae54 	beq.w	8005f4e <_printf_float+0xb6>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	45d0      	cmp	r8, sl
 80062ac:	dbf3      	blt.n	8006296 <_printf_float+0x3fe>
 80062ae:	464b      	mov	r3, r9
 80062b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80062b4:	e6e0      	b.n	8006078 <_printf_float+0x1e0>
 80062b6:	f04f 0800 	mov.w	r8, #0
 80062ba:	f104 0b1a 	add.w	fp, r4, #26
 80062be:	e7f4      	b.n	80062aa <_printf_float+0x412>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4642      	mov	r2, r8
 80062c4:	e7e1      	b.n	800628a <_printf_float+0x3f2>
 80062c6:	2301      	movs	r3, #1
 80062c8:	464a      	mov	r2, r9
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f ae3c 	beq.w	8005f4e <_printf_float+0xb6>
 80062d6:	f108 0801 	add.w	r8, r8, #1
 80062da:	68e3      	ldr	r3, [r4, #12]
 80062dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80062de:	1a5b      	subs	r3, r3, r1
 80062e0:	4543      	cmp	r3, r8
 80062e2:	dcf0      	bgt.n	80062c6 <_printf_float+0x42e>
 80062e4:	e6fd      	b.n	80060e2 <_printf_float+0x24a>
 80062e6:	f04f 0800 	mov.w	r8, #0
 80062ea:	f104 0919 	add.w	r9, r4, #25
 80062ee:	e7f4      	b.n	80062da <_printf_float+0x442>

080062f0 <_printf_common>:
 80062f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f4:	4616      	mov	r6, r2
 80062f6:	4698      	mov	r8, r3
 80062f8:	688a      	ldr	r2, [r1, #8]
 80062fa:	690b      	ldr	r3, [r1, #16]
 80062fc:	4607      	mov	r7, r0
 80062fe:	4293      	cmp	r3, r2
 8006300:	bfb8      	it	lt
 8006302:	4613      	movlt	r3, r2
 8006304:	6033      	str	r3, [r6, #0]
 8006306:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800630a:	460c      	mov	r4, r1
 800630c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006310:	b10a      	cbz	r2, 8006316 <_printf_common+0x26>
 8006312:	3301      	adds	r3, #1
 8006314:	6033      	str	r3, [r6, #0]
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	0699      	lsls	r1, r3, #26
 800631a:	bf42      	ittt	mi
 800631c:	6833      	ldrmi	r3, [r6, #0]
 800631e:	3302      	addmi	r3, #2
 8006320:	6033      	strmi	r3, [r6, #0]
 8006322:	6825      	ldr	r5, [r4, #0]
 8006324:	f015 0506 	ands.w	r5, r5, #6
 8006328:	d106      	bne.n	8006338 <_printf_common+0x48>
 800632a:	f104 0a19 	add.w	sl, r4, #25
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	6832      	ldr	r2, [r6, #0]
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	42ab      	cmp	r3, r5
 8006336:	dc2b      	bgt.n	8006390 <_printf_common+0xa0>
 8006338:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	3b00      	subs	r3, #0
 8006340:	bf18      	it	ne
 8006342:	2301      	movne	r3, #1
 8006344:	0692      	lsls	r2, r2, #26
 8006346:	d430      	bmi.n	80063aa <_printf_common+0xba>
 8006348:	4641      	mov	r1, r8
 800634a:	4638      	mov	r0, r7
 800634c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006350:	47c8      	blx	r9
 8006352:	3001      	adds	r0, #1
 8006354:	d023      	beq.n	800639e <_printf_common+0xae>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	6922      	ldr	r2, [r4, #16]
 800635a:	f003 0306 	and.w	r3, r3, #6
 800635e:	2b04      	cmp	r3, #4
 8006360:	bf14      	ite	ne
 8006362:	2500      	movne	r5, #0
 8006364:	6833      	ldreq	r3, [r6, #0]
 8006366:	f04f 0600 	mov.w	r6, #0
 800636a:	bf08      	it	eq
 800636c:	68e5      	ldreq	r5, [r4, #12]
 800636e:	f104 041a 	add.w	r4, r4, #26
 8006372:	bf08      	it	eq
 8006374:	1aed      	subeq	r5, r5, r3
 8006376:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800637a:	bf08      	it	eq
 800637c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006380:	4293      	cmp	r3, r2
 8006382:	bfc4      	itt	gt
 8006384:	1a9b      	subgt	r3, r3, r2
 8006386:	18ed      	addgt	r5, r5, r3
 8006388:	42b5      	cmp	r5, r6
 800638a:	d11a      	bne.n	80063c2 <_printf_common+0xd2>
 800638c:	2000      	movs	r0, #0
 800638e:	e008      	b.n	80063a2 <_printf_common+0xb2>
 8006390:	2301      	movs	r3, #1
 8006392:	4652      	mov	r2, sl
 8006394:	4641      	mov	r1, r8
 8006396:	4638      	mov	r0, r7
 8006398:	47c8      	blx	r9
 800639a:	3001      	adds	r0, #1
 800639c:	d103      	bne.n	80063a6 <_printf_common+0xb6>
 800639e:	f04f 30ff 	mov.w	r0, #4294967295
 80063a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a6:	3501      	adds	r5, #1
 80063a8:	e7c1      	b.n	800632e <_printf_common+0x3e>
 80063aa:	2030      	movs	r0, #48	@ 0x30
 80063ac:	18e1      	adds	r1, r4, r3
 80063ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063b8:	4422      	add	r2, r4
 80063ba:	3302      	adds	r3, #2
 80063bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063c0:	e7c2      	b.n	8006348 <_printf_common+0x58>
 80063c2:	2301      	movs	r3, #1
 80063c4:	4622      	mov	r2, r4
 80063c6:	4641      	mov	r1, r8
 80063c8:	4638      	mov	r0, r7
 80063ca:	47c8      	blx	r9
 80063cc:	3001      	adds	r0, #1
 80063ce:	d0e6      	beq.n	800639e <_printf_common+0xae>
 80063d0:	3601      	adds	r6, #1
 80063d2:	e7d9      	b.n	8006388 <_printf_common+0x98>

080063d4 <_printf_i>:
 80063d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d8:	7e0f      	ldrb	r7, [r1, #24]
 80063da:	4691      	mov	r9, r2
 80063dc:	2f78      	cmp	r7, #120	@ 0x78
 80063de:	4680      	mov	r8, r0
 80063e0:	460c      	mov	r4, r1
 80063e2:	469a      	mov	sl, r3
 80063e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063ea:	d807      	bhi.n	80063fc <_printf_i+0x28>
 80063ec:	2f62      	cmp	r7, #98	@ 0x62
 80063ee:	d80a      	bhi.n	8006406 <_printf_i+0x32>
 80063f0:	2f00      	cmp	r7, #0
 80063f2:	f000 80d1 	beq.w	8006598 <_printf_i+0x1c4>
 80063f6:	2f58      	cmp	r7, #88	@ 0x58
 80063f8:	f000 80b8 	beq.w	800656c <_printf_i+0x198>
 80063fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006400:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006404:	e03a      	b.n	800647c <_printf_i+0xa8>
 8006406:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800640a:	2b15      	cmp	r3, #21
 800640c:	d8f6      	bhi.n	80063fc <_printf_i+0x28>
 800640e:	a101      	add	r1, pc, #4	@ (adr r1, 8006414 <_printf_i+0x40>)
 8006410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006414:	0800646d 	.word	0x0800646d
 8006418:	08006481 	.word	0x08006481
 800641c:	080063fd 	.word	0x080063fd
 8006420:	080063fd 	.word	0x080063fd
 8006424:	080063fd 	.word	0x080063fd
 8006428:	080063fd 	.word	0x080063fd
 800642c:	08006481 	.word	0x08006481
 8006430:	080063fd 	.word	0x080063fd
 8006434:	080063fd 	.word	0x080063fd
 8006438:	080063fd 	.word	0x080063fd
 800643c:	080063fd 	.word	0x080063fd
 8006440:	0800657f 	.word	0x0800657f
 8006444:	080064ab 	.word	0x080064ab
 8006448:	08006539 	.word	0x08006539
 800644c:	080063fd 	.word	0x080063fd
 8006450:	080063fd 	.word	0x080063fd
 8006454:	080065a1 	.word	0x080065a1
 8006458:	080063fd 	.word	0x080063fd
 800645c:	080064ab 	.word	0x080064ab
 8006460:	080063fd 	.word	0x080063fd
 8006464:	080063fd 	.word	0x080063fd
 8006468:	08006541 	.word	0x08006541
 800646c:	6833      	ldr	r3, [r6, #0]
 800646e:	1d1a      	adds	r2, r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6032      	str	r2, [r6, #0]
 8006474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006478:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800647c:	2301      	movs	r3, #1
 800647e:	e09c      	b.n	80065ba <_printf_i+0x1e6>
 8006480:	6833      	ldr	r3, [r6, #0]
 8006482:	6820      	ldr	r0, [r4, #0]
 8006484:	1d19      	adds	r1, r3, #4
 8006486:	6031      	str	r1, [r6, #0]
 8006488:	0606      	lsls	r6, r0, #24
 800648a:	d501      	bpl.n	8006490 <_printf_i+0xbc>
 800648c:	681d      	ldr	r5, [r3, #0]
 800648e:	e003      	b.n	8006498 <_printf_i+0xc4>
 8006490:	0645      	lsls	r5, r0, #25
 8006492:	d5fb      	bpl.n	800648c <_printf_i+0xb8>
 8006494:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006498:	2d00      	cmp	r5, #0
 800649a:	da03      	bge.n	80064a4 <_printf_i+0xd0>
 800649c:	232d      	movs	r3, #45	@ 0x2d
 800649e:	426d      	negs	r5, r5
 80064a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a4:	230a      	movs	r3, #10
 80064a6:	4858      	ldr	r0, [pc, #352]	@ (8006608 <_printf_i+0x234>)
 80064a8:	e011      	b.n	80064ce <_printf_i+0xfa>
 80064aa:	6821      	ldr	r1, [r4, #0]
 80064ac:	6833      	ldr	r3, [r6, #0]
 80064ae:	0608      	lsls	r0, r1, #24
 80064b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80064b4:	d402      	bmi.n	80064bc <_printf_i+0xe8>
 80064b6:	0649      	lsls	r1, r1, #25
 80064b8:	bf48      	it	mi
 80064ba:	b2ad      	uxthmi	r5, r5
 80064bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80064be:	6033      	str	r3, [r6, #0]
 80064c0:	bf14      	ite	ne
 80064c2:	230a      	movne	r3, #10
 80064c4:	2308      	moveq	r3, #8
 80064c6:	4850      	ldr	r0, [pc, #320]	@ (8006608 <_printf_i+0x234>)
 80064c8:	2100      	movs	r1, #0
 80064ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064ce:	6866      	ldr	r6, [r4, #4]
 80064d0:	2e00      	cmp	r6, #0
 80064d2:	60a6      	str	r6, [r4, #8]
 80064d4:	db05      	blt.n	80064e2 <_printf_i+0x10e>
 80064d6:	6821      	ldr	r1, [r4, #0]
 80064d8:	432e      	orrs	r6, r5
 80064da:	f021 0104 	bic.w	r1, r1, #4
 80064de:	6021      	str	r1, [r4, #0]
 80064e0:	d04b      	beq.n	800657a <_printf_i+0x1a6>
 80064e2:	4616      	mov	r6, r2
 80064e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80064e8:	fb03 5711 	mls	r7, r3, r1, r5
 80064ec:	5dc7      	ldrb	r7, [r0, r7]
 80064ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064f2:	462f      	mov	r7, r5
 80064f4:	42bb      	cmp	r3, r7
 80064f6:	460d      	mov	r5, r1
 80064f8:	d9f4      	bls.n	80064e4 <_printf_i+0x110>
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d10b      	bne.n	8006516 <_printf_i+0x142>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	07df      	lsls	r7, r3, #31
 8006502:	d508      	bpl.n	8006516 <_printf_i+0x142>
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	6861      	ldr	r1, [r4, #4]
 8006508:	4299      	cmp	r1, r3
 800650a:	bfde      	ittt	le
 800650c:	2330      	movle	r3, #48	@ 0x30
 800650e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006512:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006516:	1b92      	subs	r2, r2, r6
 8006518:	6122      	str	r2, [r4, #16]
 800651a:	464b      	mov	r3, r9
 800651c:	4621      	mov	r1, r4
 800651e:	4640      	mov	r0, r8
 8006520:	f8cd a000 	str.w	sl, [sp]
 8006524:	aa03      	add	r2, sp, #12
 8006526:	f7ff fee3 	bl	80062f0 <_printf_common>
 800652a:	3001      	adds	r0, #1
 800652c:	d14a      	bne.n	80065c4 <_printf_i+0x1f0>
 800652e:	f04f 30ff 	mov.w	r0, #4294967295
 8006532:	b004      	add	sp, #16
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	f043 0320 	orr.w	r3, r3, #32
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	2778      	movs	r7, #120	@ 0x78
 8006542:	4832      	ldr	r0, [pc, #200]	@ (800660c <_printf_i+0x238>)
 8006544:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	6831      	ldr	r1, [r6, #0]
 800654c:	061f      	lsls	r7, r3, #24
 800654e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006552:	d402      	bmi.n	800655a <_printf_i+0x186>
 8006554:	065f      	lsls	r7, r3, #25
 8006556:	bf48      	it	mi
 8006558:	b2ad      	uxthmi	r5, r5
 800655a:	6031      	str	r1, [r6, #0]
 800655c:	07d9      	lsls	r1, r3, #31
 800655e:	bf44      	itt	mi
 8006560:	f043 0320 	orrmi.w	r3, r3, #32
 8006564:	6023      	strmi	r3, [r4, #0]
 8006566:	b11d      	cbz	r5, 8006570 <_printf_i+0x19c>
 8006568:	2310      	movs	r3, #16
 800656a:	e7ad      	b.n	80064c8 <_printf_i+0xf4>
 800656c:	4826      	ldr	r0, [pc, #152]	@ (8006608 <_printf_i+0x234>)
 800656e:	e7e9      	b.n	8006544 <_printf_i+0x170>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	f023 0320 	bic.w	r3, r3, #32
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	e7f6      	b.n	8006568 <_printf_i+0x194>
 800657a:	4616      	mov	r6, r2
 800657c:	e7bd      	b.n	80064fa <_printf_i+0x126>
 800657e:	6833      	ldr	r3, [r6, #0]
 8006580:	6825      	ldr	r5, [r4, #0]
 8006582:	1d18      	adds	r0, r3, #4
 8006584:	6961      	ldr	r1, [r4, #20]
 8006586:	6030      	str	r0, [r6, #0]
 8006588:	062e      	lsls	r6, r5, #24
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	d501      	bpl.n	8006592 <_printf_i+0x1be>
 800658e:	6019      	str	r1, [r3, #0]
 8006590:	e002      	b.n	8006598 <_printf_i+0x1c4>
 8006592:	0668      	lsls	r0, r5, #25
 8006594:	d5fb      	bpl.n	800658e <_printf_i+0x1ba>
 8006596:	8019      	strh	r1, [r3, #0]
 8006598:	2300      	movs	r3, #0
 800659a:	4616      	mov	r6, r2
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	e7bc      	b.n	800651a <_printf_i+0x146>
 80065a0:	6833      	ldr	r3, [r6, #0]
 80065a2:	2100      	movs	r1, #0
 80065a4:	1d1a      	adds	r2, r3, #4
 80065a6:	6032      	str	r2, [r6, #0]
 80065a8:	681e      	ldr	r6, [r3, #0]
 80065aa:	6862      	ldr	r2, [r4, #4]
 80065ac:	4630      	mov	r0, r6
 80065ae:	f000 fb48 	bl	8006c42 <memchr>
 80065b2:	b108      	cbz	r0, 80065b8 <_printf_i+0x1e4>
 80065b4:	1b80      	subs	r0, r0, r6
 80065b6:	6060      	str	r0, [r4, #4]
 80065b8:	6863      	ldr	r3, [r4, #4]
 80065ba:	6123      	str	r3, [r4, #16]
 80065bc:	2300      	movs	r3, #0
 80065be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065c2:	e7aa      	b.n	800651a <_printf_i+0x146>
 80065c4:	4632      	mov	r2, r6
 80065c6:	4649      	mov	r1, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	47d0      	blx	sl
 80065ce:	3001      	adds	r0, #1
 80065d0:	d0ad      	beq.n	800652e <_printf_i+0x15a>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	079b      	lsls	r3, r3, #30
 80065d6:	d413      	bmi.n	8006600 <_printf_i+0x22c>
 80065d8:	68e0      	ldr	r0, [r4, #12]
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	4298      	cmp	r0, r3
 80065de:	bfb8      	it	lt
 80065e0:	4618      	movlt	r0, r3
 80065e2:	e7a6      	b.n	8006532 <_printf_i+0x15e>
 80065e4:	2301      	movs	r3, #1
 80065e6:	4632      	mov	r2, r6
 80065e8:	4649      	mov	r1, r9
 80065ea:	4640      	mov	r0, r8
 80065ec:	47d0      	blx	sl
 80065ee:	3001      	adds	r0, #1
 80065f0:	d09d      	beq.n	800652e <_printf_i+0x15a>
 80065f2:	3501      	adds	r5, #1
 80065f4:	68e3      	ldr	r3, [r4, #12]
 80065f6:	9903      	ldr	r1, [sp, #12]
 80065f8:	1a5b      	subs	r3, r3, r1
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	dcf2      	bgt.n	80065e4 <_printf_i+0x210>
 80065fe:	e7eb      	b.n	80065d8 <_printf_i+0x204>
 8006600:	2500      	movs	r5, #0
 8006602:	f104 0619 	add.w	r6, r4, #25
 8006606:	e7f5      	b.n	80065f4 <_printf_i+0x220>
 8006608:	08009679 	.word	0x08009679
 800660c:	0800968a 	.word	0x0800968a

08006610 <std>:
 8006610:	2300      	movs	r3, #0
 8006612:	b510      	push	{r4, lr}
 8006614:	4604      	mov	r4, r0
 8006616:	e9c0 3300 	strd	r3, r3, [r0]
 800661a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800661e:	6083      	str	r3, [r0, #8]
 8006620:	8181      	strh	r1, [r0, #12]
 8006622:	6643      	str	r3, [r0, #100]	@ 0x64
 8006624:	81c2      	strh	r2, [r0, #14]
 8006626:	6183      	str	r3, [r0, #24]
 8006628:	4619      	mov	r1, r3
 800662a:	2208      	movs	r2, #8
 800662c:	305c      	adds	r0, #92	@ 0x5c
 800662e:	f000 fa57 	bl	8006ae0 <memset>
 8006632:	4b0d      	ldr	r3, [pc, #52]	@ (8006668 <std+0x58>)
 8006634:	6224      	str	r4, [r4, #32]
 8006636:	6263      	str	r3, [r4, #36]	@ 0x24
 8006638:	4b0c      	ldr	r3, [pc, #48]	@ (800666c <std+0x5c>)
 800663a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800663c:	4b0c      	ldr	r3, [pc, #48]	@ (8006670 <std+0x60>)
 800663e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <std+0x64>)
 8006642:	6323      	str	r3, [r4, #48]	@ 0x30
 8006644:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <std+0x68>)
 8006646:	429c      	cmp	r4, r3
 8006648:	d006      	beq.n	8006658 <std+0x48>
 800664a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800664e:	4294      	cmp	r4, r2
 8006650:	d002      	beq.n	8006658 <std+0x48>
 8006652:	33d0      	adds	r3, #208	@ 0xd0
 8006654:	429c      	cmp	r4, r3
 8006656:	d105      	bne.n	8006664 <std+0x54>
 8006658:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800665c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006660:	f000 baec 	b.w	8006c3c <__retarget_lock_init_recursive>
 8006664:	bd10      	pop	{r4, pc}
 8006666:	bf00      	nop
 8006668:	080068b9 	.word	0x080068b9
 800666c:	080068db 	.word	0x080068db
 8006670:	08006913 	.word	0x08006913
 8006674:	08006937 	.word	0x08006937
 8006678:	20000bf8 	.word	0x20000bf8

0800667c <stdio_exit_handler>:
 800667c:	4a02      	ldr	r2, [pc, #8]	@ (8006688 <stdio_exit_handler+0xc>)
 800667e:	4903      	ldr	r1, [pc, #12]	@ (800668c <stdio_exit_handler+0x10>)
 8006680:	4803      	ldr	r0, [pc, #12]	@ (8006690 <stdio_exit_handler+0x14>)
 8006682:	f000 b869 	b.w	8006758 <_fwalk_sglue>
 8006686:	bf00      	nop
 8006688:	20000010 	.word	0x20000010
 800668c:	08008839 	.word	0x08008839
 8006690:	20000020 	.word	0x20000020

08006694 <cleanup_stdio>:
 8006694:	6841      	ldr	r1, [r0, #4]
 8006696:	4b0c      	ldr	r3, [pc, #48]	@ (80066c8 <cleanup_stdio+0x34>)
 8006698:	b510      	push	{r4, lr}
 800669a:	4299      	cmp	r1, r3
 800669c:	4604      	mov	r4, r0
 800669e:	d001      	beq.n	80066a4 <cleanup_stdio+0x10>
 80066a0:	f002 f8ca 	bl	8008838 <_fflush_r>
 80066a4:	68a1      	ldr	r1, [r4, #8]
 80066a6:	4b09      	ldr	r3, [pc, #36]	@ (80066cc <cleanup_stdio+0x38>)
 80066a8:	4299      	cmp	r1, r3
 80066aa:	d002      	beq.n	80066b2 <cleanup_stdio+0x1e>
 80066ac:	4620      	mov	r0, r4
 80066ae:	f002 f8c3 	bl	8008838 <_fflush_r>
 80066b2:	68e1      	ldr	r1, [r4, #12]
 80066b4:	4b06      	ldr	r3, [pc, #24]	@ (80066d0 <cleanup_stdio+0x3c>)
 80066b6:	4299      	cmp	r1, r3
 80066b8:	d004      	beq.n	80066c4 <cleanup_stdio+0x30>
 80066ba:	4620      	mov	r0, r4
 80066bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c0:	f002 b8ba 	b.w	8008838 <_fflush_r>
 80066c4:	bd10      	pop	{r4, pc}
 80066c6:	bf00      	nop
 80066c8:	20000bf8 	.word	0x20000bf8
 80066cc:	20000c60 	.word	0x20000c60
 80066d0:	20000cc8 	.word	0x20000cc8

080066d4 <global_stdio_init.part.0>:
 80066d4:	b510      	push	{r4, lr}
 80066d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006704 <global_stdio_init.part.0+0x30>)
 80066d8:	4c0b      	ldr	r4, [pc, #44]	@ (8006708 <global_stdio_init.part.0+0x34>)
 80066da:	4a0c      	ldr	r2, [pc, #48]	@ (800670c <global_stdio_init.part.0+0x38>)
 80066dc:	4620      	mov	r0, r4
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	2104      	movs	r1, #4
 80066e2:	2200      	movs	r2, #0
 80066e4:	f7ff ff94 	bl	8006610 <std>
 80066e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066ec:	2201      	movs	r2, #1
 80066ee:	2109      	movs	r1, #9
 80066f0:	f7ff ff8e 	bl	8006610 <std>
 80066f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066f8:	2202      	movs	r2, #2
 80066fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066fe:	2112      	movs	r1, #18
 8006700:	f7ff bf86 	b.w	8006610 <std>
 8006704:	20000d30 	.word	0x20000d30
 8006708:	20000bf8 	.word	0x20000bf8
 800670c:	0800667d 	.word	0x0800667d

08006710 <__sfp_lock_acquire>:
 8006710:	4801      	ldr	r0, [pc, #4]	@ (8006718 <__sfp_lock_acquire+0x8>)
 8006712:	f000 ba94 	b.w	8006c3e <__retarget_lock_acquire_recursive>
 8006716:	bf00      	nop
 8006718:	20000d39 	.word	0x20000d39

0800671c <__sfp_lock_release>:
 800671c:	4801      	ldr	r0, [pc, #4]	@ (8006724 <__sfp_lock_release+0x8>)
 800671e:	f000 ba8f 	b.w	8006c40 <__retarget_lock_release_recursive>
 8006722:	bf00      	nop
 8006724:	20000d39 	.word	0x20000d39

08006728 <__sinit>:
 8006728:	b510      	push	{r4, lr}
 800672a:	4604      	mov	r4, r0
 800672c:	f7ff fff0 	bl	8006710 <__sfp_lock_acquire>
 8006730:	6a23      	ldr	r3, [r4, #32]
 8006732:	b11b      	cbz	r3, 800673c <__sinit+0x14>
 8006734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006738:	f7ff bff0 	b.w	800671c <__sfp_lock_release>
 800673c:	4b04      	ldr	r3, [pc, #16]	@ (8006750 <__sinit+0x28>)
 800673e:	6223      	str	r3, [r4, #32]
 8006740:	4b04      	ldr	r3, [pc, #16]	@ (8006754 <__sinit+0x2c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1f5      	bne.n	8006734 <__sinit+0xc>
 8006748:	f7ff ffc4 	bl	80066d4 <global_stdio_init.part.0>
 800674c:	e7f2      	b.n	8006734 <__sinit+0xc>
 800674e:	bf00      	nop
 8006750:	08006695 	.word	0x08006695
 8006754:	20000d30 	.word	0x20000d30

08006758 <_fwalk_sglue>:
 8006758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800675c:	4607      	mov	r7, r0
 800675e:	4688      	mov	r8, r1
 8006760:	4614      	mov	r4, r2
 8006762:	2600      	movs	r6, #0
 8006764:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006768:	f1b9 0901 	subs.w	r9, r9, #1
 800676c:	d505      	bpl.n	800677a <_fwalk_sglue+0x22>
 800676e:	6824      	ldr	r4, [r4, #0]
 8006770:	2c00      	cmp	r4, #0
 8006772:	d1f7      	bne.n	8006764 <_fwalk_sglue+0xc>
 8006774:	4630      	mov	r0, r6
 8006776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800677a:	89ab      	ldrh	r3, [r5, #12]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d907      	bls.n	8006790 <_fwalk_sglue+0x38>
 8006780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006784:	3301      	adds	r3, #1
 8006786:	d003      	beq.n	8006790 <_fwalk_sglue+0x38>
 8006788:	4629      	mov	r1, r5
 800678a:	4638      	mov	r0, r7
 800678c:	47c0      	blx	r8
 800678e:	4306      	orrs	r6, r0
 8006790:	3568      	adds	r5, #104	@ 0x68
 8006792:	e7e9      	b.n	8006768 <_fwalk_sglue+0x10>

08006794 <iprintf>:
 8006794:	b40f      	push	{r0, r1, r2, r3}
 8006796:	b507      	push	{r0, r1, r2, lr}
 8006798:	4906      	ldr	r1, [pc, #24]	@ (80067b4 <iprintf+0x20>)
 800679a:	ab04      	add	r3, sp, #16
 800679c:	6808      	ldr	r0, [r1, #0]
 800679e:	f853 2b04 	ldr.w	r2, [r3], #4
 80067a2:	6881      	ldr	r1, [r0, #8]
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	f001 feaf 	bl	8008508 <_vfiprintf_r>
 80067aa:	b003      	add	sp, #12
 80067ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b0:	b004      	add	sp, #16
 80067b2:	4770      	bx	lr
 80067b4:	2000001c 	.word	0x2000001c

080067b8 <_puts_r>:
 80067b8:	6a03      	ldr	r3, [r0, #32]
 80067ba:	b570      	push	{r4, r5, r6, lr}
 80067bc:	4605      	mov	r5, r0
 80067be:	460e      	mov	r6, r1
 80067c0:	6884      	ldr	r4, [r0, #8]
 80067c2:	b90b      	cbnz	r3, 80067c8 <_puts_r+0x10>
 80067c4:	f7ff ffb0 	bl	8006728 <__sinit>
 80067c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067ca:	07db      	lsls	r3, r3, #31
 80067cc:	d405      	bmi.n	80067da <_puts_r+0x22>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	0598      	lsls	r0, r3, #22
 80067d2:	d402      	bmi.n	80067da <_puts_r+0x22>
 80067d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067d6:	f000 fa32 	bl	8006c3e <__retarget_lock_acquire_recursive>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	0719      	lsls	r1, r3, #28
 80067de:	d502      	bpl.n	80067e6 <_puts_r+0x2e>
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d135      	bne.n	8006852 <_puts_r+0x9a>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 f923 	bl	8006a34 <__swsetup_r>
 80067ee:	b380      	cbz	r0, 8006852 <_puts_r+0x9a>
 80067f0:	f04f 35ff 	mov.w	r5, #4294967295
 80067f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067f6:	07da      	lsls	r2, r3, #31
 80067f8:	d405      	bmi.n	8006806 <_puts_r+0x4e>
 80067fa:	89a3      	ldrh	r3, [r4, #12]
 80067fc:	059b      	lsls	r3, r3, #22
 80067fe:	d402      	bmi.n	8006806 <_puts_r+0x4e>
 8006800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006802:	f000 fa1d 	bl	8006c40 <__retarget_lock_release_recursive>
 8006806:	4628      	mov	r0, r5
 8006808:	bd70      	pop	{r4, r5, r6, pc}
 800680a:	2b00      	cmp	r3, #0
 800680c:	da04      	bge.n	8006818 <_puts_r+0x60>
 800680e:	69a2      	ldr	r2, [r4, #24]
 8006810:	429a      	cmp	r2, r3
 8006812:	dc17      	bgt.n	8006844 <_puts_r+0x8c>
 8006814:	290a      	cmp	r1, #10
 8006816:	d015      	beq.n	8006844 <_puts_r+0x8c>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	6022      	str	r2, [r4, #0]
 800681e:	7019      	strb	r1, [r3, #0]
 8006820:	68a3      	ldr	r3, [r4, #8]
 8006822:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006826:	3b01      	subs	r3, #1
 8006828:	60a3      	str	r3, [r4, #8]
 800682a:	2900      	cmp	r1, #0
 800682c:	d1ed      	bne.n	800680a <_puts_r+0x52>
 800682e:	2b00      	cmp	r3, #0
 8006830:	da11      	bge.n	8006856 <_puts_r+0x9e>
 8006832:	4622      	mov	r2, r4
 8006834:	210a      	movs	r1, #10
 8006836:	4628      	mov	r0, r5
 8006838:	f000 f8be 	bl	80069b8 <__swbuf_r>
 800683c:	3001      	adds	r0, #1
 800683e:	d0d7      	beq.n	80067f0 <_puts_r+0x38>
 8006840:	250a      	movs	r5, #10
 8006842:	e7d7      	b.n	80067f4 <_puts_r+0x3c>
 8006844:	4622      	mov	r2, r4
 8006846:	4628      	mov	r0, r5
 8006848:	f000 f8b6 	bl	80069b8 <__swbuf_r>
 800684c:	3001      	adds	r0, #1
 800684e:	d1e7      	bne.n	8006820 <_puts_r+0x68>
 8006850:	e7ce      	b.n	80067f0 <_puts_r+0x38>
 8006852:	3e01      	subs	r6, #1
 8006854:	e7e4      	b.n	8006820 <_puts_r+0x68>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	6022      	str	r2, [r4, #0]
 800685c:	220a      	movs	r2, #10
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e7ee      	b.n	8006840 <_puts_r+0x88>
	...

08006864 <puts>:
 8006864:	4b02      	ldr	r3, [pc, #8]	@ (8006870 <puts+0xc>)
 8006866:	4601      	mov	r1, r0
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	f7ff bfa5 	b.w	80067b8 <_puts_r>
 800686e:	bf00      	nop
 8006870:	2000001c 	.word	0x2000001c

08006874 <siprintf>:
 8006874:	b40e      	push	{r1, r2, r3}
 8006876:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800687a:	b510      	push	{r4, lr}
 800687c:	2400      	movs	r4, #0
 800687e:	b09d      	sub	sp, #116	@ 0x74
 8006880:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006882:	9002      	str	r0, [sp, #8]
 8006884:	9006      	str	r0, [sp, #24]
 8006886:	9107      	str	r1, [sp, #28]
 8006888:	9104      	str	r1, [sp, #16]
 800688a:	4809      	ldr	r0, [pc, #36]	@ (80068b0 <siprintf+0x3c>)
 800688c:	4909      	ldr	r1, [pc, #36]	@ (80068b4 <siprintf+0x40>)
 800688e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006892:	9105      	str	r1, [sp, #20]
 8006894:	6800      	ldr	r0, [r0, #0]
 8006896:	a902      	add	r1, sp, #8
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800689c:	f001 fd10 	bl	80082c0 <_svfiprintf_r>
 80068a0:	9b02      	ldr	r3, [sp, #8]
 80068a2:	701c      	strb	r4, [r3, #0]
 80068a4:	b01d      	add	sp, #116	@ 0x74
 80068a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068aa:	b003      	add	sp, #12
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	2000001c 	.word	0x2000001c
 80068b4:	ffff0208 	.word	0xffff0208

080068b8 <__sread>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	460c      	mov	r4, r1
 80068bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c0:	f000 f96e 	bl	8006ba0 <_read_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	bfab      	itete	ge
 80068c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068ca:	89a3      	ldrhlt	r3, [r4, #12]
 80068cc:	181b      	addge	r3, r3, r0
 80068ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068d2:	bfac      	ite	ge
 80068d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068d6:	81a3      	strhlt	r3, [r4, #12]
 80068d8:	bd10      	pop	{r4, pc}

080068da <__swrite>:
 80068da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068de:	461f      	mov	r7, r3
 80068e0:	898b      	ldrh	r3, [r1, #12]
 80068e2:	4605      	mov	r5, r0
 80068e4:	05db      	lsls	r3, r3, #23
 80068e6:	460c      	mov	r4, r1
 80068e8:	4616      	mov	r6, r2
 80068ea:	d505      	bpl.n	80068f8 <__swrite+0x1e>
 80068ec:	2302      	movs	r3, #2
 80068ee:	2200      	movs	r2, #0
 80068f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f4:	f000 f942 	bl	8006b7c <_lseek_r>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	4632      	mov	r2, r6
 80068fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	4628      	mov	r0, r5
 8006904:	463b      	mov	r3, r7
 8006906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800690a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800690e:	f000 b959 	b.w	8006bc4 <_write_r>

08006912 <__sseek>:
 8006912:	b510      	push	{r4, lr}
 8006914:	460c      	mov	r4, r1
 8006916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691a:	f000 f92f 	bl	8006b7c <_lseek_r>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	bf15      	itete	ne
 8006924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800692a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800692e:	81a3      	strheq	r3, [r4, #12]
 8006930:	bf18      	it	ne
 8006932:	81a3      	strhne	r3, [r4, #12]
 8006934:	bd10      	pop	{r4, pc}

08006936 <__sclose>:
 8006936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693a:	f000 b90f 	b.w	8006b5c <_close_r>

0800693e <_vsniprintf_r>:
 800693e:	b530      	push	{r4, r5, lr}
 8006940:	4614      	mov	r4, r2
 8006942:	2c00      	cmp	r4, #0
 8006944:	4605      	mov	r5, r0
 8006946:	461a      	mov	r2, r3
 8006948:	b09b      	sub	sp, #108	@ 0x6c
 800694a:	da05      	bge.n	8006958 <_vsniprintf_r+0x1a>
 800694c:	238b      	movs	r3, #139	@ 0x8b
 800694e:	6003      	str	r3, [r0, #0]
 8006950:	f04f 30ff 	mov.w	r0, #4294967295
 8006954:	b01b      	add	sp, #108	@ 0x6c
 8006956:	bd30      	pop	{r4, r5, pc}
 8006958:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800695c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	9319      	str	r3, [sp, #100]	@ 0x64
 8006966:	bf0c      	ite	eq
 8006968:	4623      	moveq	r3, r4
 800696a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800696e:	9302      	str	r3, [sp, #8]
 8006970:	9305      	str	r3, [sp, #20]
 8006972:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006976:	9100      	str	r1, [sp, #0]
 8006978:	9104      	str	r1, [sp, #16]
 800697a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800697e:	4669      	mov	r1, sp
 8006980:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006982:	f001 fc9d 	bl	80082c0 <_svfiprintf_r>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	bfbc      	itt	lt
 800698a:	238b      	movlt	r3, #139	@ 0x8b
 800698c:	602b      	strlt	r3, [r5, #0]
 800698e:	2c00      	cmp	r4, #0
 8006990:	d0e0      	beq.n	8006954 <_vsniprintf_r+0x16>
 8006992:	2200      	movs	r2, #0
 8006994:	9b00      	ldr	r3, [sp, #0]
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	e7dc      	b.n	8006954 <_vsniprintf_r+0x16>
	...

0800699c <vsniprintf>:
 800699c:	b507      	push	{r0, r1, r2, lr}
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	4613      	mov	r3, r2
 80069a2:	460a      	mov	r2, r1
 80069a4:	4601      	mov	r1, r0
 80069a6:	4803      	ldr	r0, [pc, #12]	@ (80069b4 <vsniprintf+0x18>)
 80069a8:	6800      	ldr	r0, [r0, #0]
 80069aa:	f7ff ffc8 	bl	800693e <_vsniprintf_r>
 80069ae:	b003      	add	sp, #12
 80069b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80069b4:	2000001c 	.word	0x2000001c

080069b8 <__swbuf_r>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	460e      	mov	r6, r1
 80069bc:	4614      	mov	r4, r2
 80069be:	4605      	mov	r5, r0
 80069c0:	b118      	cbz	r0, 80069ca <__swbuf_r+0x12>
 80069c2:	6a03      	ldr	r3, [r0, #32]
 80069c4:	b90b      	cbnz	r3, 80069ca <__swbuf_r+0x12>
 80069c6:	f7ff feaf 	bl	8006728 <__sinit>
 80069ca:	69a3      	ldr	r3, [r4, #24]
 80069cc:	60a3      	str	r3, [r4, #8]
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	071a      	lsls	r2, r3, #28
 80069d2:	d501      	bpl.n	80069d8 <__swbuf_r+0x20>
 80069d4:	6923      	ldr	r3, [r4, #16]
 80069d6:	b943      	cbnz	r3, 80069ea <__swbuf_r+0x32>
 80069d8:	4621      	mov	r1, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 f82a 	bl	8006a34 <__swsetup_r>
 80069e0:	b118      	cbz	r0, 80069ea <__swbuf_r+0x32>
 80069e2:	f04f 37ff 	mov.w	r7, #4294967295
 80069e6:	4638      	mov	r0, r7
 80069e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	6922      	ldr	r2, [r4, #16]
 80069ee:	b2f6      	uxtb	r6, r6
 80069f0:	1a98      	subs	r0, r3, r2
 80069f2:	6963      	ldr	r3, [r4, #20]
 80069f4:	4637      	mov	r7, r6
 80069f6:	4283      	cmp	r3, r0
 80069f8:	dc05      	bgt.n	8006a06 <__swbuf_r+0x4e>
 80069fa:	4621      	mov	r1, r4
 80069fc:	4628      	mov	r0, r5
 80069fe:	f001 ff1b 	bl	8008838 <_fflush_r>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d1ed      	bne.n	80069e2 <__swbuf_r+0x2a>
 8006a06:	68a3      	ldr	r3, [r4, #8]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	60a3      	str	r3, [r4, #8]
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	6022      	str	r2, [r4, #0]
 8006a12:	701e      	strb	r6, [r3, #0]
 8006a14:	6962      	ldr	r2, [r4, #20]
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d004      	beq.n	8006a26 <__swbuf_r+0x6e>
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	07db      	lsls	r3, r3, #31
 8006a20:	d5e1      	bpl.n	80069e6 <__swbuf_r+0x2e>
 8006a22:	2e0a      	cmp	r6, #10
 8006a24:	d1df      	bne.n	80069e6 <__swbuf_r+0x2e>
 8006a26:	4621      	mov	r1, r4
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f001 ff05 	bl	8008838 <_fflush_r>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d0d9      	beq.n	80069e6 <__swbuf_r+0x2e>
 8006a32:	e7d6      	b.n	80069e2 <__swbuf_r+0x2a>

08006a34 <__swsetup_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4b29      	ldr	r3, [pc, #164]	@ (8006adc <__swsetup_r+0xa8>)
 8006a38:	4605      	mov	r5, r0
 8006a3a:	6818      	ldr	r0, [r3, #0]
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	b118      	cbz	r0, 8006a48 <__swsetup_r+0x14>
 8006a40:	6a03      	ldr	r3, [r0, #32]
 8006a42:	b90b      	cbnz	r3, 8006a48 <__swsetup_r+0x14>
 8006a44:	f7ff fe70 	bl	8006728 <__sinit>
 8006a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a4c:	0719      	lsls	r1, r3, #28
 8006a4e:	d422      	bmi.n	8006a96 <__swsetup_r+0x62>
 8006a50:	06da      	lsls	r2, r3, #27
 8006a52:	d407      	bmi.n	8006a64 <__swsetup_r+0x30>
 8006a54:	2209      	movs	r2, #9
 8006a56:	602a      	str	r2, [r5, #0]
 8006a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a60:	81a3      	strh	r3, [r4, #12]
 8006a62:	e033      	b.n	8006acc <__swsetup_r+0x98>
 8006a64:	0758      	lsls	r0, r3, #29
 8006a66:	d512      	bpl.n	8006a8e <__swsetup_r+0x5a>
 8006a68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a6a:	b141      	cbz	r1, 8006a7e <__swsetup_r+0x4a>
 8006a6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a70:	4299      	cmp	r1, r3
 8006a72:	d002      	beq.n	8006a7a <__swsetup_r+0x46>
 8006a74:	4628      	mov	r0, r5
 8006a76:	f000 ff4f 	bl	8007918 <_free_r>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	2300      	movs	r3, #0
 8006a88:	6063      	str	r3, [r4, #4]
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f043 0308 	orr.w	r3, r3, #8
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	b94b      	cbnz	r3, 8006aae <__swsetup_r+0x7a>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aa4:	d003      	beq.n	8006aae <__swsetup_r+0x7a>
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f001 ff12 	bl	80088d2 <__smakebuf_r>
 8006aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab2:	f013 0201 	ands.w	r2, r3, #1
 8006ab6:	d00a      	beq.n	8006ace <__swsetup_r+0x9a>
 8006ab8:	2200      	movs	r2, #0
 8006aba:	60a2      	str	r2, [r4, #8]
 8006abc:	6962      	ldr	r2, [r4, #20]
 8006abe:	4252      	negs	r2, r2
 8006ac0:	61a2      	str	r2, [r4, #24]
 8006ac2:	6922      	ldr	r2, [r4, #16]
 8006ac4:	b942      	cbnz	r2, 8006ad8 <__swsetup_r+0xa4>
 8006ac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006aca:	d1c5      	bne.n	8006a58 <__swsetup_r+0x24>
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
 8006ace:	0799      	lsls	r1, r3, #30
 8006ad0:	bf58      	it	pl
 8006ad2:	6962      	ldrpl	r2, [r4, #20]
 8006ad4:	60a2      	str	r2, [r4, #8]
 8006ad6:	e7f4      	b.n	8006ac2 <__swsetup_r+0x8e>
 8006ad8:	2000      	movs	r0, #0
 8006ada:	e7f7      	b.n	8006acc <__swsetup_r+0x98>
 8006adc:	2000001c 	.word	0x2000001c

08006ae0 <memset>:
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	4402      	add	r2, r0
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d100      	bne.n	8006aea <memset+0xa>
 8006ae8:	4770      	bx	lr
 8006aea:	f803 1b01 	strb.w	r1, [r3], #1
 8006aee:	e7f9      	b.n	8006ae4 <memset+0x4>

08006af0 <strchr>:
 8006af0:	4603      	mov	r3, r0
 8006af2:	b2c9      	uxtb	r1, r1
 8006af4:	4618      	mov	r0, r3
 8006af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006afa:	b112      	cbz	r2, 8006b02 <strchr+0x12>
 8006afc:	428a      	cmp	r2, r1
 8006afe:	d1f9      	bne.n	8006af4 <strchr+0x4>
 8006b00:	4770      	bx	lr
 8006b02:	2900      	cmp	r1, #0
 8006b04:	bf18      	it	ne
 8006b06:	2000      	movne	r0, #0
 8006b08:	4770      	bx	lr

08006b0a <strncmp>:
 8006b0a:	b510      	push	{r4, lr}
 8006b0c:	b16a      	cbz	r2, 8006b2a <strncmp+0x20>
 8006b0e:	3901      	subs	r1, #1
 8006b10:	1884      	adds	r4, r0, r2
 8006b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b16:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d103      	bne.n	8006b26 <strncmp+0x1c>
 8006b1e:	42a0      	cmp	r0, r4
 8006b20:	d001      	beq.n	8006b26 <strncmp+0x1c>
 8006b22:	2a00      	cmp	r2, #0
 8006b24:	d1f5      	bne.n	8006b12 <strncmp+0x8>
 8006b26:	1ad0      	subs	r0, r2, r3
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	e7fc      	b.n	8006b28 <strncmp+0x1e>

08006b2e <strncpy>:
 8006b2e:	4603      	mov	r3, r0
 8006b30:	b510      	push	{r4, lr}
 8006b32:	3901      	subs	r1, #1
 8006b34:	b132      	cbz	r2, 8006b44 <strncpy+0x16>
 8006b36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b3a:	3a01      	subs	r2, #1
 8006b3c:	f803 4b01 	strb.w	r4, [r3], #1
 8006b40:	2c00      	cmp	r4, #0
 8006b42:	d1f7      	bne.n	8006b34 <strncpy+0x6>
 8006b44:	2100      	movs	r1, #0
 8006b46:	441a      	add	r2, r3
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d100      	bne.n	8006b4e <strncpy+0x20>
 8006b4c:	bd10      	pop	{r4, pc}
 8006b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b52:	e7f9      	b.n	8006b48 <strncpy+0x1a>

08006b54 <_localeconv_r>:
 8006b54:	4800      	ldr	r0, [pc, #0]	@ (8006b58 <_localeconv_r+0x4>)
 8006b56:	4770      	bx	lr
 8006b58:	2000015c 	.word	0x2000015c

08006b5c <_close_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	2300      	movs	r3, #0
 8006b60:	4d05      	ldr	r5, [pc, #20]	@ (8006b78 <_close_r+0x1c>)
 8006b62:	4604      	mov	r4, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	f7fb ff87 	bl	8002a7a <_close>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_close_r+0x1a>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_close_r+0x1a>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	20000d34 	.word	0x20000d34

08006b7c <_lseek_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4604      	mov	r4, r0
 8006b80:	4608      	mov	r0, r1
 8006b82:	4611      	mov	r1, r2
 8006b84:	2200      	movs	r2, #0
 8006b86:	4d05      	ldr	r5, [pc, #20]	@ (8006b9c <_lseek_r+0x20>)
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f7fb ff99 	bl	8002ac2 <_lseek>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_lseek_r+0x1e>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_lseek_r+0x1e>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	20000d34 	.word	0x20000d34

08006ba0 <_read_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	2200      	movs	r2, #0
 8006baa:	4d05      	ldr	r5, [pc, #20]	@ (8006bc0 <_read_r+0x20>)
 8006bac:	602a      	str	r2, [r5, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f7fb ff46 	bl	8002a40 <_read>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_read_r+0x1e>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_read_r+0x1e>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	20000d34 	.word	0x20000d34

08006bc4 <_write_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	4608      	mov	r0, r1
 8006bca:	4611      	mov	r1, r2
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4d05      	ldr	r5, [pc, #20]	@ (8006be4 <_write_r+0x20>)
 8006bd0:	602a      	str	r2, [r5, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f7fc f868 	bl	8002ca8 <_write>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d102      	bne.n	8006be2 <_write_r+0x1e>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	b103      	cbz	r3, 8006be2 <_write_r+0x1e>
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	20000d34 	.word	0x20000d34

08006be8 <__errno>:
 8006be8:	4b01      	ldr	r3, [pc, #4]	@ (8006bf0 <__errno+0x8>)
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	2000001c 	.word	0x2000001c

08006bf4 <__libc_init_array>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	2600      	movs	r6, #0
 8006bf8:	4d0c      	ldr	r5, [pc, #48]	@ (8006c2c <__libc_init_array+0x38>)
 8006bfa:	4c0d      	ldr	r4, [pc, #52]	@ (8006c30 <__libc_init_array+0x3c>)
 8006bfc:	1b64      	subs	r4, r4, r5
 8006bfe:	10a4      	asrs	r4, r4, #2
 8006c00:	42a6      	cmp	r6, r4
 8006c02:	d109      	bne.n	8006c18 <__libc_init_array+0x24>
 8006c04:	f001 ffe2 	bl	8008bcc <_init>
 8006c08:	2600      	movs	r6, #0
 8006c0a:	4d0a      	ldr	r5, [pc, #40]	@ (8006c34 <__libc_init_array+0x40>)
 8006c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8006c38 <__libc_init_array+0x44>)
 8006c0e:	1b64      	subs	r4, r4, r5
 8006c10:	10a4      	asrs	r4, r4, #2
 8006c12:	42a6      	cmp	r6, r4
 8006c14:	d105      	bne.n	8006c22 <__libc_init_array+0x2e>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1c:	4798      	blx	r3
 8006c1e:	3601      	adds	r6, #1
 8006c20:	e7ee      	b.n	8006c00 <__libc_init_array+0xc>
 8006c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c26:	4798      	blx	r3
 8006c28:	3601      	adds	r6, #1
 8006c2a:	e7f2      	b.n	8006c12 <__libc_init_array+0x1e>
 8006c2c:	080098e0 	.word	0x080098e0
 8006c30:	080098e0 	.word	0x080098e0
 8006c34:	080098e0 	.word	0x080098e0
 8006c38:	080098e4 	.word	0x080098e4

08006c3c <__retarget_lock_init_recursive>:
 8006c3c:	4770      	bx	lr

08006c3e <__retarget_lock_acquire_recursive>:
 8006c3e:	4770      	bx	lr

08006c40 <__retarget_lock_release_recursive>:
 8006c40:	4770      	bx	lr

08006c42 <memchr>:
 8006c42:	4603      	mov	r3, r0
 8006c44:	b510      	push	{r4, lr}
 8006c46:	b2c9      	uxtb	r1, r1
 8006c48:	4402      	add	r2, r0
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	d101      	bne.n	8006c54 <memchr+0x12>
 8006c50:	2000      	movs	r0, #0
 8006c52:	e003      	b.n	8006c5c <memchr+0x1a>
 8006c54:	7804      	ldrb	r4, [r0, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	428c      	cmp	r4, r1
 8006c5a:	d1f6      	bne.n	8006c4a <memchr+0x8>
 8006c5c:	bd10      	pop	{r4, pc}

08006c5e <quorem>:
 8006c5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c62:	6903      	ldr	r3, [r0, #16]
 8006c64:	690c      	ldr	r4, [r1, #16]
 8006c66:	4607      	mov	r7, r0
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	db7e      	blt.n	8006d6a <quorem+0x10c>
 8006c6c:	3c01      	subs	r4, #1
 8006c6e:	00a3      	lsls	r3, r4, #2
 8006c70:	f100 0514 	add.w	r5, r0, #20
 8006c74:	f101 0814 	add.w	r8, r1, #20
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c94:	d32e      	bcc.n	8006cf4 <quorem+0x96>
 8006c96:	f04f 0a00 	mov.w	sl, #0
 8006c9a:	46c4      	mov	ip, r8
 8006c9c:	46ae      	mov	lr, r5
 8006c9e:	46d3      	mov	fp, sl
 8006ca0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ca4:	b298      	uxth	r0, r3
 8006ca6:	fb06 a000 	mla	r0, r6, r0, sl
 8006caa:	0c1b      	lsrs	r3, r3, #16
 8006cac:	0c02      	lsrs	r2, r0, #16
 8006cae:	fb06 2303 	mla	r3, r6, r3, r2
 8006cb2:	f8de 2000 	ldr.w	r2, [lr]
 8006cb6:	b280      	uxth	r0, r0
 8006cb8:	b292      	uxth	r2, r2
 8006cba:	1a12      	subs	r2, r2, r0
 8006cbc:	445a      	add	r2, fp
 8006cbe:	f8de 0000 	ldr.w	r0, [lr]
 8006cc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ccc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006cd0:	b292      	uxth	r2, r2
 8006cd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cd6:	45e1      	cmp	r9, ip
 8006cd8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006cdc:	f84e 2b04 	str.w	r2, [lr], #4
 8006ce0:	d2de      	bcs.n	8006ca0 <quorem+0x42>
 8006ce2:	9b00      	ldr	r3, [sp, #0]
 8006ce4:	58eb      	ldr	r3, [r5, r3]
 8006ce6:	b92b      	cbnz	r3, 8006cf4 <quorem+0x96>
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	3b04      	subs	r3, #4
 8006cec:	429d      	cmp	r5, r3
 8006cee:	461a      	mov	r2, r3
 8006cf0:	d32f      	bcc.n	8006d52 <quorem+0xf4>
 8006cf2:	613c      	str	r4, [r7, #16]
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	f001 f97f 	bl	8007ff8 <__mcmp>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	db25      	blt.n	8006d4a <quorem+0xec>
 8006cfe:	4629      	mov	r1, r5
 8006d00:	2000      	movs	r0, #0
 8006d02:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d06:	f8d1 c000 	ldr.w	ip, [r1]
 8006d0a:	fa1f fe82 	uxth.w	lr, r2
 8006d0e:	fa1f f38c 	uxth.w	r3, ip
 8006d12:	eba3 030e 	sub.w	r3, r3, lr
 8006d16:	4403      	add	r3, r0
 8006d18:	0c12      	lsrs	r2, r2, #16
 8006d1a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d1e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d28:	45c1      	cmp	r9, r8
 8006d2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d2e:	f841 3b04 	str.w	r3, [r1], #4
 8006d32:	d2e6      	bcs.n	8006d02 <quorem+0xa4>
 8006d34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d3c:	b922      	cbnz	r2, 8006d48 <quorem+0xea>
 8006d3e:	3b04      	subs	r3, #4
 8006d40:	429d      	cmp	r5, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	d30b      	bcc.n	8006d5e <quorem+0x100>
 8006d46:	613c      	str	r4, [r7, #16]
 8006d48:	3601      	adds	r6, #1
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	b003      	add	sp, #12
 8006d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d52:	6812      	ldr	r2, [r2, #0]
 8006d54:	3b04      	subs	r3, #4
 8006d56:	2a00      	cmp	r2, #0
 8006d58:	d1cb      	bne.n	8006cf2 <quorem+0x94>
 8006d5a:	3c01      	subs	r4, #1
 8006d5c:	e7c6      	b.n	8006cec <quorem+0x8e>
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	3b04      	subs	r3, #4
 8006d62:	2a00      	cmp	r2, #0
 8006d64:	d1ef      	bne.n	8006d46 <quorem+0xe8>
 8006d66:	3c01      	subs	r4, #1
 8006d68:	e7ea      	b.n	8006d40 <quorem+0xe2>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	e7ee      	b.n	8006d4c <quorem+0xee>
	...

08006d70 <_dtoa_r>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	4614      	mov	r4, r2
 8006d76:	461d      	mov	r5, r3
 8006d78:	69c7      	ldr	r7, [r0, #28]
 8006d7a:	b097      	sub	sp, #92	@ 0x5c
 8006d7c:	4681      	mov	r9, r0
 8006d7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006d82:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006d84:	b97f      	cbnz	r7, 8006da6 <_dtoa_r+0x36>
 8006d86:	2010      	movs	r0, #16
 8006d88:	f000 fe0e 	bl	80079a8 <malloc>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006d92:	b920      	cbnz	r0, 8006d9e <_dtoa_r+0x2e>
 8006d94:	21ef      	movs	r1, #239	@ 0xef
 8006d96:	4bac      	ldr	r3, [pc, #688]	@ (8007048 <_dtoa_r+0x2d8>)
 8006d98:	48ac      	ldr	r0, [pc, #688]	@ (800704c <_dtoa_r+0x2dc>)
 8006d9a:	f001 fe31 	bl	8008a00 <__assert_func>
 8006d9e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006da2:	6007      	str	r7, [r0, #0]
 8006da4:	60c7      	str	r7, [r0, #12]
 8006da6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006daa:	6819      	ldr	r1, [r3, #0]
 8006dac:	b159      	cbz	r1, 8006dc6 <_dtoa_r+0x56>
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	2301      	movs	r3, #1
 8006db2:	4093      	lsls	r3, r2
 8006db4:	604a      	str	r2, [r1, #4]
 8006db6:	608b      	str	r3, [r1, #8]
 8006db8:	4648      	mov	r0, r9
 8006dba:	f000 feeb 	bl	8007b94 <_Bfree>
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	1e2b      	subs	r3, r5, #0
 8006dc8:	bfaf      	iteee	ge
 8006dca:	2300      	movge	r3, #0
 8006dcc:	2201      	movlt	r2, #1
 8006dce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006dd2:	9307      	strlt	r3, [sp, #28]
 8006dd4:	bfa8      	it	ge
 8006dd6:	6033      	strge	r3, [r6, #0]
 8006dd8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006ddc:	4b9c      	ldr	r3, [pc, #624]	@ (8007050 <_dtoa_r+0x2e0>)
 8006dde:	bfb8      	it	lt
 8006de0:	6032      	strlt	r2, [r6, #0]
 8006de2:	ea33 0308 	bics.w	r3, r3, r8
 8006de6:	d112      	bne.n	8006e0e <_dtoa_r+0x9e>
 8006de8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006dec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006df4:	4323      	orrs	r3, r4
 8006df6:	f000 855e 	beq.w	80078b6 <_dtoa_r+0xb46>
 8006dfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006dfc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007054 <_dtoa_r+0x2e4>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8560 	beq.w	80078c6 <_dtoa_r+0xb56>
 8006e06:	f10a 0303 	add.w	r3, sl, #3
 8006e0a:	f000 bd5a 	b.w	80078c2 <_dtoa_r+0xb52>
 8006e0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006e16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f7f9 fdc3 	bl	80009a8 <__aeabi_dcmpeq>
 8006e22:	4607      	mov	r7, r0
 8006e24:	b158      	cbz	r0, 8006e3e <_dtoa_r+0xce>
 8006e26:	2301      	movs	r3, #1
 8006e28:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e2e:	b113      	cbz	r3, 8006e36 <_dtoa_r+0xc6>
 8006e30:	4b89      	ldr	r3, [pc, #548]	@ (8007058 <_dtoa_r+0x2e8>)
 8006e32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800705c <_dtoa_r+0x2ec>
 8006e3a:	f000 bd44 	b.w	80078c6 <_dtoa_r+0xb56>
 8006e3e:	ab14      	add	r3, sp, #80	@ 0x50
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	ab15      	add	r3, sp, #84	@ 0x54
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	4648      	mov	r0, r9
 8006e48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006e4c:	f001 f984 	bl	8008158 <__d2b>
 8006e50:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006e54:	9003      	str	r0, [sp, #12]
 8006e56:	2e00      	cmp	r6, #0
 8006e58:	d078      	beq.n	8006f4c <_dtoa_r+0x1dc>
 8006e5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e60:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e68:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e6c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e70:	9712      	str	r7, [sp, #72]	@ 0x48
 8006e72:	4619      	mov	r1, r3
 8006e74:	2200      	movs	r2, #0
 8006e76:	4b7a      	ldr	r3, [pc, #488]	@ (8007060 <_dtoa_r+0x2f0>)
 8006e78:	f7f9 f976 	bl	8000168 <__aeabi_dsub>
 8006e7c:	a36c      	add	r3, pc, #432	@ (adr r3, 8007030 <_dtoa_r+0x2c0>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f7f9 fb29 	bl	80004d8 <__aeabi_dmul>
 8006e86:	a36c      	add	r3, pc, #432	@ (adr r3, 8007038 <_dtoa_r+0x2c8>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f7f9 f96e 	bl	800016c <__adddf3>
 8006e90:	4604      	mov	r4, r0
 8006e92:	4630      	mov	r0, r6
 8006e94:	460d      	mov	r5, r1
 8006e96:	f7f9 fab5 	bl	8000404 <__aeabi_i2d>
 8006e9a:	a369      	add	r3, pc, #420	@ (adr r3, 8007040 <_dtoa_r+0x2d0>)
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f7f9 fb1a 	bl	80004d8 <__aeabi_dmul>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	4629      	mov	r1, r5
 8006eac:	f7f9 f95e 	bl	800016c <__adddf3>
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	f7f9 fdc0 	bl	8000a38 <__aeabi_d2iz>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4607      	mov	r7, r0
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fd7b 	bl	80009bc <__aeabi_dcmplt>
 8006ec6:	b140      	cbz	r0, 8006eda <_dtoa_r+0x16a>
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f7f9 fa9b 	bl	8000404 <__aeabi_i2d>
 8006ece:	4622      	mov	r2, r4
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	f7f9 fd69 	bl	80009a8 <__aeabi_dcmpeq>
 8006ed6:	b900      	cbnz	r0, 8006eda <_dtoa_r+0x16a>
 8006ed8:	3f01      	subs	r7, #1
 8006eda:	2f16      	cmp	r7, #22
 8006edc:	d854      	bhi.n	8006f88 <_dtoa_r+0x218>
 8006ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ee2:	4b60      	ldr	r3, [pc, #384]	@ (8007064 <_dtoa_r+0x2f4>)
 8006ee4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f7f9 fd66 	bl	80009bc <__aeabi_dcmplt>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d04b      	beq.n	8006f8c <_dtoa_r+0x21c>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	3f01      	subs	r7, #1
 8006ef8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006efa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006efc:	1b9b      	subs	r3, r3, r6
 8006efe:	1e5a      	subs	r2, r3, #1
 8006f00:	bf49      	itett	mi
 8006f02:	f1c3 0301 	rsbmi	r3, r3, #1
 8006f06:	2300      	movpl	r3, #0
 8006f08:	9304      	strmi	r3, [sp, #16]
 8006f0a:	2300      	movmi	r3, #0
 8006f0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f0e:	bf54      	ite	pl
 8006f10:	9304      	strpl	r3, [sp, #16]
 8006f12:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006f14:	2f00      	cmp	r7, #0
 8006f16:	db3b      	blt.n	8006f90 <_dtoa_r+0x220>
 8006f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f1a:	970e      	str	r7, [sp, #56]	@ 0x38
 8006f1c:	443b      	add	r3, r7
 8006f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f20:	2300      	movs	r3, #0
 8006f22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	d865      	bhi.n	8006ff6 <_dtoa_r+0x286>
 8006f2a:	2b05      	cmp	r3, #5
 8006f2c:	bfc4      	itt	gt
 8006f2e:	3b04      	subgt	r3, #4
 8006f30:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006f32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f34:	bfc8      	it	gt
 8006f36:	2400      	movgt	r4, #0
 8006f38:	f1a3 0302 	sub.w	r3, r3, #2
 8006f3c:	bfd8      	it	le
 8006f3e:	2401      	movle	r4, #1
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d864      	bhi.n	800700e <_dtoa_r+0x29e>
 8006f44:	e8df f003 	tbb	[pc, r3]
 8006f48:	2c385553 	.word	0x2c385553
 8006f4c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006f50:	441e      	add	r6, r3
 8006f52:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	bfc1      	itttt	gt
 8006f5a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f5e:	fa08 f803 	lslgt.w	r8, r8, r3
 8006f62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f6a:	bfd6      	itet	le
 8006f6c:	f1c3 0320 	rsble	r3, r3, #32
 8006f70:	ea48 0003 	orrgt.w	r0, r8, r3
 8006f74:	fa04 f003 	lslle.w	r0, r4, r3
 8006f78:	f7f9 fa34 	bl	80003e4 <__aeabi_ui2d>
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f82:	3e01      	subs	r6, #1
 8006f84:	9212      	str	r2, [sp, #72]	@ 0x48
 8006f86:	e774      	b.n	8006e72 <_dtoa_r+0x102>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e7b5      	b.n	8006ef8 <_dtoa_r+0x188>
 8006f8c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006f8e:	e7b4      	b.n	8006efa <_dtoa_r+0x18a>
 8006f90:	9b04      	ldr	r3, [sp, #16]
 8006f92:	1bdb      	subs	r3, r3, r7
 8006f94:	9304      	str	r3, [sp, #16]
 8006f96:	427b      	negs	r3, r7
 8006f98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f9e:	e7c1      	b.n	8006f24 <_dtoa_r+0x1b4>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fa4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fa6:	eb07 0b03 	add.w	fp, r7, r3
 8006faa:	f10b 0301 	add.w	r3, fp, #1
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	9308      	str	r3, [sp, #32]
 8006fb2:	bfb8      	it	lt
 8006fb4:	2301      	movlt	r3, #1
 8006fb6:	e006      	b.n	8006fc6 <_dtoa_r+0x256>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	dd28      	ble.n	8007014 <_dtoa_r+0x2a4>
 8006fc2:	469b      	mov	fp, r3
 8006fc4:	9308      	str	r3, [sp, #32]
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	2204      	movs	r2, #4
 8006fca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006fce:	f102 0514 	add.w	r5, r2, #20
 8006fd2:	429d      	cmp	r5, r3
 8006fd4:	d926      	bls.n	8007024 <_dtoa_r+0x2b4>
 8006fd6:	6041      	str	r1, [r0, #4]
 8006fd8:	4648      	mov	r0, r9
 8006fda:	f000 fd9b 	bl	8007b14 <_Balloc>
 8006fde:	4682      	mov	sl, r0
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d143      	bne.n	800706c <_dtoa_r+0x2fc>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006fea:	4b1f      	ldr	r3, [pc, #124]	@ (8007068 <_dtoa_r+0x2f8>)
 8006fec:	e6d4      	b.n	8006d98 <_dtoa_r+0x28>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e7e3      	b.n	8006fba <_dtoa_r+0x24a>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e7d5      	b.n	8006fa2 <_dtoa_r+0x232>
 8006ff6:	2401      	movs	r4, #1
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ffc:	9320      	str	r3, [sp, #128]	@ 0x80
 8006ffe:	f04f 3bff 	mov.w	fp, #4294967295
 8007002:	2200      	movs	r2, #0
 8007004:	2312      	movs	r3, #18
 8007006:	f8cd b020 	str.w	fp, [sp, #32]
 800700a:	9221      	str	r2, [sp, #132]	@ 0x84
 800700c:	e7db      	b.n	8006fc6 <_dtoa_r+0x256>
 800700e:	2301      	movs	r3, #1
 8007010:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007012:	e7f4      	b.n	8006ffe <_dtoa_r+0x28e>
 8007014:	f04f 0b01 	mov.w	fp, #1
 8007018:	465b      	mov	r3, fp
 800701a:	f8cd b020 	str.w	fp, [sp, #32]
 800701e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007022:	e7d0      	b.n	8006fc6 <_dtoa_r+0x256>
 8007024:	3101      	adds	r1, #1
 8007026:	0052      	lsls	r2, r2, #1
 8007028:	e7d1      	b.n	8006fce <_dtoa_r+0x25e>
 800702a:	bf00      	nop
 800702c:	f3af 8000 	nop.w
 8007030:	636f4361 	.word	0x636f4361
 8007034:	3fd287a7 	.word	0x3fd287a7
 8007038:	8b60c8b3 	.word	0x8b60c8b3
 800703c:	3fc68a28 	.word	0x3fc68a28
 8007040:	509f79fb 	.word	0x509f79fb
 8007044:	3fd34413 	.word	0x3fd34413
 8007048:	080096a8 	.word	0x080096a8
 800704c:	080096bf 	.word	0x080096bf
 8007050:	7ff00000 	.word	0x7ff00000
 8007054:	080096a4 	.word	0x080096a4
 8007058:	08009678 	.word	0x08009678
 800705c:	08009677 	.word	0x08009677
 8007060:	3ff80000 	.word	0x3ff80000
 8007064:	08009810 	.word	0x08009810
 8007068:	08009717 	.word	0x08009717
 800706c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007070:	6018      	str	r0, [r3, #0]
 8007072:	9b08      	ldr	r3, [sp, #32]
 8007074:	2b0e      	cmp	r3, #14
 8007076:	f200 80a1 	bhi.w	80071bc <_dtoa_r+0x44c>
 800707a:	2c00      	cmp	r4, #0
 800707c:	f000 809e 	beq.w	80071bc <_dtoa_r+0x44c>
 8007080:	2f00      	cmp	r7, #0
 8007082:	dd33      	ble.n	80070ec <_dtoa_r+0x37c>
 8007084:	4b9c      	ldr	r3, [pc, #624]	@ (80072f8 <_dtoa_r+0x588>)
 8007086:	f007 020f 	and.w	r2, r7, #15
 800708a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800708e:	05f8      	lsls	r0, r7, #23
 8007090:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007094:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007098:	ea4f 1427 	mov.w	r4, r7, asr #4
 800709c:	d516      	bpl.n	80070cc <_dtoa_r+0x35c>
 800709e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070a2:	4b96      	ldr	r3, [pc, #600]	@ (80072fc <_dtoa_r+0x58c>)
 80070a4:	2603      	movs	r6, #3
 80070a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070aa:	f7f9 fb3f 	bl	800072c <__aeabi_ddiv>
 80070ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80070b2:	f004 040f 	and.w	r4, r4, #15
 80070b6:	4d91      	ldr	r5, [pc, #580]	@ (80072fc <_dtoa_r+0x58c>)
 80070b8:	b954      	cbnz	r4, 80070d0 <_dtoa_r+0x360>
 80070ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070c2:	f7f9 fb33 	bl	800072c <__aeabi_ddiv>
 80070c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80070ca:	e028      	b.n	800711e <_dtoa_r+0x3ae>
 80070cc:	2602      	movs	r6, #2
 80070ce:	e7f2      	b.n	80070b6 <_dtoa_r+0x346>
 80070d0:	07e1      	lsls	r1, r4, #31
 80070d2:	d508      	bpl.n	80070e6 <_dtoa_r+0x376>
 80070d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070dc:	f7f9 f9fc 	bl	80004d8 <__aeabi_dmul>
 80070e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070e4:	3601      	adds	r6, #1
 80070e6:	1064      	asrs	r4, r4, #1
 80070e8:	3508      	adds	r5, #8
 80070ea:	e7e5      	b.n	80070b8 <_dtoa_r+0x348>
 80070ec:	f000 80af 	beq.w	800724e <_dtoa_r+0x4de>
 80070f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070f4:	427c      	negs	r4, r7
 80070f6:	4b80      	ldr	r3, [pc, #512]	@ (80072f8 <_dtoa_r+0x588>)
 80070f8:	f004 020f 	and.w	r2, r4, #15
 80070fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f7f9 f9e8 	bl	80004d8 <__aeabi_dmul>
 8007108:	2602      	movs	r6, #2
 800710a:	2300      	movs	r3, #0
 800710c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007110:	4d7a      	ldr	r5, [pc, #488]	@ (80072fc <_dtoa_r+0x58c>)
 8007112:	1124      	asrs	r4, r4, #4
 8007114:	2c00      	cmp	r4, #0
 8007116:	f040 808f 	bne.w	8007238 <_dtoa_r+0x4c8>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1d3      	bne.n	80070c6 <_dtoa_r+0x356>
 800711e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8094 	beq.w	8007252 <_dtoa_r+0x4e2>
 800712a:	2200      	movs	r2, #0
 800712c:	4620      	mov	r0, r4
 800712e:	4629      	mov	r1, r5
 8007130:	4b73      	ldr	r3, [pc, #460]	@ (8007300 <_dtoa_r+0x590>)
 8007132:	f7f9 fc43 	bl	80009bc <__aeabi_dcmplt>
 8007136:	2800      	cmp	r0, #0
 8007138:	f000 808b 	beq.w	8007252 <_dtoa_r+0x4e2>
 800713c:	9b08      	ldr	r3, [sp, #32]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8087 	beq.w	8007252 <_dtoa_r+0x4e2>
 8007144:	f1bb 0f00 	cmp.w	fp, #0
 8007148:	dd34      	ble.n	80071b4 <_dtoa_r+0x444>
 800714a:	4620      	mov	r0, r4
 800714c:	2200      	movs	r2, #0
 800714e:	4629      	mov	r1, r5
 8007150:	4b6c      	ldr	r3, [pc, #432]	@ (8007304 <_dtoa_r+0x594>)
 8007152:	f7f9 f9c1 	bl	80004d8 <__aeabi_dmul>
 8007156:	465c      	mov	r4, fp
 8007158:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800715c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007160:	3601      	adds	r6, #1
 8007162:	4630      	mov	r0, r6
 8007164:	f7f9 f94e 	bl	8000404 <__aeabi_i2d>
 8007168:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800716c:	f7f9 f9b4 	bl	80004d8 <__aeabi_dmul>
 8007170:	2200      	movs	r2, #0
 8007172:	4b65      	ldr	r3, [pc, #404]	@ (8007308 <_dtoa_r+0x598>)
 8007174:	f7f8 fffa 	bl	800016c <__adddf3>
 8007178:	4605      	mov	r5, r0
 800717a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800717e:	2c00      	cmp	r4, #0
 8007180:	d16a      	bne.n	8007258 <_dtoa_r+0x4e8>
 8007182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007186:	2200      	movs	r2, #0
 8007188:	4b60      	ldr	r3, [pc, #384]	@ (800730c <_dtoa_r+0x59c>)
 800718a:	f7f8 ffed 	bl	8000168 <__aeabi_dsub>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007196:	462a      	mov	r2, r5
 8007198:	4633      	mov	r3, r6
 800719a:	f7f9 fc2d 	bl	80009f8 <__aeabi_dcmpgt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	f040 8298 	bne.w	80076d4 <_dtoa_r+0x964>
 80071a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071a8:	462a      	mov	r2, r5
 80071aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80071ae:	f7f9 fc05 	bl	80009bc <__aeabi_dcmplt>
 80071b2:	bb38      	cbnz	r0, 8007204 <_dtoa_r+0x494>
 80071b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80071b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80071bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f2c0 8157 	blt.w	8007472 <_dtoa_r+0x702>
 80071c4:	2f0e      	cmp	r7, #14
 80071c6:	f300 8154 	bgt.w	8007472 <_dtoa_r+0x702>
 80071ca:	4b4b      	ldr	r3, [pc, #300]	@ (80072f8 <_dtoa_r+0x588>)
 80071cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80071d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f280 80e5 	bge.w	80073aa <_dtoa_r+0x63a>
 80071e0:	9b08      	ldr	r3, [sp, #32]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f300 80e1 	bgt.w	80073aa <_dtoa_r+0x63a>
 80071e8:	d10c      	bne.n	8007204 <_dtoa_r+0x494>
 80071ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071ee:	2200      	movs	r2, #0
 80071f0:	4b46      	ldr	r3, [pc, #280]	@ (800730c <_dtoa_r+0x59c>)
 80071f2:	f7f9 f971 	bl	80004d8 <__aeabi_dmul>
 80071f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071fa:	f7f9 fbf3 	bl	80009e4 <__aeabi_dcmpge>
 80071fe:	2800      	cmp	r0, #0
 8007200:	f000 8266 	beq.w	80076d0 <_dtoa_r+0x960>
 8007204:	2400      	movs	r4, #0
 8007206:	4625      	mov	r5, r4
 8007208:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800720a:	4656      	mov	r6, sl
 800720c:	ea6f 0803 	mvn.w	r8, r3
 8007210:	2700      	movs	r7, #0
 8007212:	4621      	mov	r1, r4
 8007214:	4648      	mov	r0, r9
 8007216:	f000 fcbd 	bl	8007b94 <_Bfree>
 800721a:	2d00      	cmp	r5, #0
 800721c:	f000 80bd 	beq.w	800739a <_dtoa_r+0x62a>
 8007220:	b12f      	cbz	r7, 800722e <_dtoa_r+0x4be>
 8007222:	42af      	cmp	r7, r5
 8007224:	d003      	beq.n	800722e <_dtoa_r+0x4be>
 8007226:	4639      	mov	r1, r7
 8007228:	4648      	mov	r0, r9
 800722a:	f000 fcb3 	bl	8007b94 <_Bfree>
 800722e:	4629      	mov	r1, r5
 8007230:	4648      	mov	r0, r9
 8007232:	f000 fcaf 	bl	8007b94 <_Bfree>
 8007236:	e0b0      	b.n	800739a <_dtoa_r+0x62a>
 8007238:	07e2      	lsls	r2, r4, #31
 800723a:	d505      	bpl.n	8007248 <_dtoa_r+0x4d8>
 800723c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007240:	f7f9 f94a 	bl	80004d8 <__aeabi_dmul>
 8007244:	2301      	movs	r3, #1
 8007246:	3601      	adds	r6, #1
 8007248:	1064      	asrs	r4, r4, #1
 800724a:	3508      	adds	r5, #8
 800724c:	e762      	b.n	8007114 <_dtoa_r+0x3a4>
 800724e:	2602      	movs	r6, #2
 8007250:	e765      	b.n	800711e <_dtoa_r+0x3ae>
 8007252:	46b8      	mov	r8, r7
 8007254:	9c08      	ldr	r4, [sp, #32]
 8007256:	e784      	b.n	8007162 <_dtoa_r+0x3f2>
 8007258:	4b27      	ldr	r3, [pc, #156]	@ (80072f8 <_dtoa_r+0x588>)
 800725a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800725c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007260:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007264:	4454      	add	r4, sl
 8007266:	2900      	cmp	r1, #0
 8007268:	d054      	beq.n	8007314 <_dtoa_r+0x5a4>
 800726a:	2000      	movs	r0, #0
 800726c:	4928      	ldr	r1, [pc, #160]	@ (8007310 <_dtoa_r+0x5a0>)
 800726e:	f7f9 fa5d 	bl	800072c <__aeabi_ddiv>
 8007272:	4633      	mov	r3, r6
 8007274:	462a      	mov	r2, r5
 8007276:	f7f8 ff77 	bl	8000168 <__aeabi_dsub>
 800727a:	4656      	mov	r6, sl
 800727c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007284:	f7f9 fbd8 	bl	8000a38 <__aeabi_d2iz>
 8007288:	4605      	mov	r5, r0
 800728a:	f7f9 f8bb 	bl	8000404 <__aeabi_i2d>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007296:	f7f8 ff67 	bl	8000168 <__aeabi_dsub>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	3530      	adds	r5, #48	@ 0x30
 80072a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072a8:	f806 5b01 	strb.w	r5, [r6], #1
 80072ac:	f7f9 fb86 	bl	80009bc <__aeabi_dcmplt>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d172      	bne.n	800739a <_dtoa_r+0x62a>
 80072b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072b8:	2000      	movs	r0, #0
 80072ba:	4911      	ldr	r1, [pc, #68]	@ (8007300 <_dtoa_r+0x590>)
 80072bc:	f7f8 ff54 	bl	8000168 <__aeabi_dsub>
 80072c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072c4:	f7f9 fb7a 	bl	80009bc <__aeabi_dcmplt>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	f040 80b4 	bne.w	8007436 <_dtoa_r+0x6c6>
 80072ce:	42a6      	cmp	r6, r4
 80072d0:	f43f af70 	beq.w	80071b4 <_dtoa_r+0x444>
 80072d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072d8:	2200      	movs	r2, #0
 80072da:	4b0a      	ldr	r3, [pc, #40]	@ (8007304 <_dtoa_r+0x594>)
 80072dc:	f7f9 f8fc 	bl	80004d8 <__aeabi_dmul>
 80072e0:	2200      	movs	r2, #0
 80072e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072ea:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <_dtoa_r+0x594>)
 80072ec:	f7f9 f8f4 	bl	80004d8 <__aeabi_dmul>
 80072f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072f4:	e7c4      	b.n	8007280 <_dtoa_r+0x510>
 80072f6:	bf00      	nop
 80072f8:	08009810 	.word	0x08009810
 80072fc:	080097e8 	.word	0x080097e8
 8007300:	3ff00000 	.word	0x3ff00000
 8007304:	40240000 	.word	0x40240000
 8007308:	401c0000 	.word	0x401c0000
 800730c:	40140000 	.word	0x40140000
 8007310:	3fe00000 	.word	0x3fe00000
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	f7f9 f8de 	bl	80004d8 <__aeabi_dmul>
 800731c:	4656      	mov	r6, sl
 800731e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007322:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007328:	f7f9 fb86 	bl	8000a38 <__aeabi_d2iz>
 800732c:	4605      	mov	r5, r0
 800732e:	f7f9 f869 	bl	8000404 <__aeabi_i2d>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800733a:	f7f8 ff15 	bl	8000168 <__aeabi_dsub>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	3530      	adds	r5, #48	@ 0x30
 8007344:	f806 5b01 	strb.w	r5, [r6], #1
 8007348:	42a6      	cmp	r6, r4
 800734a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	d124      	bne.n	800739e <_dtoa_r+0x62e>
 8007354:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007358:	4bae      	ldr	r3, [pc, #696]	@ (8007614 <_dtoa_r+0x8a4>)
 800735a:	f7f8 ff07 	bl	800016c <__adddf3>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007366:	f7f9 fb47 	bl	80009f8 <__aeabi_dcmpgt>
 800736a:	2800      	cmp	r0, #0
 800736c:	d163      	bne.n	8007436 <_dtoa_r+0x6c6>
 800736e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007372:	2000      	movs	r0, #0
 8007374:	49a7      	ldr	r1, [pc, #668]	@ (8007614 <_dtoa_r+0x8a4>)
 8007376:	f7f8 fef7 	bl	8000168 <__aeabi_dsub>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007382:	f7f9 fb1b 	bl	80009bc <__aeabi_dcmplt>
 8007386:	2800      	cmp	r0, #0
 8007388:	f43f af14 	beq.w	80071b4 <_dtoa_r+0x444>
 800738c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800738e:	1e73      	subs	r3, r6, #1
 8007390:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007392:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007396:	2b30      	cmp	r3, #48	@ 0x30
 8007398:	d0f8      	beq.n	800738c <_dtoa_r+0x61c>
 800739a:	4647      	mov	r7, r8
 800739c:	e03b      	b.n	8007416 <_dtoa_r+0x6a6>
 800739e:	4b9e      	ldr	r3, [pc, #632]	@ (8007618 <_dtoa_r+0x8a8>)
 80073a0:	f7f9 f89a 	bl	80004d8 <__aeabi_dmul>
 80073a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073a8:	e7bc      	b.n	8007324 <_dtoa_r+0x5b4>
 80073aa:	4656      	mov	r6, sl
 80073ac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80073b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b4:	4620      	mov	r0, r4
 80073b6:	4629      	mov	r1, r5
 80073b8:	f7f9 f9b8 	bl	800072c <__aeabi_ddiv>
 80073bc:	f7f9 fb3c 	bl	8000a38 <__aeabi_d2iz>
 80073c0:	4680      	mov	r8, r0
 80073c2:	f7f9 f81f 	bl	8000404 <__aeabi_i2d>
 80073c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073ca:	f7f9 f885 	bl	80004d8 <__aeabi_dmul>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	f7f8 fec7 	bl	8000168 <__aeabi_dsub>
 80073da:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073de:	9d08      	ldr	r5, [sp, #32]
 80073e0:	f806 4b01 	strb.w	r4, [r6], #1
 80073e4:	eba6 040a 	sub.w	r4, r6, sl
 80073e8:	42a5      	cmp	r5, r4
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	d133      	bne.n	8007458 <_dtoa_r+0x6e8>
 80073f0:	f7f8 febc 	bl	800016c <__adddf3>
 80073f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073f8:	4604      	mov	r4, r0
 80073fa:	460d      	mov	r5, r1
 80073fc:	f7f9 fafc 	bl	80009f8 <__aeabi_dcmpgt>
 8007400:	b9c0      	cbnz	r0, 8007434 <_dtoa_r+0x6c4>
 8007402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007406:	4620      	mov	r0, r4
 8007408:	4629      	mov	r1, r5
 800740a:	f7f9 facd 	bl	80009a8 <__aeabi_dcmpeq>
 800740e:	b110      	cbz	r0, 8007416 <_dtoa_r+0x6a6>
 8007410:	f018 0f01 	tst.w	r8, #1
 8007414:	d10e      	bne.n	8007434 <_dtoa_r+0x6c4>
 8007416:	4648      	mov	r0, r9
 8007418:	9903      	ldr	r1, [sp, #12]
 800741a:	f000 fbbb 	bl	8007b94 <_Bfree>
 800741e:	2300      	movs	r3, #0
 8007420:	7033      	strb	r3, [r6, #0]
 8007422:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007424:	3701      	adds	r7, #1
 8007426:	601f      	str	r7, [r3, #0]
 8007428:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 824b 	beq.w	80078c6 <_dtoa_r+0xb56>
 8007430:	601e      	str	r6, [r3, #0]
 8007432:	e248      	b.n	80078c6 <_dtoa_r+0xb56>
 8007434:	46b8      	mov	r8, r7
 8007436:	4633      	mov	r3, r6
 8007438:	461e      	mov	r6, r3
 800743a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800743e:	2a39      	cmp	r2, #57	@ 0x39
 8007440:	d106      	bne.n	8007450 <_dtoa_r+0x6e0>
 8007442:	459a      	cmp	sl, r3
 8007444:	d1f8      	bne.n	8007438 <_dtoa_r+0x6c8>
 8007446:	2230      	movs	r2, #48	@ 0x30
 8007448:	f108 0801 	add.w	r8, r8, #1
 800744c:	f88a 2000 	strb.w	r2, [sl]
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	3201      	adds	r2, #1
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	e7a0      	b.n	800739a <_dtoa_r+0x62a>
 8007458:	2200      	movs	r2, #0
 800745a:	4b6f      	ldr	r3, [pc, #444]	@ (8007618 <_dtoa_r+0x8a8>)
 800745c:	f7f9 f83c 	bl	80004d8 <__aeabi_dmul>
 8007460:	2200      	movs	r2, #0
 8007462:	2300      	movs	r3, #0
 8007464:	4604      	mov	r4, r0
 8007466:	460d      	mov	r5, r1
 8007468:	f7f9 fa9e 	bl	80009a8 <__aeabi_dcmpeq>
 800746c:	2800      	cmp	r0, #0
 800746e:	d09f      	beq.n	80073b0 <_dtoa_r+0x640>
 8007470:	e7d1      	b.n	8007416 <_dtoa_r+0x6a6>
 8007472:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007474:	2a00      	cmp	r2, #0
 8007476:	f000 80ea 	beq.w	800764e <_dtoa_r+0x8de>
 800747a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800747c:	2a01      	cmp	r2, #1
 800747e:	f300 80cd 	bgt.w	800761c <_dtoa_r+0x8ac>
 8007482:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007484:	2a00      	cmp	r2, #0
 8007486:	f000 80c1 	beq.w	800760c <_dtoa_r+0x89c>
 800748a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800748e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007490:	9e04      	ldr	r6, [sp, #16]
 8007492:	9a04      	ldr	r2, [sp, #16]
 8007494:	2101      	movs	r1, #1
 8007496:	441a      	add	r2, r3
 8007498:	9204      	str	r2, [sp, #16]
 800749a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800749c:	4648      	mov	r0, r9
 800749e:	441a      	add	r2, r3
 80074a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80074a2:	f000 fc2b 	bl	8007cfc <__i2b>
 80074a6:	4605      	mov	r5, r0
 80074a8:	b166      	cbz	r6, 80074c4 <_dtoa_r+0x754>
 80074aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dd09      	ble.n	80074c4 <_dtoa_r+0x754>
 80074b0:	42b3      	cmp	r3, r6
 80074b2:	bfa8      	it	ge
 80074b4:	4633      	movge	r3, r6
 80074b6:	9a04      	ldr	r2, [sp, #16]
 80074b8:	1af6      	subs	r6, r6, r3
 80074ba:	1ad2      	subs	r2, r2, r3
 80074bc:	9204      	str	r2, [sp, #16]
 80074be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074c6:	b30b      	cbz	r3, 800750c <_dtoa_r+0x79c>
 80074c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 80c6 	beq.w	800765c <_dtoa_r+0x8ec>
 80074d0:	2c00      	cmp	r4, #0
 80074d2:	f000 80c0 	beq.w	8007656 <_dtoa_r+0x8e6>
 80074d6:	4629      	mov	r1, r5
 80074d8:	4622      	mov	r2, r4
 80074da:	4648      	mov	r0, r9
 80074dc:	f000 fcc6 	bl	8007e6c <__pow5mult>
 80074e0:	9a03      	ldr	r2, [sp, #12]
 80074e2:	4601      	mov	r1, r0
 80074e4:	4605      	mov	r5, r0
 80074e6:	4648      	mov	r0, r9
 80074e8:	f000 fc1e 	bl	8007d28 <__multiply>
 80074ec:	9903      	ldr	r1, [sp, #12]
 80074ee:	4680      	mov	r8, r0
 80074f0:	4648      	mov	r0, r9
 80074f2:	f000 fb4f 	bl	8007b94 <_Bfree>
 80074f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074f8:	1b1b      	subs	r3, r3, r4
 80074fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80074fc:	f000 80b1 	beq.w	8007662 <_dtoa_r+0x8f2>
 8007500:	4641      	mov	r1, r8
 8007502:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007504:	4648      	mov	r0, r9
 8007506:	f000 fcb1 	bl	8007e6c <__pow5mult>
 800750a:	9003      	str	r0, [sp, #12]
 800750c:	2101      	movs	r1, #1
 800750e:	4648      	mov	r0, r9
 8007510:	f000 fbf4 	bl	8007cfc <__i2b>
 8007514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007516:	4604      	mov	r4, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 81d8 	beq.w	80078ce <_dtoa_r+0xb5e>
 800751e:	461a      	mov	r2, r3
 8007520:	4601      	mov	r1, r0
 8007522:	4648      	mov	r0, r9
 8007524:	f000 fca2 	bl	8007e6c <__pow5mult>
 8007528:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800752a:	4604      	mov	r4, r0
 800752c:	2b01      	cmp	r3, #1
 800752e:	f300 809f 	bgt.w	8007670 <_dtoa_r+0x900>
 8007532:	9b06      	ldr	r3, [sp, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f040 8097 	bne.w	8007668 <_dtoa_r+0x8f8>
 800753a:	9b07      	ldr	r3, [sp, #28]
 800753c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 8093 	bne.w	800766c <_dtoa_r+0x8fc>
 8007546:	9b07      	ldr	r3, [sp, #28]
 8007548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800754c:	0d1b      	lsrs	r3, r3, #20
 800754e:	051b      	lsls	r3, r3, #20
 8007550:	b133      	cbz	r3, 8007560 <_dtoa_r+0x7f0>
 8007552:	9b04      	ldr	r3, [sp, #16]
 8007554:	3301      	adds	r3, #1
 8007556:	9304      	str	r3, [sp, #16]
 8007558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800755a:	3301      	adds	r3, #1
 800755c:	9309      	str	r3, [sp, #36]	@ 0x24
 800755e:	2301      	movs	r3, #1
 8007560:	930a      	str	r3, [sp, #40]	@ 0x28
 8007562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 81b8 	beq.w	80078da <_dtoa_r+0xb6a>
 800756a:	6923      	ldr	r3, [r4, #16]
 800756c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007570:	6918      	ldr	r0, [r3, #16]
 8007572:	f000 fb77 	bl	8007c64 <__hi0bits>
 8007576:	f1c0 0020 	rsb	r0, r0, #32
 800757a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757c:	4418      	add	r0, r3
 800757e:	f010 001f 	ands.w	r0, r0, #31
 8007582:	f000 8082 	beq.w	800768a <_dtoa_r+0x91a>
 8007586:	f1c0 0320 	rsb	r3, r0, #32
 800758a:	2b04      	cmp	r3, #4
 800758c:	dd73      	ble.n	8007676 <_dtoa_r+0x906>
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	f1c0 001c 	rsb	r0, r0, #28
 8007594:	4403      	add	r3, r0
 8007596:	9304      	str	r3, [sp, #16]
 8007598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759a:	4406      	add	r6, r0
 800759c:	4403      	add	r3, r0
 800759e:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a0:	9b04      	ldr	r3, [sp, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd05      	ble.n	80075b2 <_dtoa_r+0x842>
 80075a6:	461a      	mov	r2, r3
 80075a8:	4648      	mov	r0, r9
 80075aa:	9903      	ldr	r1, [sp, #12]
 80075ac:	f000 fcb8 	bl	8007f20 <__lshift>
 80075b0:	9003      	str	r0, [sp, #12]
 80075b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dd05      	ble.n	80075c4 <_dtoa_r+0x854>
 80075b8:	4621      	mov	r1, r4
 80075ba:	461a      	mov	r2, r3
 80075bc:	4648      	mov	r0, r9
 80075be:	f000 fcaf 	bl	8007f20 <__lshift>
 80075c2:	4604      	mov	r4, r0
 80075c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d061      	beq.n	800768e <_dtoa_r+0x91e>
 80075ca:	4621      	mov	r1, r4
 80075cc:	9803      	ldr	r0, [sp, #12]
 80075ce:	f000 fd13 	bl	8007ff8 <__mcmp>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	da5b      	bge.n	800768e <_dtoa_r+0x91e>
 80075d6:	2300      	movs	r3, #0
 80075d8:	220a      	movs	r2, #10
 80075da:	4648      	mov	r0, r9
 80075dc:	9903      	ldr	r1, [sp, #12]
 80075de:	f000 fafb 	bl	8007bd8 <__multadd>
 80075e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075e4:	f107 38ff 	add.w	r8, r7, #4294967295
 80075e8:	9003      	str	r0, [sp, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8177 	beq.w	80078de <_dtoa_r+0xb6e>
 80075f0:	4629      	mov	r1, r5
 80075f2:	2300      	movs	r3, #0
 80075f4:	220a      	movs	r2, #10
 80075f6:	4648      	mov	r0, r9
 80075f8:	f000 faee 	bl	8007bd8 <__multadd>
 80075fc:	f1bb 0f00 	cmp.w	fp, #0
 8007600:	4605      	mov	r5, r0
 8007602:	dc6f      	bgt.n	80076e4 <_dtoa_r+0x974>
 8007604:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007606:	2b02      	cmp	r3, #2
 8007608:	dc49      	bgt.n	800769e <_dtoa_r+0x92e>
 800760a:	e06b      	b.n	80076e4 <_dtoa_r+0x974>
 800760c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800760e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007612:	e73c      	b.n	800748e <_dtoa_r+0x71e>
 8007614:	3fe00000 	.word	0x3fe00000
 8007618:	40240000 	.word	0x40240000
 800761c:	9b08      	ldr	r3, [sp, #32]
 800761e:	1e5c      	subs	r4, r3, #1
 8007620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007622:	42a3      	cmp	r3, r4
 8007624:	db09      	blt.n	800763a <_dtoa_r+0x8ca>
 8007626:	1b1c      	subs	r4, r3, r4
 8007628:	9b08      	ldr	r3, [sp, #32]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f6bf af30 	bge.w	8007490 <_dtoa_r+0x720>
 8007630:	9b04      	ldr	r3, [sp, #16]
 8007632:	9a08      	ldr	r2, [sp, #32]
 8007634:	1a9e      	subs	r6, r3, r2
 8007636:	2300      	movs	r3, #0
 8007638:	e72b      	b.n	8007492 <_dtoa_r+0x722>
 800763a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800763c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800763e:	1ae3      	subs	r3, r4, r3
 8007640:	441a      	add	r2, r3
 8007642:	940a      	str	r4, [sp, #40]	@ 0x28
 8007644:	9e04      	ldr	r6, [sp, #16]
 8007646:	2400      	movs	r4, #0
 8007648:	9b08      	ldr	r3, [sp, #32]
 800764a:	920e      	str	r2, [sp, #56]	@ 0x38
 800764c:	e721      	b.n	8007492 <_dtoa_r+0x722>
 800764e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007650:	9e04      	ldr	r6, [sp, #16]
 8007652:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007654:	e728      	b.n	80074a8 <_dtoa_r+0x738>
 8007656:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800765a:	e751      	b.n	8007500 <_dtoa_r+0x790>
 800765c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800765e:	9903      	ldr	r1, [sp, #12]
 8007660:	e750      	b.n	8007504 <_dtoa_r+0x794>
 8007662:	f8cd 800c 	str.w	r8, [sp, #12]
 8007666:	e751      	b.n	800750c <_dtoa_r+0x79c>
 8007668:	2300      	movs	r3, #0
 800766a:	e779      	b.n	8007560 <_dtoa_r+0x7f0>
 800766c:	9b06      	ldr	r3, [sp, #24]
 800766e:	e777      	b.n	8007560 <_dtoa_r+0x7f0>
 8007670:	2300      	movs	r3, #0
 8007672:	930a      	str	r3, [sp, #40]	@ 0x28
 8007674:	e779      	b.n	800756a <_dtoa_r+0x7fa>
 8007676:	d093      	beq.n	80075a0 <_dtoa_r+0x830>
 8007678:	9a04      	ldr	r2, [sp, #16]
 800767a:	331c      	adds	r3, #28
 800767c:	441a      	add	r2, r3
 800767e:	9204      	str	r2, [sp, #16]
 8007680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007682:	441e      	add	r6, r3
 8007684:	441a      	add	r2, r3
 8007686:	9209      	str	r2, [sp, #36]	@ 0x24
 8007688:	e78a      	b.n	80075a0 <_dtoa_r+0x830>
 800768a:	4603      	mov	r3, r0
 800768c:	e7f4      	b.n	8007678 <_dtoa_r+0x908>
 800768e:	9b08      	ldr	r3, [sp, #32]
 8007690:	46b8      	mov	r8, r7
 8007692:	2b00      	cmp	r3, #0
 8007694:	dc20      	bgt.n	80076d8 <_dtoa_r+0x968>
 8007696:	469b      	mov	fp, r3
 8007698:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800769a:	2b02      	cmp	r3, #2
 800769c:	dd1e      	ble.n	80076dc <_dtoa_r+0x96c>
 800769e:	f1bb 0f00 	cmp.w	fp, #0
 80076a2:	f47f adb1 	bne.w	8007208 <_dtoa_r+0x498>
 80076a6:	4621      	mov	r1, r4
 80076a8:	465b      	mov	r3, fp
 80076aa:	2205      	movs	r2, #5
 80076ac:	4648      	mov	r0, r9
 80076ae:	f000 fa93 	bl	8007bd8 <__multadd>
 80076b2:	4601      	mov	r1, r0
 80076b4:	4604      	mov	r4, r0
 80076b6:	9803      	ldr	r0, [sp, #12]
 80076b8:	f000 fc9e 	bl	8007ff8 <__mcmp>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f77f ada3 	ble.w	8007208 <_dtoa_r+0x498>
 80076c2:	4656      	mov	r6, sl
 80076c4:	2331      	movs	r3, #49	@ 0x31
 80076c6:	f108 0801 	add.w	r8, r8, #1
 80076ca:	f806 3b01 	strb.w	r3, [r6], #1
 80076ce:	e59f      	b.n	8007210 <_dtoa_r+0x4a0>
 80076d0:	46b8      	mov	r8, r7
 80076d2:	9c08      	ldr	r4, [sp, #32]
 80076d4:	4625      	mov	r5, r4
 80076d6:	e7f4      	b.n	80076c2 <_dtoa_r+0x952>
 80076d8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80076dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 8101 	beq.w	80078e6 <_dtoa_r+0xb76>
 80076e4:	2e00      	cmp	r6, #0
 80076e6:	dd05      	ble.n	80076f4 <_dtoa_r+0x984>
 80076e8:	4629      	mov	r1, r5
 80076ea:	4632      	mov	r2, r6
 80076ec:	4648      	mov	r0, r9
 80076ee:	f000 fc17 	bl	8007f20 <__lshift>
 80076f2:	4605      	mov	r5, r0
 80076f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d05c      	beq.n	80077b4 <_dtoa_r+0xa44>
 80076fa:	4648      	mov	r0, r9
 80076fc:	6869      	ldr	r1, [r5, #4]
 80076fe:	f000 fa09 	bl	8007b14 <_Balloc>
 8007702:	4606      	mov	r6, r0
 8007704:	b928      	cbnz	r0, 8007712 <_dtoa_r+0x9a2>
 8007706:	4602      	mov	r2, r0
 8007708:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800770c:	4b80      	ldr	r3, [pc, #512]	@ (8007910 <_dtoa_r+0xba0>)
 800770e:	f7ff bb43 	b.w	8006d98 <_dtoa_r+0x28>
 8007712:	692a      	ldr	r2, [r5, #16]
 8007714:	f105 010c 	add.w	r1, r5, #12
 8007718:	3202      	adds	r2, #2
 800771a:	0092      	lsls	r2, r2, #2
 800771c:	300c      	adds	r0, #12
 800771e:	f001 f961 	bl	80089e4 <memcpy>
 8007722:	2201      	movs	r2, #1
 8007724:	4631      	mov	r1, r6
 8007726:	4648      	mov	r0, r9
 8007728:	f000 fbfa 	bl	8007f20 <__lshift>
 800772c:	462f      	mov	r7, r5
 800772e:	4605      	mov	r5, r0
 8007730:	f10a 0301 	add.w	r3, sl, #1
 8007734:	9304      	str	r3, [sp, #16]
 8007736:	eb0a 030b 	add.w	r3, sl, fp
 800773a:	930a      	str	r3, [sp, #40]	@ 0x28
 800773c:	9b06      	ldr	r3, [sp, #24]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	9309      	str	r3, [sp, #36]	@ 0x24
 8007744:	9b04      	ldr	r3, [sp, #16]
 8007746:	4621      	mov	r1, r4
 8007748:	9803      	ldr	r0, [sp, #12]
 800774a:	f103 3bff 	add.w	fp, r3, #4294967295
 800774e:	f7ff fa86 	bl	8006c5e <quorem>
 8007752:	4603      	mov	r3, r0
 8007754:	4639      	mov	r1, r7
 8007756:	3330      	adds	r3, #48	@ 0x30
 8007758:	9006      	str	r0, [sp, #24]
 800775a:	9803      	ldr	r0, [sp, #12]
 800775c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800775e:	f000 fc4b 	bl	8007ff8 <__mcmp>
 8007762:	462a      	mov	r2, r5
 8007764:	9008      	str	r0, [sp, #32]
 8007766:	4621      	mov	r1, r4
 8007768:	4648      	mov	r0, r9
 800776a:	f000 fc61 	bl	8008030 <__mdiff>
 800776e:	68c2      	ldr	r2, [r0, #12]
 8007770:	4606      	mov	r6, r0
 8007772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007774:	bb02      	cbnz	r2, 80077b8 <_dtoa_r+0xa48>
 8007776:	4601      	mov	r1, r0
 8007778:	9803      	ldr	r0, [sp, #12]
 800777a:	f000 fc3d 	bl	8007ff8 <__mcmp>
 800777e:	4602      	mov	r2, r0
 8007780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007782:	4631      	mov	r1, r6
 8007784:	4648      	mov	r0, r9
 8007786:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800778a:	f000 fa03 	bl	8007b94 <_Bfree>
 800778e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007790:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007792:	9e04      	ldr	r6, [sp, #16]
 8007794:	ea42 0103 	orr.w	r1, r2, r3
 8007798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779a:	4319      	orrs	r1, r3
 800779c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800779e:	d10d      	bne.n	80077bc <_dtoa_r+0xa4c>
 80077a0:	2b39      	cmp	r3, #57	@ 0x39
 80077a2:	d027      	beq.n	80077f4 <_dtoa_r+0xa84>
 80077a4:	9a08      	ldr	r2, [sp, #32]
 80077a6:	2a00      	cmp	r2, #0
 80077a8:	dd01      	ble.n	80077ae <_dtoa_r+0xa3e>
 80077aa:	9b06      	ldr	r3, [sp, #24]
 80077ac:	3331      	adds	r3, #49	@ 0x31
 80077ae:	f88b 3000 	strb.w	r3, [fp]
 80077b2:	e52e      	b.n	8007212 <_dtoa_r+0x4a2>
 80077b4:	4628      	mov	r0, r5
 80077b6:	e7b9      	b.n	800772c <_dtoa_r+0x9bc>
 80077b8:	2201      	movs	r2, #1
 80077ba:	e7e2      	b.n	8007782 <_dtoa_r+0xa12>
 80077bc:	9908      	ldr	r1, [sp, #32]
 80077be:	2900      	cmp	r1, #0
 80077c0:	db04      	blt.n	80077cc <_dtoa_r+0xa5c>
 80077c2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80077c4:	4301      	orrs	r1, r0
 80077c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077c8:	4301      	orrs	r1, r0
 80077ca:	d120      	bne.n	800780e <_dtoa_r+0xa9e>
 80077cc:	2a00      	cmp	r2, #0
 80077ce:	ddee      	ble.n	80077ae <_dtoa_r+0xa3e>
 80077d0:	2201      	movs	r2, #1
 80077d2:	9903      	ldr	r1, [sp, #12]
 80077d4:	4648      	mov	r0, r9
 80077d6:	9304      	str	r3, [sp, #16]
 80077d8:	f000 fba2 	bl	8007f20 <__lshift>
 80077dc:	4621      	mov	r1, r4
 80077de:	9003      	str	r0, [sp, #12]
 80077e0:	f000 fc0a 	bl	8007ff8 <__mcmp>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	dc02      	bgt.n	80077f0 <_dtoa_r+0xa80>
 80077ea:	d1e0      	bne.n	80077ae <_dtoa_r+0xa3e>
 80077ec:	07da      	lsls	r2, r3, #31
 80077ee:	d5de      	bpl.n	80077ae <_dtoa_r+0xa3e>
 80077f0:	2b39      	cmp	r3, #57	@ 0x39
 80077f2:	d1da      	bne.n	80077aa <_dtoa_r+0xa3a>
 80077f4:	2339      	movs	r3, #57	@ 0x39
 80077f6:	f88b 3000 	strb.w	r3, [fp]
 80077fa:	4633      	mov	r3, r6
 80077fc:	461e      	mov	r6, r3
 80077fe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007802:	3b01      	subs	r3, #1
 8007804:	2a39      	cmp	r2, #57	@ 0x39
 8007806:	d04e      	beq.n	80078a6 <_dtoa_r+0xb36>
 8007808:	3201      	adds	r2, #1
 800780a:	701a      	strb	r2, [r3, #0]
 800780c:	e501      	b.n	8007212 <_dtoa_r+0x4a2>
 800780e:	2a00      	cmp	r2, #0
 8007810:	dd03      	ble.n	800781a <_dtoa_r+0xaaa>
 8007812:	2b39      	cmp	r3, #57	@ 0x39
 8007814:	d0ee      	beq.n	80077f4 <_dtoa_r+0xa84>
 8007816:	3301      	adds	r3, #1
 8007818:	e7c9      	b.n	80077ae <_dtoa_r+0xa3e>
 800781a:	9a04      	ldr	r2, [sp, #16]
 800781c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800781e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007822:	428a      	cmp	r2, r1
 8007824:	d028      	beq.n	8007878 <_dtoa_r+0xb08>
 8007826:	2300      	movs	r3, #0
 8007828:	220a      	movs	r2, #10
 800782a:	9903      	ldr	r1, [sp, #12]
 800782c:	4648      	mov	r0, r9
 800782e:	f000 f9d3 	bl	8007bd8 <__multadd>
 8007832:	42af      	cmp	r7, r5
 8007834:	9003      	str	r0, [sp, #12]
 8007836:	f04f 0300 	mov.w	r3, #0
 800783a:	f04f 020a 	mov.w	r2, #10
 800783e:	4639      	mov	r1, r7
 8007840:	4648      	mov	r0, r9
 8007842:	d107      	bne.n	8007854 <_dtoa_r+0xae4>
 8007844:	f000 f9c8 	bl	8007bd8 <__multadd>
 8007848:	4607      	mov	r7, r0
 800784a:	4605      	mov	r5, r0
 800784c:	9b04      	ldr	r3, [sp, #16]
 800784e:	3301      	adds	r3, #1
 8007850:	9304      	str	r3, [sp, #16]
 8007852:	e777      	b.n	8007744 <_dtoa_r+0x9d4>
 8007854:	f000 f9c0 	bl	8007bd8 <__multadd>
 8007858:	4629      	mov	r1, r5
 800785a:	4607      	mov	r7, r0
 800785c:	2300      	movs	r3, #0
 800785e:	220a      	movs	r2, #10
 8007860:	4648      	mov	r0, r9
 8007862:	f000 f9b9 	bl	8007bd8 <__multadd>
 8007866:	4605      	mov	r5, r0
 8007868:	e7f0      	b.n	800784c <_dtoa_r+0xadc>
 800786a:	f1bb 0f00 	cmp.w	fp, #0
 800786e:	bfcc      	ite	gt
 8007870:	465e      	movgt	r6, fp
 8007872:	2601      	movle	r6, #1
 8007874:	2700      	movs	r7, #0
 8007876:	4456      	add	r6, sl
 8007878:	2201      	movs	r2, #1
 800787a:	9903      	ldr	r1, [sp, #12]
 800787c:	4648      	mov	r0, r9
 800787e:	9304      	str	r3, [sp, #16]
 8007880:	f000 fb4e 	bl	8007f20 <__lshift>
 8007884:	4621      	mov	r1, r4
 8007886:	9003      	str	r0, [sp, #12]
 8007888:	f000 fbb6 	bl	8007ff8 <__mcmp>
 800788c:	2800      	cmp	r0, #0
 800788e:	dcb4      	bgt.n	80077fa <_dtoa_r+0xa8a>
 8007890:	d102      	bne.n	8007898 <_dtoa_r+0xb28>
 8007892:	9b04      	ldr	r3, [sp, #16]
 8007894:	07db      	lsls	r3, r3, #31
 8007896:	d4b0      	bmi.n	80077fa <_dtoa_r+0xa8a>
 8007898:	4633      	mov	r3, r6
 800789a:	461e      	mov	r6, r3
 800789c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078a0:	2a30      	cmp	r2, #48	@ 0x30
 80078a2:	d0fa      	beq.n	800789a <_dtoa_r+0xb2a>
 80078a4:	e4b5      	b.n	8007212 <_dtoa_r+0x4a2>
 80078a6:	459a      	cmp	sl, r3
 80078a8:	d1a8      	bne.n	80077fc <_dtoa_r+0xa8c>
 80078aa:	2331      	movs	r3, #49	@ 0x31
 80078ac:	f108 0801 	add.w	r8, r8, #1
 80078b0:	f88a 3000 	strb.w	r3, [sl]
 80078b4:	e4ad      	b.n	8007212 <_dtoa_r+0x4a2>
 80078b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007914 <_dtoa_r+0xba4>
 80078bc:	b11b      	cbz	r3, 80078c6 <_dtoa_r+0xb56>
 80078be:	f10a 0308 	add.w	r3, sl, #8
 80078c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	4650      	mov	r0, sl
 80078c8:	b017      	add	sp, #92	@ 0x5c
 80078ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	f77f ae2e 	ble.w	8007532 <_dtoa_r+0x7c2>
 80078d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80078da:	2001      	movs	r0, #1
 80078dc:	e64d      	b.n	800757a <_dtoa_r+0x80a>
 80078de:	f1bb 0f00 	cmp.w	fp, #0
 80078e2:	f77f aed9 	ble.w	8007698 <_dtoa_r+0x928>
 80078e6:	4656      	mov	r6, sl
 80078e8:	4621      	mov	r1, r4
 80078ea:	9803      	ldr	r0, [sp, #12]
 80078ec:	f7ff f9b7 	bl	8006c5e <quorem>
 80078f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80078f4:	f806 3b01 	strb.w	r3, [r6], #1
 80078f8:	eba6 020a 	sub.w	r2, r6, sl
 80078fc:	4593      	cmp	fp, r2
 80078fe:	ddb4      	ble.n	800786a <_dtoa_r+0xafa>
 8007900:	2300      	movs	r3, #0
 8007902:	220a      	movs	r2, #10
 8007904:	4648      	mov	r0, r9
 8007906:	9903      	ldr	r1, [sp, #12]
 8007908:	f000 f966 	bl	8007bd8 <__multadd>
 800790c:	9003      	str	r0, [sp, #12]
 800790e:	e7eb      	b.n	80078e8 <_dtoa_r+0xb78>
 8007910:	08009717 	.word	0x08009717
 8007914:	0800969b 	.word	0x0800969b

08007918 <_free_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4605      	mov	r5, r0
 800791c:	2900      	cmp	r1, #0
 800791e:	d040      	beq.n	80079a2 <_free_r+0x8a>
 8007920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007924:	1f0c      	subs	r4, r1, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	bfb8      	it	lt
 800792a:	18e4      	addlt	r4, r4, r3
 800792c:	f000 f8e6 	bl	8007afc <__malloc_lock>
 8007930:	4a1c      	ldr	r2, [pc, #112]	@ (80079a4 <_free_r+0x8c>)
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	b933      	cbnz	r3, 8007944 <_free_r+0x2c>
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	6014      	str	r4, [r2, #0]
 800793a:	4628      	mov	r0, r5
 800793c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007940:	f000 b8e2 	b.w	8007b08 <__malloc_unlock>
 8007944:	42a3      	cmp	r3, r4
 8007946:	d908      	bls.n	800795a <_free_r+0x42>
 8007948:	6820      	ldr	r0, [r4, #0]
 800794a:	1821      	adds	r1, r4, r0
 800794c:	428b      	cmp	r3, r1
 800794e:	bf01      	itttt	eq
 8007950:	6819      	ldreq	r1, [r3, #0]
 8007952:	685b      	ldreq	r3, [r3, #4]
 8007954:	1809      	addeq	r1, r1, r0
 8007956:	6021      	streq	r1, [r4, #0]
 8007958:	e7ed      	b.n	8007936 <_free_r+0x1e>
 800795a:	461a      	mov	r2, r3
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b10b      	cbz	r3, 8007964 <_free_r+0x4c>
 8007960:	42a3      	cmp	r3, r4
 8007962:	d9fa      	bls.n	800795a <_free_r+0x42>
 8007964:	6811      	ldr	r1, [r2, #0]
 8007966:	1850      	adds	r0, r2, r1
 8007968:	42a0      	cmp	r0, r4
 800796a:	d10b      	bne.n	8007984 <_free_r+0x6c>
 800796c:	6820      	ldr	r0, [r4, #0]
 800796e:	4401      	add	r1, r0
 8007970:	1850      	adds	r0, r2, r1
 8007972:	4283      	cmp	r3, r0
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	d1e0      	bne.n	800793a <_free_r+0x22>
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4408      	add	r0, r1
 800797e:	6010      	str	r0, [r2, #0]
 8007980:	6053      	str	r3, [r2, #4]
 8007982:	e7da      	b.n	800793a <_free_r+0x22>
 8007984:	d902      	bls.n	800798c <_free_r+0x74>
 8007986:	230c      	movs	r3, #12
 8007988:	602b      	str	r3, [r5, #0]
 800798a:	e7d6      	b.n	800793a <_free_r+0x22>
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	1821      	adds	r1, r4, r0
 8007990:	428b      	cmp	r3, r1
 8007992:	bf01      	itttt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	1809      	addeq	r1, r1, r0
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	6063      	str	r3, [r4, #4]
 800799e:	6054      	str	r4, [r2, #4]
 80079a0:	e7cb      	b.n	800793a <_free_r+0x22>
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	20000d40 	.word	0x20000d40

080079a8 <malloc>:
 80079a8:	4b02      	ldr	r3, [pc, #8]	@ (80079b4 <malloc+0xc>)
 80079aa:	4601      	mov	r1, r0
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	f000 b825 	b.w	80079fc <_malloc_r>
 80079b2:	bf00      	nop
 80079b4:	2000001c 	.word	0x2000001c

080079b8 <sbrk_aligned>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	4e0f      	ldr	r6, [pc, #60]	@ (80079f8 <sbrk_aligned+0x40>)
 80079bc:	460c      	mov	r4, r1
 80079be:	6831      	ldr	r1, [r6, #0]
 80079c0:	4605      	mov	r5, r0
 80079c2:	b911      	cbnz	r1, 80079ca <sbrk_aligned+0x12>
 80079c4:	f000 fffe 	bl	80089c4 <_sbrk_r>
 80079c8:	6030      	str	r0, [r6, #0]
 80079ca:	4621      	mov	r1, r4
 80079cc:	4628      	mov	r0, r5
 80079ce:	f000 fff9 	bl	80089c4 <_sbrk_r>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	d103      	bne.n	80079de <sbrk_aligned+0x26>
 80079d6:	f04f 34ff 	mov.w	r4, #4294967295
 80079da:	4620      	mov	r0, r4
 80079dc:	bd70      	pop	{r4, r5, r6, pc}
 80079de:	1cc4      	adds	r4, r0, #3
 80079e0:	f024 0403 	bic.w	r4, r4, #3
 80079e4:	42a0      	cmp	r0, r4
 80079e6:	d0f8      	beq.n	80079da <sbrk_aligned+0x22>
 80079e8:	1a21      	subs	r1, r4, r0
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 ffea 	bl	80089c4 <_sbrk_r>
 80079f0:	3001      	adds	r0, #1
 80079f2:	d1f2      	bne.n	80079da <sbrk_aligned+0x22>
 80079f4:	e7ef      	b.n	80079d6 <sbrk_aligned+0x1e>
 80079f6:	bf00      	nop
 80079f8:	20000d3c 	.word	0x20000d3c

080079fc <_malloc_r>:
 80079fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a00:	1ccd      	adds	r5, r1, #3
 8007a02:	f025 0503 	bic.w	r5, r5, #3
 8007a06:	3508      	adds	r5, #8
 8007a08:	2d0c      	cmp	r5, #12
 8007a0a:	bf38      	it	cc
 8007a0c:	250c      	movcc	r5, #12
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	4606      	mov	r6, r0
 8007a12:	db01      	blt.n	8007a18 <_malloc_r+0x1c>
 8007a14:	42a9      	cmp	r1, r5
 8007a16:	d904      	bls.n	8007a22 <_malloc_r+0x26>
 8007a18:	230c      	movs	r3, #12
 8007a1a:	6033      	str	r3, [r6, #0]
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007af8 <_malloc_r+0xfc>
 8007a26:	f000 f869 	bl	8007afc <__malloc_lock>
 8007a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a2e:	461c      	mov	r4, r3
 8007a30:	bb44      	cbnz	r4, 8007a84 <_malloc_r+0x88>
 8007a32:	4629      	mov	r1, r5
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff ffbf 	bl	80079b8 <sbrk_aligned>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	d158      	bne.n	8007af2 <_malloc_r+0xf6>
 8007a40:	f8d8 4000 	ldr.w	r4, [r8]
 8007a44:	4627      	mov	r7, r4
 8007a46:	2f00      	cmp	r7, #0
 8007a48:	d143      	bne.n	8007ad2 <_malloc_r+0xd6>
 8007a4a:	2c00      	cmp	r4, #0
 8007a4c:	d04b      	beq.n	8007ae6 <_malloc_r+0xea>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	4639      	mov	r1, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	eb04 0903 	add.w	r9, r4, r3
 8007a58:	f000 ffb4 	bl	80089c4 <_sbrk_r>
 8007a5c:	4581      	cmp	r9, r0
 8007a5e:	d142      	bne.n	8007ae6 <_malloc_r+0xea>
 8007a60:	6821      	ldr	r1, [r4, #0]
 8007a62:	4630      	mov	r0, r6
 8007a64:	1a6d      	subs	r5, r5, r1
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7ff ffa6 	bl	80079b8 <sbrk_aligned>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d03a      	beq.n	8007ae6 <_malloc_r+0xea>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	442b      	add	r3, r5
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	f8d8 3000 	ldr.w	r3, [r8]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	bb62      	cbnz	r2, 8007ad8 <_malloc_r+0xdc>
 8007a7e:	f8c8 7000 	str.w	r7, [r8]
 8007a82:	e00f      	b.n	8007aa4 <_malloc_r+0xa8>
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	1b52      	subs	r2, r2, r5
 8007a88:	d420      	bmi.n	8007acc <_malloc_r+0xd0>
 8007a8a:	2a0b      	cmp	r2, #11
 8007a8c:	d917      	bls.n	8007abe <_malloc_r+0xc2>
 8007a8e:	1961      	adds	r1, r4, r5
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	6025      	str	r5, [r4, #0]
 8007a94:	bf18      	it	ne
 8007a96:	6059      	strne	r1, [r3, #4]
 8007a98:	6863      	ldr	r3, [r4, #4]
 8007a9a:	bf08      	it	eq
 8007a9c:	f8c8 1000 	streq.w	r1, [r8]
 8007aa0:	5162      	str	r2, [r4, r5]
 8007aa2:	604b      	str	r3, [r1, #4]
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f000 f82f 	bl	8007b08 <__malloc_unlock>
 8007aaa:	f104 000b 	add.w	r0, r4, #11
 8007aae:	1d23      	adds	r3, r4, #4
 8007ab0:	f020 0007 	bic.w	r0, r0, #7
 8007ab4:	1ac2      	subs	r2, r0, r3
 8007ab6:	bf1c      	itt	ne
 8007ab8:	1a1b      	subne	r3, r3, r0
 8007aba:	50a3      	strne	r3, [r4, r2]
 8007abc:	e7af      	b.n	8007a1e <_malloc_r+0x22>
 8007abe:	6862      	ldr	r2, [r4, #4]
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	bf0c      	ite	eq
 8007ac4:	f8c8 2000 	streq.w	r2, [r8]
 8007ac8:	605a      	strne	r2, [r3, #4]
 8007aca:	e7eb      	b.n	8007aa4 <_malloc_r+0xa8>
 8007acc:	4623      	mov	r3, r4
 8007ace:	6864      	ldr	r4, [r4, #4]
 8007ad0:	e7ae      	b.n	8007a30 <_malloc_r+0x34>
 8007ad2:	463c      	mov	r4, r7
 8007ad4:	687f      	ldr	r7, [r7, #4]
 8007ad6:	e7b6      	b.n	8007a46 <_malloc_r+0x4a>
 8007ad8:	461a      	mov	r2, r3
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d1fb      	bne.n	8007ad8 <_malloc_r+0xdc>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	6053      	str	r3, [r2, #4]
 8007ae4:	e7de      	b.n	8007aa4 <_malloc_r+0xa8>
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	4630      	mov	r0, r6
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	f000 f80c 	bl	8007b08 <__malloc_unlock>
 8007af0:	e794      	b.n	8007a1c <_malloc_r+0x20>
 8007af2:	6005      	str	r5, [r0, #0]
 8007af4:	e7d6      	b.n	8007aa4 <_malloc_r+0xa8>
 8007af6:	bf00      	nop
 8007af8:	20000d40 	.word	0x20000d40

08007afc <__malloc_lock>:
 8007afc:	4801      	ldr	r0, [pc, #4]	@ (8007b04 <__malloc_lock+0x8>)
 8007afe:	f7ff b89e 	b.w	8006c3e <__retarget_lock_acquire_recursive>
 8007b02:	bf00      	nop
 8007b04:	20000d38 	.word	0x20000d38

08007b08 <__malloc_unlock>:
 8007b08:	4801      	ldr	r0, [pc, #4]	@ (8007b10 <__malloc_unlock+0x8>)
 8007b0a:	f7ff b899 	b.w	8006c40 <__retarget_lock_release_recursive>
 8007b0e:	bf00      	nop
 8007b10:	20000d38 	.word	0x20000d38

08007b14 <_Balloc>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	69c6      	ldr	r6, [r0, #28]
 8007b18:	4604      	mov	r4, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	b976      	cbnz	r6, 8007b3c <_Balloc+0x28>
 8007b1e:	2010      	movs	r0, #16
 8007b20:	f7ff ff42 	bl	80079a8 <malloc>
 8007b24:	4602      	mov	r2, r0
 8007b26:	61e0      	str	r0, [r4, #28]
 8007b28:	b920      	cbnz	r0, 8007b34 <_Balloc+0x20>
 8007b2a:	216b      	movs	r1, #107	@ 0x6b
 8007b2c:	4b17      	ldr	r3, [pc, #92]	@ (8007b8c <_Balloc+0x78>)
 8007b2e:	4818      	ldr	r0, [pc, #96]	@ (8007b90 <_Balloc+0x7c>)
 8007b30:	f000 ff66 	bl	8008a00 <__assert_func>
 8007b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b38:	6006      	str	r6, [r0, #0]
 8007b3a:	60c6      	str	r6, [r0, #12]
 8007b3c:	69e6      	ldr	r6, [r4, #28]
 8007b3e:	68f3      	ldr	r3, [r6, #12]
 8007b40:	b183      	cbz	r3, 8007b64 <_Balloc+0x50>
 8007b42:	69e3      	ldr	r3, [r4, #28]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b4a:	b9b8      	cbnz	r0, 8007b7c <_Balloc+0x68>
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	fa01 f605 	lsl.w	r6, r1, r5
 8007b52:	1d72      	adds	r2, r6, #5
 8007b54:	4620      	mov	r0, r4
 8007b56:	0092      	lsls	r2, r2, #2
 8007b58:	f000 ff70 	bl	8008a3c <_calloc_r>
 8007b5c:	b160      	cbz	r0, 8007b78 <_Balloc+0x64>
 8007b5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b62:	e00e      	b.n	8007b82 <_Balloc+0x6e>
 8007b64:	2221      	movs	r2, #33	@ 0x21
 8007b66:	2104      	movs	r1, #4
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 ff67 	bl	8008a3c <_calloc_r>
 8007b6e:	69e3      	ldr	r3, [r4, #28]
 8007b70:	60f0      	str	r0, [r6, #12]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e4      	bne.n	8007b42 <_Balloc+0x2e>
 8007b78:	2000      	movs	r0, #0
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	6802      	ldr	r2, [r0, #0]
 8007b7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b82:	2300      	movs	r3, #0
 8007b84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b88:	e7f7      	b.n	8007b7a <_Balloc+0x66>
 8007b8a:	bf00      	nop
 8007b8c:	080096a8 	.word	0x080096a8
 8007b90:	08009728 	.word	0x08009728

08007b94 <_Bfree>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	69c6      	ldr	r6, [r0, #28]
 8007b98:	4605      	mov	r5, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	b976      	cbnz	r6, 8007bbc <_Bfree+0x28>
 8007b9e:	2010      	movs	r0, #16
 8007ba0:	f7ff ff02 	bl	80079a8 <malloc>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	61e8      	str	r0, [r5, #28]
 8007ba8:	b920      	cbnz	r0, 8007bb4 <_Bfree+0x20>
 8007baa:	218f      	movs	r1, #143	@ 0x8f
 8007bac:	4b08      	ldr	r3, [pc, #32]	@ (8007bd0 <_Bfree+0x3c>)
 8007bae:	4809      	ldr	r0, [pc, #36]	@ (8007bd4 <_Bfree+0x40>)
 8007bb0:	f000 ff26 	bl	8008a00 <__assert_func>
 8007bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bb8:	6006      	str	r6, [r0, #0]
 8007bba:	60c6      	str	r6, [r0, #12]
 8007bbc:	b13c      	cbz	r4, 8007bce <_Bfree+0x3a>
 8007bbe:	69eb      	ldr	r3, [r5, #28]
 8007bc0:	6862      	ldr	r2, [r4, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bc8:	6021      	str	r1, [r4, #0]
 8007bca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	080096a8 	.word	0x080096a8
 8007bd4:	08009728 	.word	0x08009728

08007bd8 <__multadd>:
 8007bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bdc:	4607      	mov	r7, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	461e      	mov	r6, r3
 8007be2:	2000      	movs	r0, #0
 8007be4:	690d      	ldr	r5, [r1, #16]
 8007be6:	f101 0c14 	add.w	ip, r1, #20
 8007bea:	f8dc 3000 	ldr.w	r3, [ip]
 8007bee:	3001      	adds	r0, #1
 8007bf0:	b299      	uxth	r1, r3
 8007bf2:	fb02 6101 	mla	r1, r2, r1, r6
 8007bf6:	0c1e      	lsrs	r6, r3, #16
 8007bf8:	0c0b      	lsrs	r3, r1, #16
 8007bfa:	fb02 3306 	mla	r3, r2, r6, r3
 8007bfe:	b289      	uxth	r1, r1
 8007c00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c04:	4285      	cmp	r5, r0
 8007c06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c0a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c0e:	dcec      	bgt.n	8007bea <__multadd+0x12>
 8007c10:	b30e      	cbz	r6, 8007c56 <__multadd+0x7e>
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	42ab      	cmp	r3, r5
 8007c16:	dc19      	bgt.n	8007c4c <__multadd+0x74>
 8007c18:	6861      	ldr	r1, [r4, #4]
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	3101      	adds	r1, #1
 8007c1e:	f7ff ff79 	bl	8007b14 <_Balloc>
 8007c22:	4680      	mov	r8, r0
 8007c24:	b928      	cbnz	r0, 8007c32 <__multadd+0x5a>
 8007c26:	4602      	mov	r2, r0
 8007c28:	21ba      	movs	r1, #186	@ 0xba
 8007c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c5c <__multadd+0x84>)
 8007c2c:	480c      	ldr	r0, [pc, #48]	@ (8007c60 <__multadd+0x88>)
 8007c2e:	f000 fee7 	bl	8008a00 <__assert_func>
 8007c32:	6922      	ldr	r2, [r4, #16]
 8007c34:	f104 010c 	add.w	r1, r4, #12
 8007c38:	3202      	adds	r2, #2
 8007c3a:	0092      	lsls	r2, r2, #2
 8007c3c:	300c      	adds	r0, #12
 8007c3e:	f000 fed1 	bl	80089e4 <memcpy>
 8007c42:	4621      	mov	r1, r4
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff ffa5 	bl	8007b94 <_Bfree>
 8007c4a:	4644      	mov	r4, r8
 8007c4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c50:	3501      	adds	r5, #1
 8007c52:	615e      	str	r6, [r3, #20]
 8007c54:	6125      	str	r5, [r4, #16]
 8007c56:	4620      	mov	r0, r4
 8007c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5c:	08009717 	.word	0x08009717
 8007c60:	08009728 	.word	0x08009728

08007c64 <__hi0bits>:
 8007c64:	4603      	mov	r3, r0
 8007c66:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c6a:	bf3a      	itte	cc
 8007c6c:	0403      	lslcc	r3, r0, #16
 8007c6e:	2010      	movcc	r0, #16
 8007c70:	2000      	movcs	r0, #0
 8007c72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c76:	bf3c      	itt	cc
 8007c78:	021b      	lslcc	r3, r3, #8
 8007c7a:	3008      	addcc	r0, #8
 8007c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c80:	bf3c      	itt	cc
 8007c82:	011b      	lslcc	r3, r3, #4
 8007c84:	3004      	addcc	r0, #4
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c8a:	bf3c      	itt	cc
 8007c8c:	009b      	lslcc	r3, r3, #2
 8007c8e:	3002      	addcc	r0, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	db05      	blt.n	8007ca0 <__hi0bits+0x3c>
 8007c94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c98:	f100 0001 	add.w	r0, r0, #1
 8007c9c:	bf08      	it	eq
 8007c9e:	2020      	moveq	r0, #32
 8007ca0:	4770      	bx	lr

08007ca2 <__lo0bits>:
 8007ca2:	6803      	ldr	r3, [r0, #0]
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	f013 0007 	ands.w	r0, r3, #7
 8007caa:	d00b      	beq.n	8007cc4 <__lo0bits+0x22>
 8007cac:	07d9      	lsls	r1, r3, #31
 8007cae:	d421      	bmi.n	8007cf4 <__lo0bits+0x52>
 8007cb0:	0798      	lsls	r0, r3, #30
 8007cb2:	bf49      	itett	mi
 8007cb4:	085b      	lsrmi	r3, r3, #1
 8007cb6:	089b      	lsrpl	r3, r3, #2
 8007cb8:	2001      	movmi	r0, #1
 8007cba:	6013      	strmi	r3, [r2, #0]
 8007cbc:	bf5c      	itt	pl
 8007cbe:	2002      	movpl	r0, #2
 8007cc0:	6013      	strpl	r3, [r2, #0]
 8007cc2:	4770      	bx	lr
 8007cc4:	b299      	uxth	r1, r3
 8007cc6:	b909      	cbnz	r1, 8007ccc <__lo0bits+0x2a>
 8007cc8:	2010      	movs	r0, #16
 8007cca:	0c1b      	lsrs	r3, r3, #16
 8007ccc:	b2d9      	uxtb	r1, r3
 8007cce:	b909      	cbnz	r1, 8007cd4 <__lo0bits+0x32>
 8007cd0:	3008      	adds	r0, #8
 8007cd2:	0a1b      	lsrs	r3, r3, #8
 8007cd4:	0719      	lsls	r1, r3, #28
 8007cd6:	bf04      	itt	eq
 8007cd8:	091b      	lsreq	r3, r3, #4
 8007cda:	3004      	addeq	r0, #4
 8007cdc:	0799      	lsls	r1, r3, #30
 8007cde:	bf04      	itt	eq
 8007ce0:	089b      	lsreq	r3, r3, #2
 8007ce2:	3002      	addeq	r0, #2
 8007ce4:	07d9      	lsls	r1, r3, #31
 8007ce6:	d403      	bmi.n	8007cf0 <__lo0bits+0x4e>
 8007ce8:	085b      	lsrs	r3, r3, #1
 8007cea:	f100 0001 	add.w	r0, r0, #1
 8007cee:	d003      	beq.n	8007cf8 <__lo0bits+0x56>
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	4770      	bx	lr
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	4770      	bx	lr
 8007cf8:	2020      	movs	r0, #32
 8007cfa:	4770      	bx	lr

08007cfc <__i2b>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	460c      	mov	r4, r1
 8007d00:	2101      	movs	r1, #1
 8007d02:	f7ff ff07 	bl	8007b14 <_Balloc>
 8007d06:	4602      	mov	r2, r0
 8007d08:	b928      	cbnz	r0, 8007d16 <__i2b+0x1a>
 8007d0a:	f240 1145 	movw	r1, #325	@ 0x145
 8007d0e:	4b04      	ldr	r3, [pc, #16]	@ (8007d20 <__i2b+0x24>)
 8007d10:	4804      	ldr	r0, [pc, #16]	@ (8007d24 <__i2b+0x28>)
 8007d12:	f000 fe75 	bl	8008a00 <__assert_func>
 8007d16:	2301      	movs	r3, #1
 8007d18:	6144      	str	r4, [r0, #20]
 8007d1a:	6103      	str	r3, [r0, #16]
 8007d1c:	bd10      	pop	{r4, pc}
 8007d1e:	bf00      	nop
 8007d20:	08009717 	.word	0x08009717
 8007d24:	08009728 	.word	0x08009728

08007d28 <__multiply>:
 8007d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	4617      	mov	r7, r2
 8007d2e:	690a      	ldr	r2, [r1, #16]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	4689      	mov	r9, r1
 8007d34:	429a      	cmp	r2, r3
 8007d36:	bfa2      	ittt	ge
 8007d38:	463b      	movge	r3, r7
 8007d3a:	460f      	movge	r7, r1
 8007d3c:	4699      	movge	r9, r3
 8007d3e:	693d      	ldr	r5, [r7, #16]
 8007d40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	eb05 060a 	add.w	r6, r5, sl
 8007d4c:	42b3      	cmp	r3, r6
 8007d4e:	b085      	sub	sp, #20
 8007d50:	bfb8      	it	lt
 8007d52:	3101      	addlt	r1, #1
 8007d54:	f7ff fede 	bl	8007b14 <_Balloc>
 8007d58:	b930      	cbnz	r0, 8007d68 <__multiply+0x40>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d60:	4b40      	ldr	r3, [pc, #256]	@ (8007e64 <__multiply+0x13c>)
 8007d62:	4841      	ldr	r0, [pc, #260]	@ (8007e68 <__multiply+0x140>)
 8007d64:	f000 fe4c 	bl	8008a00 <__assert_func>
 8007d68:	f100 0414 	add.w	r4, r0, #20
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	2200      	movs	r2, #0
 8007d70:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007d74:	4573      	cmp	r3, lr
 8007d76:	d320      	bcc.n	8007dba <__multiply+0x92>
 8007d78:	f107 0814 	add.w	r8, r7, #20
 8007d7c:	f109 0114 	add.w	r1, r9, #20
 8007d80:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007d84:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007d88:	9302      	str	r3, [sp, #8]
 8007d8a:	1beb      	subs	r3, r5, r7
 8007d8c:	3b15      	subs	r3, #21
 8007d8e:	f023 0303 	bic.w	r3, r3, #3
 8007d92:	3304      	adds	r3, #4
 8007d94:	3715      	adds	r7, #21
 8007d96:	42bd      	cmp	r5, r7
 8007d98:	bf38      	it	cc
 8007d9a:	2304      	movcc	r3, #4
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	9b02      	ldr	r3, [sp, #8]
 8007da0:	9103      	str	r1, [sp, #12]
 8007da2:	428b      	cmp	r3, r1
 8007da4:	d80c      	bhi.n	8007dc0 <__multiply+0x98>
 8007da6:	2e00      	cmp	r6, #0
 8007da8:	dd03      	ble.n	8007db2 <__multiply+0x8a>
 8007daa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d055      	beq.n	8007e5e <__multiply+0x136>
 8007db2:	6106      	str	r6, [r0, #16]
 8007db4:	b005      	add	sp, #20
 8007db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dba:	f843 2b04 	str.w	r2, [r3], #4
 8007dbe:	e7d9      	b.n	8007d74 <__multiply+0x4c>
 8007dc0:	f8b1 a000 	ldrh.w	sl, [r1]
 8007dc4:	f1ba 0f00 	cmp.w	sl, #0
 8007dc8:	d01f      	beq.n	8007e0a <__multiply+0xe2>
 8007dca:	46c4      	mov	ip, r8
 8007dcc:	46a1      	mov	r9, r4
 8007dce:	2700      	movs	r7, #0
 8007dd0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007dd4:	f8d9 3000 	ldr.w	r3, [r9]
 8007dd8:	fa1f fb82 	uxth.w	fp, r2
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	fb0a 330b 	mla	r3, sl, fp, r3
 8007de2:	443b      	add	r3, r7
 8007de4:	f8d9 7000 	ldr.w	r7, [r9]
 8007de8:	0c12      	lsrs	r2, r2, #16
 8007dea:	0c3f      	lsrs	r7, r7, #16
 8007dec:	fb0a 7202 	mla	r2, sl, r2, r7
 8007df0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dfa:	4565      	cmp	r5, ip
 8007dfc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007e00:	f849 3b04 	str.w	r3, [r9], #4
 8007e04:	d8e4      	bhi.n	8007dd0 <__multiply+0xa8>
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	50e7      	str	r7, [r4, r3]
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	3104      	adds	r1, #4
 8007e0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e12:	f1b9 0f00 	cmp.w	r9, #0
 8007e16:	d020      	beq.n	8007e5a <__multiply+0x132>
 8007e18:	4647      	mov	r7, r8
 8007e1a:	46a4      	mov	ip, r4
 8007e1c:	f04f 0a00 	mov.w	sl, #0
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	f8b7 b000 	ldrh.w	fp, [r7]
 8007e26:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	fb09 220b 	mla	r2, r9, fp, r2
 8007e30:	4452      	add	r2, sl
 8007e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e36:	f84c 3b04 	str.w	r3, [ip], #4
 8007e3a:	f857 3b04 	ldr.w	r3, [r7], #4
 8007e3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e42:	f8bc 3000 	ldrh.w	r3, [ip]
 8007e46:	42bd      	cmp	r5, r7
 8007e48:	fb09 330a 	mla	r3, r9, sl, r3
 8007e4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007e50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e54:	d8e5      	bhi.n	8007e22 <__multiply+0xfa>
 8007e56:	9a01      	ldr	r2, [sp, #4]
 8007e58:	50a3      	str	r3, [r4, r2]
 8007e5a:	3404      	adds	r4, #4
 8007e5c:	e79f      	b.n	8007d9e <__multiply+0x76>
 8007e5e:	3e01      	subs	r6, #1
 8007e60:	e7a1      	b.n	8007da6 <__multiply+0x7e>
 8007e62:	bf00      	nop
 8007e64:	08009717 	.word	0x08009717
 8007e68:	08009728 	.word	0x08009728

08007e6c <__pow5mult>:
 8007e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e70:	4615      	mov	r5, r2
 8007e72:	f012 0203 	ands.w	r2, r2, #3
 8007e76:	4607      	mov	r7, r0
 8007e78:	460e      	mov	r6, r1
 8007e7a:	d007      	beq.n	8007e8c <__pow5mult+0x20>
 8007e7c:	4c25      	ldr	r4, [pc, #148]	@ (8007f14 <__pow5mult+0xa8>)
 8007e7e:	3a01      	subs	r2, #1
 8007e80:	2300      	movs	r3, #0
 8007e82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e86:	f7ff fea7 	bl	8007bd8 <__multadd>
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	10ad      	asrs	r5, r5, #2
 8007e8e:	d03d      	beq.n	8007f0c <__pow5mult+0xa0>
 8007e90:	69fc      	ldr	r4, [r7, #28]
 8007e92:	b97c      	cbnz	r4, 8007eb4 <__pow5mult+0x48>
 8007e94:	2010      	movs	r0, #16
 8007e96:	f7ff fd87 	bl	80079a8 <malloc>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	61f8      	str	r0, [r7, #28]
 8007e9e:	b928      	cbnz	r0, 8007eac <__pow5mult+0x40>
 8007ea0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8007f18 <__pow5mult+0xac>)
 8007ea6:	481d      	ldr	r0, [pc, #116]	@ (8007f1c <__pow5mult+0xb0>)
 8007ea8:	f000 fdaa 	bl	8008a00 <__assert_func>
 8007eac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007eb0:	6004      	str	r4, [r0, #0]
 8007eb2:	60c4      	str	r4, [r0, #12]
 8007eb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007eb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ebc:	b94c      	cbnz	r4, 8007ed2 <__pow5mult+0x66>
 8007ebe:	f240 2171 	movw	r1, #625	@ 0x271
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f7ff ff1a 	bl	8007cfc <__i2b>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	4604      	mov	r4, r0
 8007ecc:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ed0:	6003      	str	r3, [r0, #0]
 8007ed2:	f04f 0900 	mov.w	r9, #0
 8007ed6:	07eb      	lsls	r3, r5, #31
 8007ed8:	d50a      	bpl.n	8007ef0 <__pow5mult+0x84>
 8007eda:	4631      	mov	r1, r6
 8007edc:	4622      	mov	r2, r4
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f7ff ff22 	bl	8007d28 <__multiply>
 8007ee4:	4680      	mov	r8, r0
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4638      	mov	r0, r7
 8007eea:	f7ff fe53 	bl	8007b94 <_Bfree>
 8007eee:	4646      	mov	r6, r8
 8007ef0:	106d      	asrs	r5, r5, #1
 8007ef2:	d00b      	beq.n	8007f0c <__pow5mult+0xa0>
 8007ef4:	6820      	ldr	r0, [r4, #0]
 8007ef6:	b938      	cbnz	r0, 8007f08 <__pow5mult+0x9c>
 8007ef8:	4622      	mov	r2, r4
 8007efa:	4621      	mov	r1, r4
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7ff ff13 	bl	8007d28 <__multiply>
 8007f02:	6020      	str	r0, [r4, #0]
 8007f04:	f8c0 9000 	str.w	r9, [r0]
 8007f08:	4604      	mov	r4, r0
 8007f0a:	e7e4      	b.n	8007ed6 <__pow5mult+0x6a>
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f12:	bf00      	nop
 8007f14:	080097d8 	.word	0x080097d8
 8007f18:	080096a8 	.word	0x080096a8
 8007f1c:	08009728 	.word	0x08009728

08007f20 <__lshift>:
 8007f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f24:	460c      	mov	r4, r1
 8007f26:	4607      	mov	r7, r0
 8007f28:	4691      	mov	r9, r2
 8007f2a:	6923      	ldr	r3, [r4, #16]
 8007f2c:	6849      	ldr	r1, [r1, #4]
 8007f2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f32:	68a3      	ldr	r3, [r4, #8]
 8007f34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f38:	f108 0601 	add.w	r6, r8, #1
 8007f3c:	42b3      	cmp	r3, r6
 8007f3e:	db0b      	blt.n	8007f58 <__lshift+0x38>
 8007f40:	4638      	mov	r0, r7
 8007f42:	f7ff fde7 	bl	8007b14 <_Balloc>
 8007f46:	4605      	mov	r5, r0
 8007f48:	b948      	cbnz	r0, 8007f5e <__lshift+0x3e>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f50:	4b27      	ldr	r3, [pc, #156]	@ (8007ff0 <__lshift+0xd0>)
 8007f52:	4828      	ldr	r0, [pc, #160]	@ (8007ff4 <__lshift+0xd4>)
 8007f54:	f000 fd54 	bl	8008a00 <__assert_func>
 8007f58:	3101      	adds	r1, #1
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	e7ee      	b.n	8007f3c <__lshift+0x1c>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f100 0114 	add.w	r1, r0, #20
 8007f64:	f100 0210 	add.w	r2, r0, #16
 8007f68:	4618      	mov	r0, r3
 8007f6a:	4553      	cmp	r3, sl
 8007f6c:	db33      	blt.n	8007fd6 <__lshift+0xb6>
 8007f6e:	6920      	ldr	r0, [r4, #16]
 8007f70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f74:	f104 0314 	add.w	r3, r4, #20
 8007f78:	f019 091f 	ands.w	r9, r9, #31
 8007f7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f84:	d02b      	beq.n	8007fde <__lshift+0xbe>
 8007f86:	468a      	mov	sl, r1
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f1c9 0e20 	rsb	lr, r9, #32
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	fa00 f009 	lsl.w	r0, r0, r9
 8007f94:	4310      	orrs	r0, r2
 8007f96:	f84a 0b04 	str.w	r0, [sl], #4
 8007f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f9e:	459c      	cmp	ip, r3
 8007fa0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fa4:	d8f3      	bhi.n	8007f8e <__lshift+0x6e>
 8007fa6:	ebac 0304 	sub.w	r3, ip, r4
 8007faa:	3b15      	subs	r3, #21
 8007fac:	f023 0303 	bic.w	r3, r3, #3
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	f104 0015 	add.w	r0, r4, #21
 8007fb6:	4560      	cmp	r0, ip
 8007fb8:	bf88      	it	hi
 8007fba:	2304      	movhi	r3, #4
 8007fbc:	50ca      	str	r2, [r1, r3]
 8007fbe:	b10a      	cbz	r2, 8007fc4 <__lshift+0xa4>
 8007fc0:	f108 0602 	add.w	r6, r8, #2
 8007fc4:	3e01      	subs	r6, #1
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	4621      	mov	r1, r4
 8007fca:	612e      	str	r6, [r5, #16]
 8007fcc:	f7ff fde2 	bl	8007b94 <_Bfree>
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fda:	3301      	adds	r3, #1
 8007fdc:	e7c5      	b.n	8007f6a <__lshift+0x4a>
 8007fde:	3904      	subs	r1, #4
 8007fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fe4:	459c      	cmp	ip, r3
 8007fe6:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fea:	d8f9      	bhi.n	8007fe0 <__lshift+0xc0>
 8007fec:	e7ea      	b.n	8007fc4 <__lshift+0xa4>
 8007fee:	bf00      	nop
 8007ff0:	08009717 	.word	0x08009717
 8007ff4:	08009728 	.word	0x08009728

08007ff8 <__mcmp>:
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	690a      	ldr	r2, [r1, #16]
 8007ffc:	6900      	ldr	r0, [r0, #16]
 8007ffe:	b530      	push	{r4, r5, lr}
 8008000:	1a80      	subs	r0, r0, r2
 8008002:	d10e      	bne.n	8008022 <__mcmp+0x2a>
 8008004:	3314      	adds	r3, #20
 8008006:	3114      	adds	r1, #20
 8008008:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800800c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008010:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008014:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008018:	4295      	cmp	r5, r2
 800801a:	d003      	beq.n	8008024 <__mcmp+0x2c>
 800801c:	d205      	bcs.n	800802a <__mcmp+0x32>
 800801e:	f04f 30ff 	mov.w	r0, #4294967295
 8008022:	bd30      	pop	{r4, r5, pc}
 8008024:	42a3      	cmp	r3, r4
 8008026:	d3f3      	bcc.n	8008010 <__mcmp+0x18>
 8008028:	e7fb      	b.n	8008022 <__mcmp+0x2a>
 800802a:	2001      	movs	r0, #1
 800802c:	e7f9      	b.n	8008022 <__mcmp+0x2a>
	...

08008030 <__mdiff>:
 8008030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	4689      	mov	r9, r1
 8008036:	4606      	mov	r6, r0
 8008038:	4611      	mov	r1, r2
 800803a:	4648      	mov	r0, r9
 800803c:	4614      	mov	r4, r2
 800803e:	f7ff ffdb 	bl	8007ff8 <__mcmp>
 8008042:	1e05      	subs	r5, r0, #0
 8008044:	d112      	bne.n	800806c <__mdiff+0x3c>
 8008046:	4629      	mov	r1, r5
 8008048:	4630      	mov	r0, r6
 800804a:	f7ff fd63 	bl	8007b14 <_Balloc>
 800804e:	4602      	mov	r2, r0
 8008050:	b928      	cbnz	r0, 800805e <__mdiff+0x2e>
 8008052:	f240 2137 	movw	r1, #567	@ 0x237
 8008056:	4b3e      	ldr	r3, [pc, #248]	@ (8008150 <__mdiff+0x120>)
 8008058:	483e      	ldr	r0, [pc, #248]	@ (8008154 <__mdiff+0x124>)
 800805a:	f000 fcd1 	bl	8008a00 <__assert_func>
 800805e:	2301      	movs	r3, #1
 8008060:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008064:	4610      	mov	r0, r2
 8008066:	b003      	add	sp, #12
 8008068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806c:	bfbc      	itt	lt
 800806e:	464b      	movlt	r3, r9
 8008070:	46a1      	movlt	r9, r4
 8008072:	4630      	mov	r0, r6
 8008074:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008078:	bfba      	itte	lt
 800807a:	461c      	movlt	r4, r3
 800807c:	2501      	movlt	r5, #1
 800807e:	2500      	movge	r5, #0
 8008080:	f7ff fd48 	bl	8007b14 <_Balloc>
 8008084:	4602      	mov	r2, r0
 8008086:	b918      	cbnz	r0, 8008090 <__mdiff+0x60>
 8008088:	f240 2145 	movw	r1, #581	@ 0x245
 800808c:	4b30      	ldr	r3, [pc, #192]	@ (8008150 <__mdiff+0x120>)
 800808e:	e7e3      	b.n	8008058 <__mdiff+0x28>
 8008090:	f100 0b14 	add.w	fp, r0, #20
 8008094:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008098:	f109 0310 	add.w	r3, r9, #16
 800809c:	60c5      	str	r5, [r0, #12]
 800809e:	f04f 0c00 	mov.w	ip, #0
 80080a2:	f109 0514 	add.w	r5, r9, #20
 80080a6:	46d9      	mov	r9, fp
 80080a8:	6926      	ldr	r6, [r4, #16]
 80080aa:	f104 0e14 	add.w	lr, r4, #20
 80080ae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80080b2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	9b01      	ldr	r3, [sp, #4]
 80080ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80080c2:	b281      	uxth	r1, r0
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	fa1f f38a 	uxth.w	r3, sl
 80080ca:	1a5b      	subs	r3, r3, r1
 80080cc:	0c00      	lsrs	r0, r0, #16
 80080ce:	4463      	add	r3, ip
 80080d0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080d4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080d8:	b29b      	uxth	r3, r3
 80080da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080de:	4576      	cmp	r6, lr
 80080e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080e4:	f849 3b04 	str.w	r3, [r9], #4
 80080e8:	d8e6      	bhi.n	80080b8 <__mdiff+0x88>
 80080ea:	1b33      	subs	r3, r6, r4
 80080ec:	3b15      	subs	r3, #21
 80080ee:	f023 0303 	bic.w	r3, r3, #3
 80080f2:	3415      	adds	r4, #21
 80080f4:	3304      	adds	r3, #4
 80080f6:	42a6      	cmp	r6, r4
 80080f8:	bf38      	it	cc
 80080fa:	2304      	movcc	r3, #4
 80080fc:	441d      	add	r5, r3
 80080fe:	445b      	add	r3, fp
 8008100:	461e      	mov	r6, r3
 8008102:	462c      	mov	r4, r5
 8008104:	4544      	cmp	r4, r8
 8008106:	d30e      	bcc.n	8008126 <__mdiff+0xf6>
 8008108:	f108 0103 	add.w	r1, r8, #3
 800810c:	1b49      	subs	r1, r1, r5
 800810e:	f021 0103 	bic.w	r1, r1, #3
 8008112:	3d03      	subs	r5, #3
 8008114:	45a8      	cmp	r8, r5
 8008116:	bf38      	it	cc
 8008118:	2100      	movcc	r1, #0
 800811a:	440b      	add	r3, r1
 800811c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008120:	b199      	cbz	r1, 800814a <__mdiff+0x11a>
 8008122:	6117      	str	r7, [r2, #16]
 8008124:	e79e      	b.n	8008064 <__mdiff+0x34>
 8008126:	46e6      	mov	lr, ip
 8008128:	f854 1b04 	ldr.w	r1, [r4], #4
 800812c:	fa1f fc81 	uxth.w	ip, r1
 8008130:	44f4      	add	ip, lr
 8008132:	0c08      	lsrs	r0, r1, #16
 8008134:	4471      	add	r1, lr
 8008136:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800813a:	b289      	uxth	r1, r1
 800813c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008140:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008144:	f846 1b04 	str.w	r1, [r6], #4
 8008148:	e7dc      	b.n	8008104 <__mdiff+0xd4>
 800814a:	3f01      	subs	r7, #1
 800814c:	e7e6      	b.n	800811c <__mdiff+0xec>
 800814e:	bf00      	nop
 8008150:	08009717 	.word	0x08009717
 8008154:	08009728 	.word	0x08009728

08008158 <__d2b>:
 8008158:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800815c:	2101      	movs	r1, #1
 800815e:	4690      	mov	r8, r2
 8008160:	4699      	mov	r9, r3
 8008162:	9e08      	ldr	r6, [sp, #32]
 8008164:	f7ff fcd6 	bl	8007b14 <_Balloc>
 8008168:	4604      	mov	r4, r0
 800816a:	b930      	cbnz	r0, 800817a <__d2b+0x22>
 800816c:	4602      	mov	r2, r0
 800816e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008172:	4b23      	ldr	r3, [pc, #140]	@ (8008200 <__d2b+0xa8>)
 8008174:	4823      	ldr	r0, [pc, #140]	@ (8008204 <__d2b+0xac>)
 8008176:	f000 fc43 	bl	8008a00 <__assert_func>
 800817a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800817e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008182:	b10d      	cbz	r5, 8008188 <__d2b+0x30>
 8008184:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008188:	9301      	str	r3, [sp, #4]
 800818a:	f1b8 0300 	subs.w	r3, r8, #0
 800818e:	d024      	beq.n	80081da <__d2b+0x82>
 8008190:	4668      	mov	r0, sp
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	f7ff fd85 	bl	8007ca2 <__lo0bits>
 8008198:	e9dd 1200 	ldrd	r1, r2, [sp]
 800819c:	b1d8      	cbz	r0, 80081d6 <__d2b+0x7e>
 800819e:	f1c0 0320 	rsb	r3, r0, #32
 80081a2:	fa02 f303 	lsl.w	r3, r2, r3
 80081a6:	430b      	orrs	r3, r1
 80081a8:	40c2      	lsrs	r2, r0
 80081aa:	6163      	str	r3, [r4, #20]
 80081ac:	9201      	str	r2, [sp, #4]
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bf0c      	ite	eq
 80081b4:	2201      	moveq	r2, #1
 80081b6:	2202      	movne	r2, #2
 80081b8:	61a3      	str	r3, [r4, #24]
 80081ba:	6122      	str	r2, [r4, #16]
 80081bc:	b1ad      	cbz	r5, 80081ea <__d2b+0x92>
 80081be:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80081c2:	4405      	add	r5, r0
 80081c4:	6035      	str	r5, [r6, #0]
 80081c6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80081ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081cc:	6018      	str	r0, [r3, #0]
 80081ce:	4620      	mov	r0, r4
 80081d0:	b002      	add	sp, #8
 80081d2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80081d6:	6161      	str	r1, [r4, #20]
 80081d8:	e7e9      	b.n	80081ae <__d2b+0x56>
 80081da:	a801      	add	r0, sp, #4
 80081dc:	f7ff fd61 	bl	8007ca2 <__lo0bits>
 80081e0:	9b01      	ldr	r3, [sp, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	6163      	str	r3, [r4, #20]
 80081e6:	3020      	adds	r0, #32
 80081e8:	e7e7      	b.n	80081ba <__d2b+0x62>
 80081ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80081ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081f2:	6030      	str	r0, [r6, #0]
 80081f4:	6918      	ldr	r0, [r3, #16]
 80081f6:	f7ff fd35 	bl	8007c64 <__hi0bits>
 80081fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081fe:	e7e4      	b.n	80081ca <__d2b+0x72>
 8008200:	08009717 	.word	0x08009717
 8008204:	08009728 	.word	0x08009728

08008208 <__ssputs_r>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	461f      	mov	r7, r3
 800820e:	688e      	ldr	r6, [r1, #8]
 8008210:	4682      	mov	sl, r0
 8008212:	42be      	cmp	r6, r7
 8008214:	460c      	mov	r4, r1
 8008216:	4690      	mov	r8, r2
 8008218:	680b      	ldr	r3, [r1, #0]
 800821a:	d82d      	bhi.n	8008278 <__ssputs_r+0x70>
 800821c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008220:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008224:	d026      	beq.n	8008274 <__ssputs_r+0x6c>
 8008226:	6965      	ldr	r5, [r4, #20]
 8008228:	6909      	ldr	r1, [r1, #16]
 800822a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800822e:	eba3 0901 	sub.w	r9, r3, r1
 8008232:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008236:	1c7b      	adds	r3, r7, #1
 8008238:	444b      	add	r3, r9
 800823a:	106d      	asrs	r5, r5, #1
 800823c:	429d      	cmp	r5, r3
 800823e:	bf38      	it	cc
 8008240:	461d      	movcc	r5, r3
 8008242:	0553      	lsls	r3, r2, #21
 8008244:	d527      	bpl.n	8008296 <__ssputs_r+0x8e>
 8008246:	4629      	mov	r1, r5
 8008248:	f7ff fbd8 	bl	80079fc <_malloc_r>
 800824c:	4606      	mov	r6, r0
 800824e:	b360      	cbz	r0, 80082aa <__ssputs_r+0xa2>
 8008250:	464a      	mov	r2, r9
 8008252:	6921      	ldr	r1, [r4, #16]
 8008254:	f000 fbc6 	bl	80089e4 <memcpy>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800825e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	6126      	str	r6, [r4, #16]
 8008266:	444e      	add	r6, r9
 8008268:	6026      	str	r6, [r4, #0]
 800826a:	463e      	mov	r6, r7
 800826c:	6165      	str	r5, [r4, #20]
 800826e:	eba5 0509 	sub.w	r5, r5, r9
 8008272:	60a5      	str	r5, [r4, #8]
 8008274:	42be      	cmp	r6, r7
 8008276:	d900      	bls.n	800827a <__ssputs_r+0x72>
 8008278:	463e      	mov	r6, r7
 800827a:	4632      	mov	r2, r6
 800827c:	4641      	mov	r1, r8
 800827e:	6820      	ldr	r0, [r4, #0]
 8008280:	f000 fb63 	bl	800894a <memmove>
 8008284:	2000      	movs	r0, #0
 8008286:	68a3      	ldr	r3, [r4, #8]
 8008288:	1b9b      	subs	r3, r3, r6
 800828a:	60a3      	str	r3, [r4, #8]
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	4433      	add	r3, r6
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	462a      	mov	r2, r5
 8008298:	f000 fbf6 	bl	8008a88 <_realloc_r>
 800829c:	4606      	mov	r6, r0
 800829e:	2800      	cmp	r0, #0
 80082a0:	d1e0      	bne.n	8008264 <__ssputs_r+0x5c>
 80082a2:	4650      	mov	r0, sl
 80082a4:	6921      	ldr	r1, [r4, #16]
 80082a6:	f7ff fb37 	bl	8007918 <_free_r>
 80082aa:	230c      	movs	r3, #12
 80082ac:	f8ca 3000 	str.w	r3, [sl]
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f04f 30ff 	mov.w	r0, #4294967295
 80082b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	e7e9      	b.n	8008292 <__ssputs_r+0x8a>
	...

080082c0 <_svfiprintf_r>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	4698      	mov	r8, r3
 80082c6:	898b      	ldrh	r3, [r1, #12]
 80082c8:	4607      	mov	r7, r0
 80082ca:	061b      	lsls	r3, r3, #24
 80082cc:	460d      	mov	r5, r1
 80082ce:	4614      	mov	r4, r2
 80082d0:	b09d      	sub	sp, #116	@ 0x74
 80082d2:	d510      	bpl.n	80082f6 <_svfiprintf_r+0x36>
 80082d4:	690b      	ldr	r3, [r1, #16]
 80082d6:	b973      	cbnz	r3, 80082f6 <_svfiprintf_r+0x36>
 80082d8:	2140      	movs	r1, #64	@ 0x40
 80082da:	f7ff fb8f 	bl	80079fc <_malloc_r>
 80082de:	6028      	str	r0, [r5, #0]
 80082e0:	6128      	str	r0, [r5, #16]
 80082e2:	b930      	cbnz	r0, 80082f2 <_svfiprintf_r+0x32>
 80082e4:	230c      	movs	r3, #12
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	b01d      	add	sp, #116	@ 0x74
 80082ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f2:	2340      	movs	r3, #64	@ 0x40
 80082f4:	616b      	str	r3, [r5, #20]
 80082f6:	2300      	movs	r3, #0
 80082f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fa:	2320      	movs	r3, #32
 80082fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008300:	2330      	movs	r3, #48	@ 0x30
 8008302:	f04f 0901 	mov.w	r9, #1
 8008306:	f8cd 800c 	str.w	r8, [sp, #12]
 800830a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80084a4 <_svfiprintf_r+0x1e4>
 800830e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008312:	4623      	mov	r3, r4
 8008314:	469a      	mov	sl, r3
 8008316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800831a:	b10a      	cbz	r2, 8008320 <_svfiprintf_r+0x60>
 800831c:	2a25      	cmp	r2, #37	@ 0x25
 800831e:	d1f9      	bne.n	8008314 <_svfiprintf_r+0x54>
 8008320:	ebba 0b04 	subs.w	fp, sl, r4
 8008324:	d00b      	beq.n	800833e <_svfiprintf_r+0x7e>
 8008326:	465b      	mov	r3, fp
 8008328:	4622      	mov	r2, r4
 800832a:	4629      	mov	r1, r5
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ff6b 	bl	8008208 <__ssputs_r>
 8008332:	3001      	adds	r0, #1
 8008334:	f000 80a7 	beq.w	8008486 <_svfiprintf_r+0x1c6>
 8008338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800833a:	445a      	add	r2, fp
 800833c:	9209      	str	r2, [sp, #36]	@ 0x24
 800833e:	f89a 3000 	ldrb.w	r3, [sl]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 809f 	beq.w	8008486 <_svfiprintf_r+0x1c6>
 8008348:	2300      	movs	r3, #0
 800834a:	f04f 32ff 	mov.w	r2, #4294967295
 800834e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008352:	f10a 0a01 	add.w	sl, sl, #1
 8008356:	9304      	str	r3, [sp, #16]
 8008358:	9307      	str	r3, [sp, #28]
 800835a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800835e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008360:	4654      	mov	r4, sl
 8008362:	2205      	movs	r2, #5
 8008364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008368:	484e      	ldr	r0, [pc, #312]	@ (80084a4 <_svfiprintf_r+0x1e4>)
 800836a:	f7fe fc6a 	bl	8006c42 <memchr>
 800836e:	9a04      	ldr	r2, [sp, #16]
 8008370:	b9d8      	cbnz	r0, 80083aa <_svfiprintf_r+0xea>
 8008372:	06d0      	lsls	r0, r2, #27
 8008374:	bf44      	itt	mi
 8008376:	2320      	movmi	r3, #32
 8008378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800837c:	0711      	lsls	r1, r2, #28
 800837e:	bf44      	itt	mi
 8008380:	232b      	movmi	r3, #43	@ 0x2b
 8008382:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008386:	f89a 3000 	ldrb.w	r3, [sl]
 800838a:	2b2a      	cmp	r3, #42	@ 0x2a
 800838c:	d015      	beq.n	80083ba <_svfiprintf_r+0xfa>
 800838e:	4654      	mov	r4, sl
 8008390:	2000      	movs	r0, #0
 8008392:	f04f 0c0a 	mov.w	ip, #10
 8008396:	9a07      	ldr	r2, [sp, #28]
 8008398:	4621      	mov	r1, r4
 800839a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800839e:	3b30      	subs	r3, #48	@ 0x30
 80083a0:	2b09      	cmp	r3, #9
 80083a2:	d94b      	bls.n	800843c <_svfiprintf_r+0x17c>
 80083a4:	b1b0      	cbz	r0, 80083d4 <_svfiprintf_r+0x114>
 80083a6:	9207      	str	r2, [sp, #28]
 80083a8:	e014      	b.n	80083d4 <_svfiprintf_r+0x114>
 80083aa:	eba0 0308 	sub.w	r3, r0, r8
 80083ae:	fa09 f303 	lsl.w	r3, r9, r3
 80083b2:	4313      	orrs	r3, r2
 80083b4:	46a2      	mov	sl, r4
 80083b6:	9304      	str	r3, [sp, #16]
 80083b8:	e7d2      	b.n	8008360 <_svfiprintf_r+0xa0>
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	1d19      	adds	r1, r3, #4
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	9103      	str	r1, [sp, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bfbb      	ittet	lt
 80083c6:	425b      	neglt	r3, r3
 80083c8:	f042 0202 	orrlt.w	r2, r2, #2
 80083cc:	9307      	strge	r3, [sp, #28]
 80083ce:	9307      	strlt	r3, [sp, #28]
 80083d0:	bfb8      	it	lt
 80083d2:	9204      	strlt	r2, [sp, #16]
 80083d4:	7823      	ldrb	r3, [r4, #0]
 80083d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80083d8:	d10a      	bne.n	80083f0 <_svfiprintf_r+0x130>
 80083da:	7863      	ldrb	r3, [r4, #1]
 80083dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80083de:	d132      	bne.n	8008446 <_svfiprintf_r+0x186>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	3402      	adds	r4, #2
 80083e4:	1d1a      	adds	r2, r3, #4
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	9203      	str	r2, [sp, #12]
 80083ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083ee:	9305      	str	r3, [sp, #20]
 80083f0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80084a8 <_svfiprintf_r+0x1e8>
 80083f4:	2203      	movs	r2, #3
 80083f6:	4650      	mov	r0, sl
 80083f8:	7821      	ldrb	r1, [r4, #0]
 80083fa:	f7fe fc22 	bl	8006c42 <memchr>
 80083fe:	b138      	cbz	r0, 8008410 <_svfiprintf_r+0x150>
 8008400:	2240      	movs	r2, #64	@ 0x40
 8008402:	9b04      	ldr	r3, [sp, #16]
 8008404:	eba0 000a 	sub.w	r0, r0, sl
 8008408:	4082      	lsls	r2, r0
 800840a:	4313      	orrs	r3, r2
 800840c:	3401      	adds	r4, #1
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008414:	2206      	movs	r2, #6
 8008416:	4825      	ldr	r0, [pc, #148]	@ (80084ac <_svfiprintf_r+0x1ec>)
 8008418:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800841c:	f7fe fc11 	bl	8006c42 <memchr>
 8008420:	2800      	cmp	r0, #0
 8008422:	d036      	beq.n	8008492 <_svfiprintf_r+0x1d2>
 8008424:	4b22      	ldr	r3, [pc, #136]	@ (80084b0 <_svfiprintf_r+0x1f0>)
 8008426:	bb1b      	cbnz	r3, 8008470 <_svfiprintf_r+0x1b0>
 8008428:	9b03      	ldr	r3, [sp, #12]
 800842a:	3307      	adds	r3, #7
 800842c:	f023 0307 	bic.w	r3, r3, #7
 8008430:	3308      	adds	r3, #8
 8008432:	9303      	str	r3, [sp, #12]
 8008434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008436:	4433      	add	r3, r6
 8008438:	9309      	str	r3, [sp, #36]	@ 0x24
 800843a:	e76a      	b.n	8008312 <_svfiprintf_r+0x52>
 800843c:	460c      	mov	r4, r1
 800843e:	2001      	movs	r0, #1
 8008440:	fb0c 3202 	mla	r2, ip, r2, r3
 8008444:	e7a8      	b.n	8008398 <_svfiprintf_r+0xd8>
 8008446:	2300      	movs	r3, #0
 8008448:	f04f 0c0a 	mov.w	ip, #10
 800844c:	4619      	mov	r1, r3
 800844e:	3401      	adds	r4, #1
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	4620      	mov	r0, r4
 8008454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008458:	3a30      	subs	r2, #48	@ 0x30
 800845a:	2a09      	cmp	r2, #9
 800845c:	d903      	bls.n	8008466 <_svfiprintf_r+0x1a6>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0c6      	beq.n	80083f0 <_svfiprintf_r+0x130>
 8008462:	9105      	str	r1, [sp, #20]
 8008464:	e7c4      	b.n	80083f0 <_svfiprintf_r+0x130>
 8008466:	4604      	mov	r4, r0
 8008468:	2301      	movs	r3, #1
 800846a:	fb0c 2101 	mla	r1, ip, r1, r2
 800846e:	e7f0      	b.n	8008452 <_svfiprintf_r+0x192>
 8008470:	ab03      	add	r3, sp, #12
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	462a      	mov	r2, r5
 8008476:	4638      	mov	r0, r7
 8008478:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <_svfiprintf_r+0x1f4>)
 800847a:	a904      	add	r1, sp, #16
 800847c:	f7fd fd0c 	bl	8005e98 <_printf_float>
 8008480:	1c42      	adds	r2, r0, #1
 8008482:	4606      	mov	r6, r0
 8008484:	d1d6      	bne.n	8008434 <_svfiprintf_r+0x174>
 8008486:	89ab      	ldrh	r3, [r5, #12]
 8008488:	065b      	lsls	r3, r3, #25
 800848a:	f53f af2d 	bmi.w	80082e8 <_svfiprintf_r+0x28>
 800848e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008490:	e72c      	b.n	80082ec <_svfiprintf_r+0x2c>
 8008492:	ab03      	add	r3, sp, #12
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	462a      	mov	r2, r5
 8008498:	4638      	mov	r0, r7
 800849a:	4b06      	ldr	r3, [pc, #24]	@ (80084b4 <_svfiprintf_r+0x1f4>)
 800849c:	a904      	add	r1, sp, #16
 800849e:	f7fd ff99 	bl	80063d4 <_printf_i>
 80084a2:	e7ed      	b.n	8008480 <_svfiprintf_r+0x1c0>
 80084a4:	08009781 	.word	0x08009781
 80084a8:	08009787 	.word	0x08009787
 80084ac:	0800978b 	.word	0x0800978b
 80084b0:	08005e99 	.word	0x08005e99
 80084b4:	08008209 	.word	0x08008209

080084b8 <__sfputc_r>:
 80084b8:	6893      	ldr	r3, [r2, #8]
 80084ba:	b410      	push	{r4}
 80084bc:	3b01      	subs	r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	6093      	str	r3, [r2, #8]
 80084c2:	da07      	bge.n	80084d4 <__sfputc_r+0x1c>
 80084c4:	6994      	ldr	r4, [r2, #24]
 80084c6:	42a3      	cmp	r3, r4
 80084c8:	db01      	blt.n	80084ce <__sfputc_r+0x16>
 80084ca:	290a      	cmp	r1, #10
 80084cc:	d102      	bne.n	80084d4 <__sfputc_r+0x1c>
 80084ce:	bc10      	pop	{r4}
 80084d0:	f7fe ba72 	b.w	80069b8 <__swbuf_r>
 80084d4:	6813      	ldr	r3, [r2, #0]
 80084d6:	1c58      	adds	r0, r3, #1
 80084d8:	6010      	str	r0, [r2, #0]
 80084da:	7019      	strb	r1, [r3, #0]
 80084dc:	4608      	mov	r0, r1
 80084de:	bc10      	pop	{r4}
 80084e0:	4770      	bx	lr

080084e2 <__sfputs_r>:
 80084e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e4:	4606      	mov	r6, r0
 80084e6:	460f      	mov	r7, r1
 80084e8:	4614      	mov	r4, r2
 80084ea:	18d5      	adds	r5, r2, r3
 80084ec:	42ac      	cmp	r4, r5
 80084ee:	d101      	bne.n	80084f4 <__sfputs_r+0x12>
 80084f0:	2000      	movs	r0, #0
 80084f2:	e007      	b.n	8008504 <__sfputs_r+0x22>
 80084f4:	463a      	mov	r2, r7
 80084f6:	4630      	mov	r0, r6
 80084f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084fc:	f7ff ffdc 	bl	80084b8 <__sfputc_r>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d1f3      	bne.n	80084ec <__sfputs_r+0xa>
 8008504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008508 <_vfiprintf_r>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	460d      	mov	r5, r1
 800850e:	4614      	mov	r4, r2
 8008510:	4698      	mov	r8, r3
 8008512:	4606      	mov	r6, r0
 8008514:	b09d      	sub	sp, #116	@ 0x74
 8008516:	b118      	cbz	r0, 8008520 <_vfiprintf_r+0x18>
 8008518:	6a03      	ldr	r3, [r0, #32]
 800851a:	b90b      	cbnz	r3, 8008520 <_vfiprintf_r+0x18>
 800851c:	f7fe f904 	bl	8006728 <__sinit>
 8008520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008522:	07d9      	lsls	r1, r3, #31
 8008524:	d405      	bmi.n	8008532 <_vfiprintf_r+0x2a>
 8008526:	89ab      	ldrh	r3, [r5, #12]
 8008528:	059a      	lsls	r2, r3, #22
 800852a:	d402      	bmi.n	8008532 <_vfiprintf_r+0x2a>
 800852c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800852e:	f7fe fb86 	bl	8006c3e <__retarget_lock_acquire_recursive>
 8008532:	89ab      	ldrh	r3, [r5, #12]
 8008534:	071b      	lsls	r3, r3, #28
 8008536:	d501      	bpl.n	800853c <_vfiprintf_r+0x34>
 8008538:	692b      	ldr	r3, [r5, #16]
 800853a:	b99b      	cbnz	r3, 8008564 <_vfiprintf_r+0x5c>
 800853c:	4629      	mov	r1, r5
 800853e:	4630      	mov	r0, r6
 8008540:	f7fe fa78 	bl	8006a34 <__swsetup_r>
 8008544:	b170      	cbz	r0, 8008564 <_vfiprintf_r+0x5c>
 8008546:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008548:	07dc      	lsls	r4, r3, #31
 800854a:	d504      	bpl.n	8008556 <_vfiprintf_r+0x4e>
 800854c:	f04f 30ff 	mov.w	r0, #4294967295
 8008550:	b01d      	add	sp, #116	@ 0x74
 8008552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	0598      	lsls	r0, r3, #22
 800855a:	d4f7      	bmi.n	800854c <_vfiprintf_r+0x44>
 800855c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800855e:	f7fe fb6f 	bl	8006c40 <__retarget_lock_release_recursive>
 8008562:	e7f3      	b.n	800854c <_vfiprintf_r+0x44>
 8008564:	2300      	movs	r3, #0
 8008566:	9309      	str	r3, [sp, #36]	@ 0x24
 8008568:	2320      	movs	r3, #32
 800856a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800856e:	2330      	movs	r3, #48	@ 0x30
 8008570:	f04f 0901 	mov.w	r9, #1
 8008574:	f8cd 800c 	str.w	r8, [sp, #12]
 8008578:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008724 <_vfiprintf_r+0x21c>
 800857c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008580:	4623      	mov	r3, r4
 8008582:	469a      	mov	sl, r3
 8008584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008588:	b10a      	cbz	r2, 800858e <_vfiprintf_r+0x86>
 800858a:	2a25      	cmp	r2, #37	@ 0x25
 800858c:	d1f9      	bne.n	8008582 <_vfiprintf_r+0x7a>
 800858e:	ebba 0b04 	subs.w	fp, sl, r4
 8008592:	d00b      	beq.n	80085ac <_vfiprintf_r+0xa4>
 8008594:	465b      	mov	r3, fp
 8008596:	4622      	mov	r2, r4
 8008598:	4629      	mov	r1, r5
 800859a:	4630      	mov	r0, r6
 800859c:	f7ff ffa1 	bl	80084e2 <__sfputs_r>
 80085a0:	3001      	adds	r0, #1
 80085a2:	f000 80a7 	beq.w	80086f4 <_vfiprintf_r+0x1ec>
 80085a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085a8:	445a      	add	r2, fp
 80085aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ac:	f89a 3000 	ldrb.w	r3, [sl]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 809f 	beq.w	80086f4 <_vfiprintf_r+0x1ec>
 80085b6:	2300      	movs	r3, #0
 80085b8:	f04f 32ff 	mov.w	r2, #4294967295
 80085bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085c0:	f10a 0a01 	add.w	sl, sl, #1
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	9307      	str	r3, [sp, #28]
 80085c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80085ce:	4654      	mov	r4, sl
 80085d0:	2205      	movs	r2, #5
 80085d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d6:	4853      	ldr	r0, [pc, #332]	@ (8008724 <_vfiprintf_r+0x21c>)
 80085d8:	f7fe fb33 	bl	8006c42 <memchr>
 80085dc:	9a04      	ldr	r2, [sp, #16]
 80085de:	b9d8      	cbnz	r0, 8008618 <_vfiprintf_r+0x110>
 80085e0:	06d1      	lsls	r1, r2, #27
 80085e2:	bf44      	itt	mi
 80085e4:	2320      	movmi	r3, #32
 80085e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085ea:	0713      	lsls	r3, r2, #28
 80085ec:	bf44      	itt	mi
 80085ee:	232b      	movmi	r3, #43	@ 0x2b
 80085f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085f4:	f89a 3000 	ldrb.w	r3, [sl]
 80085f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085fa:	d015      	beq.n	8008628 <_vfiprintf_r+0x120>
 80085fc:	4654      	mov	r4, sl
 80085fe:	2000      	movs	r0, #0
 8008600:	f04f 0c0a 	mov.w	ip, #10
 8008604:	9a07      	ldr	r2, [sp, #28]
 8008606:	4621      	mov	r1, r4
 8008608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800860c:	3b30      	subs	r3, #48	@ 0x30
 800860e:	2b09      	cmp	r3, #9
 8008610:	d94b      	bls.n	80086aa <_vfiprintf_r+0x1a2>
 8008612:	b1b0      	cbz	r0, 8008642 <_vfiprintf_r+0x13a>
 8008614:	9207      	str	r2, [sp, #28]
 8008616:	e014      	b.n	8008642 <_vfiprintf_r+0x13a>
 8008618:	eba0 0308 	sub.w	r3, r0, r8
 800861c:	fa09 f303 	lsl.w	r3, r9, r3
 8008620:	4313      	orrs	r3, r2
 8008622:	46a2      	mov	sl, r4
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	e7d2      	b.n	80085ce <_vfiprintf_r+0xc6>
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	1d19      	adds	r1, r3, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	9103      	str	r1, [sp, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	bfbb      	ittet	lt
 8008634:	425b      	neglt	r3, r3
 8008636:	f042 0202 	orrlt.w	r2, r2, #2
 800863a:	9307      	strge	r3, [sp, #28]
 800863c:	9307      	strlt	r3, [sp, #28]
 800863e:	bfb8      	it	lt
 8008640:	9204      	strlt	r2, [sp, #16]
 8008642:	7823      	ldrb	r3, [r4, #0]
 8008644:	2b2e      	cmp	r3, #46	@ 0x2e
 8008646:	d10a      	bne.n	800865e <_vfiprintf_r+0x156>
 8008648:	7863      	ldrb	r3, [r4, #1]
 800864a:	2b2a      	cmp	r3, #42	@ 0x2a
 800864c:	d132      	bne.n	80086b4 <_vfiprintf_r+0x1ac>
 800864e:	9b03      	ldr	r3, [sp, #12]
 8008650:	3402      	adds	r4, #2
 8008652:	1d1a      	adds	r2, r3, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	9203      	str	r2, [sp, #12]
 8008658:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800865c:	9305      	str	r3, [sp, #20]
 800865e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008728 <_vfiprintf_r+0x220>
 8008662:	2203      	movs	r2, #3
 8008664:	4650      	mov	r0, sl
 8008666:	7821      	ldrb	r1, [r4, #0]
 8008668:	f7fe faeb 	bl	8006c42 <memchr>
 800866c:	b138      	cbz	r0, 800867e <_vfiprintf_r+0x176>
 800866e:	2240      	movs	r2, #64	@ 0x40
 8008670:	9b04      	ldr	r3, [sp, #16]
 8008672:	eba0 000a 	sub.w	r0, r0, sl
 8008676:	4082      	lsls	r2, r0
 8008678:	4313      	orrs	r3, r2
 800867a:	3401      	adds	r4, #1
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008682:	2206      	movs	r2, #6
 8008684:	4829      	ldr	r0, [pc, #164]	@ (800872c <_vfiprintf_r+0x224>)
 8008686:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800868a:	f7fe fada 	bl	8006c42 <memchr>
 800868e:	2800      	cmp	r0, #0
 8008690:	d03f      	beq.n	8008712 <_vfiprintf_r+0x20a>
 8008692:	4b27      	ldr	r3, [pc, #156]	@ (8008730 <_vfiprintf_r+0x228>)
 8008694:	bb1b      	cbnz	r3, 80086de <_vfiprintf_r+0x1d6>
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	3307      	adds	r3, #7
 800869a:	f023 0307 	bic.w	r3, r3, #7
 800869e:	3308      	adds	r3, #8
 80086a0:	9303      	str	r3, [sp, #12]
 80086a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a4:	443b      	add	r3, r7
 80086a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086a8:	e76a      	b.n	8008580 <_vfiprintf_r+0x78>
 80086aa:	460c      	mov	r4, r1
 80086ac:	2001      	movs	r0, #1
 80086ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80086b2:	e7a8      	b.n	8008606 <_vfiprintf_r+0xfe>
 80086b4:	2300      	movs	r3, #0
 80086b6:	f04f 0c0a 	mov.w	ip, #10
 80086ba:	4619      	mov	r1, r3
 80086bc:	3401      	adds	r4, #1
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	4620      	mov	r0, r4
 80086c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086c6:	3a30      	subs	r2, #48	@ 0x30
 80086c8:	2a09      	cmp	r2, #9
 80086ca:	d903      	bls.n	80086d4 <_vfiprintf_r+0x1cc>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0c6      	beq.n	800865e <_vfiprintf_r+0x156>
 80086d0:	9105      	str	r1, [sp, #20]
 80086d2:	e7c4      	b.n	800865e <_vfiprintf_r+0x156>
 80086d4:	4604      	mov	r4, r0
 80086d6:	2301      	movs	r3, #1
 80086d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086dc:	e7f0      	b.n	80086c0 <_vfiprintf_r+0x1b8>
 80086de:	ab03      	add	r3, sp, #12
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	462a      	mov	r2, r5
 80086e4:	4630      	mov	r0, r6
 80086e6:	4b13      	ldr	r3, [pc, #76]	@ (8008734 <_vfiprintf_r+0x22c>)
 80086e8:	a904      	add	r1, sp, #16
 80086ea:	f7fd fbd5 	bl	8005e98 <_printf_float>
 80086ee:	4607      	mov	r7, r0
 80086f0:	1c78      	adds	r0, r7, #1
 80086f2:	d1d6      	bne.n	80086a2 <_vfiprintf_r+0x19a>
 80086f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086f6:	07d9      	lsls	r1, r3, #31
 80086f8:	d405      	bmi.n	8008706 <_vfiprintf_r+0x1fe>
 80086fa:	89ab      	ldrh	r3, [r5, #12]
 80086fc:	059a      	lsls	r2, r3, #22
 80086fe:	d402      	bmi.n	8008706 <_vfiprintf_r+0x1fe>
 8008700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008702:	f7fe fa9d 	bl	8006c40 <__retarget_lock_release_recursive>
 8008706:	89ab      	ldrh	r3, [r5, #12]
 8008708:	065b      	lsls	r3, r3, #25
 800870a:	f53f af1f 	bmi.w	800854c <_vfiprintf_r+0x44>
 800870e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008710:	e71e      	b.n	8008550 <_vfiprintf_r+0x48>
 8008712:	ab03      	add	r3, sp, #12
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	462a      	mov	r2, r5
 8008718:	4630      	mov	r0, r6
 800871a:	4b06      	ldr	r3, [pc, #24]	@ (8008734 <_vfiprintf_r+0x22c>)
 800871c:	a904      	add	r1, sp, #16
 800871e:	f7fd fe59 	bl	80063d4 <_printf_i>
 8008722:	e7e4      	b.n	80086ee <_vfiprintf_r+0x1e6>
 8008724:	08009781 	.word	0x08009781
 8008728:	08009787 	.word	0x08009787
 800872c:	0800978b 	.word	0x0800978b
 8008730:	08005e99 	.word	0x08005e99
 8008734:	080084e3 	.word	0x080084e3

08008738 <__sflush_r>:
 8008738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	0716      	lsls	r6, r2, #28
 8008740:	4605      	mov	r5, r0
 8008742:	460c      	mov	r4, r1
 8008744:	d454      	bmi.n	80087f0 <__sflush_r+0xb8>
 8008746:	684b      	ldr	r3, [r1, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	dc02      	bgt.n	8008752 <__sflush_r+0x1a>
 800874c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	dd48      	ble.n	80087e4 <__sflush_r+0xac>
 8008752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008754:	2e00      	cmp	r6, #0
 8008756:	d045      	beq.n	80087e4 <__sflush_r+0xac>
 8008758:	2300      	movs	r3, #0
 800875a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800875e:	682f      	ldr	r7, [r5, #0]
 8008760:	6a21      	ldr	r1, [r4, #32]
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	d030      	beq.n	80087c8 <__sflush_r+0x90>
 8008766:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	0759      	lsls	r1, r3, #29
 800876c:	d505      	bpl.n	800877a <__sflush_r+0x42>
 800876e:	6863      	ldr	r3, [r4, #4]
 8008770:	1ad2      	subs	r2, r2, r3
 8008772:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008774:	b10b      	cbz	r3, 800877a <__sflush_r+0x42>
 8008776:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008778:	1ad2      	subs	r2, r2, r3
 800877a:	2300      	movs	r3, #0
 800877c:	4628      	mov	r0, r5
 800877e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008780:	6a21      	ldr	r1, [r4, #32]
 8008782:	47b0      	blx	r6
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	d106      	bne.n	8008798 <__sflush_r+0x60>
 800878a:	6829      	ldr	r1, [r5, #0]
 800878c:	291d      	cmp	r1, #29
 800878e:	d82b      	bhi.n	80087e8 <__sflush_r+0xb0>
 8008790:	4a28      	ldr	r2, [pc, #160]	@ (8008834 <__sflush_r+0xfc>)
 8008792:	40ca      	lsrs	r2, r1
 8008794:	07d6      	lsls	r6, r2, #31
 8008796:	d527      	bpl.n	80087e8 <__sflush_r+0xb0>
 8008798:	2200      	movs	r2, #0
 800879a:	6062      	str	r2, [r4, #4]
 800879c:	6922      	ldr	r2, [r4, #16]
 800879e:	04d9      	lsls	r1, r3, #19
 80087a0:	6022      	str	r2, [r4, #0]
 80087a2:	d504      	bpl.n	80087ae <__sflush_r+0x76>
 80087a4:	1c42      	adds	r2, r0, #1
 80087a6:	d101      	bne.n	80087ac <__sflush_r+0x74>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b903      	cbnz	r3, 80087ae <__sflush_r+0x76>
 80087ac:	6560      	str	r0, [r4, #84]	@ 0x54
 80087ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087b0:	602f      	str	r7, [r5, #0]
 80087b2:	b1b9      	cbz	r1, 80087e4 <__sflush_r+0xac>
 80087b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087b8:	4299      	cmp	r1, r3
 80087ba:	d002      	beq.n	80087c2 <__sflush_r+0x8a>
 80087bc:	4628      	mov	r0, r5
 80087be:	f7ff f8ab 	bl	8007918 <_free_r>
 80087c2:	2300      	movs	r3, #0
 80087c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80087c6:	e00d      	b.n	80087e4 <__sflush_r+0xac>
 80087c8:	2301      	movs	r3, #1
 80087ca:	4628      	mov	r0, r5
 80087cc:	47b0      	blx	r6
 80087ce:	4602      	mov	r2, r0
 80087d0:	1c50      	adds	r0, r2, #1
 80087d2:	d1c9      	bne.n	8008768 <__sflush_r+0x30>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0c6      	beq.n	8008768 <__sflush_r+0x30>
 80087da:	2b1d      	cmp	r3, #29
 80087dc:	d001      	beq.n	80087e2 <__sflush_r+0xaa>
 80087de:	2b16      	cmp	r3, #22
 80087e0:	d11d      	bne.n	800881e <__sflush_r+0xe6>
 80087e2:	602f      	str	r7, [r5, #0]
 80087e4:	2000      	movs	r0, #0
 80087e6:	e021      	b.n	800882c <__sflush_r+0xf4>
 80087e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ec:	b21b      	sxth	r3, r3
 80087ee:	e01a      	b.n	8008826 <__sflush_r+0xee>
 80087f0:	690f      	ldr	r7, [r1, #16]
 80087f2:	2f00      	cmp	r7, #0
 80087f4:	d0f6      	beq.n	80087e4 <__sflush_r+0xac>
 80087f6:	0793      	lsls	r3, r2, #30
 80087f8:	bf18      	it	ne
 80087fa:	2300      	movne	r3, #0
 80087fc:	680e      	ldr	r6, [r1, #0]
 80087fe:	bf08      	it	eq
 8008800:	694b      	ldreq	r3, [r1, #20]
 8008802:	1bf6      	subs	r6, r6, r7
 8008804:	600f      	str	r7, [r1, #0]
 8008806:	608b      	str	r3, [r1, #8]
 8008808:	2e00      	cmp	r6, #0
 800880a:	ddeb      	ble.n	80087e4 <__sflush_r+0xac>
 800880c:	4633      	mov	r3, r6
 800880e:	463a      	mov	r2, r7
 8008810:	4628      	mov	r0, r5
 8008812:	6a21      	ldr	r1, [r4, #32]
 8008814:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008818:	47e0      	blx	ip
 800881a:	2800      	cmp	r0, #0
 800881c:	dc07      	bgt.n	800882e <__sflush_r+0xf6>
 800881e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008826:	f04f 30ff 	mov.w	r0, #4294967295
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800882e:	4407      	add	r7, r0
 8008830:	1a36      	subs	r6, r6, r0
 8008832:	e7e9      	b.n	8008808 <__sflush_r+0xd0>
 8008834:	20400001 	.word	0x20400001

08008838 <_fflush_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	690b      	ldr	r3, [r1, #16]
 800883c:	4605      	mov	r5, r0
 800883e:	460c      	mov	r4, r1
 8008840:	b913      	cbnz	r3, 8008848 <_fflush_r+0x10>
 8008842:	2500      	movs	r5, #0
 8008844:	4628      	mov	r0, r5
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	b118      	cbz	r0, 8008852 <_fflush_r+0x1a>
 800884a:	6a03      	ldr	r3, [r0, #32]
 800884c:	b90b      	cbnz	r3, 8008852 <_fflush_r+0x1a>
 800884e:	f7fd ff6b 	bl	8006728 <__sinit>
 8008852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0f3      	beq.n	8008842 <_fflush_r+0xa>
 800885a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800885c:	07d0      	lsls	r0, r2, #31
 800885e:	d404      	bmi.n	800886a <_fflush_r+0x32>
 8008860:	0599      	lsls	r1, r3, #22
 8008862:	d402      	bmi.n	800886a <_fflush_r+0x32>
 8008864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008866:	f7fe f9ea 	bl	8006c3e <__retarget_lock_acquire_recursive>
 800886a:	4628      	mov	r0, r5
 800886c:	4621      	mov	r1, r4
 800886e:	f7ff ff63 	bl	8008738 <__sflush_r>
 8008872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008874:	4605      	mov	r5, r0
 8008876:	07da      	lsls	r2, r3, #31
 8008878:	d4e4      	bmi.n	8008844 <_fflush_r+0xc>
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	059b      	lsls	r3, r3, #22
 800887e:	d4e1      	bmi.n	8008844 <_fflush_r+0xc>
 8008880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008882:	f7fe f9dd 	bl	8006c40 <__retarget_lock_release_recursive>
 8008886:	e7dd      	b.n	8008844 <_fflush_r+0xc>

08008888 <__swhatbuf_r>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	460c      	mov	r4, r1
 800888c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008890:	4615      	mov	r5, r2
 8008892:	2900      	cmp	r1, #0
 8008894:	461e      	mov	r6, r3
 8008896:	b096      	sub	sp, #88	@ 0x58
 8008898:	da0c      	bge.n	80088b4 <__swhatbuf_r+0x2c>
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	2100      	movs	r1, #0
 800889e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088a2:	bf14      	ite	ne
 80088a4:	2340      	movne	r3, #64	@ 0x40
 80088a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088aa:	2000      	movs	r0, #0
 80088ac:	6031      	str	r1, [r6, #0]
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	b016      	add	sp, #88	@ 0x58
 80088b2:	bd70      	pop	{r4, r5, r6, pc}
 80088b4:	466a      	mov	r2, sp
 80088b6:	f000 f863 	bl	8008980 <_fstat_r>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	dbed      	blt.n	800889a <__swhatbuf_r+0x12>
 80088be:	9901      	ldr	r1, [sp, #4]
 80088c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088c8:	4259      	negs	r1, r3
 80088ca:	4159      	adcs	r1, r3
 80088cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088d0:	e7eb      	b.n	80088aa <__swhatbuf_r+0x22>

080088d2 <__smakebuf_r>:
 80088d2:	898b      	ldrh	r3, [r1, #12]
 80088d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088d6:	079d      	lsls	r5, r3, #30
 80088d8:	4606      	mov	r6, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	d507      	bpl.n	80088ee <__smakebuf_r+0x1c>
 80088de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088e2:	6023      	str	r3, [r4, #0]
 80088e4:	6123      	str	r3, [r4, #16]
 80088e6:	2301      	movs	r3, #1
 80088e8:	6163      	str	r3, [r4, #20]
 80088ea:	b003      	add	sp, #12
 80088ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ee:	466a      	mov	r2, sp
 80088f0:	ab01      	add	r3, sp, #4
 80088f2:	f7ff ffc9 	bl	8008888 <__swhatbuf_r>
 80088f6:	9f00      	ldr	r7, [sp, #0]
 80088f8:	4605      	mov	r5, r0
 80088fa:	4639      	mov	r1, r7
 80088fc:	4630      	mov	r0, r6
 80088fe:	f7ff f87d 	bl	80079fc <_malloc_r>
 8008902:	b948      	cbnz	r0, 8008918 <__smakebuf_r+0x46>
 8008904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008908:	059a      	lsls	r2, r3, #22
 800890a:	d4ee      	bmi.n	80088ea <__smakebuf_r+0x18>
 800890c:	f023 0303 	bic.w	r3, r3, #3
 8008910:	f043 0302 	orr.w	r3, r3, #2
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	e7e2      	b.n	80088de <__smakebuf_r+0xc>
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800891e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	9b01      	ldr	r3, [sp, #4]
 8008926:	6020      	str	r0, [r4, #0]
 8008928:	b15b      	cbz	r3, 8008942 <__smakebuf_r+0x70>
 800892a:	4630      	mov	r0, r6
 800892c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008930:	f000 f838 	bl	80089a4 <_isatty_r>
 8008934:	b128      	cbz	r0, 8008942 <__smakebuf_r+0x70>
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	f023 0303 	bic.w	r3, r3, #3
 800893c:	f043 0301 	orr.w	r3, r3, #1
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	431d      	orrs	r5, r3
 8008946:	81a5      	strh	r5, [r4, #12]
 8008948:	e7cf      	b.n	80088ea <__smakebuf_r+0x18>

0800894a <memmove>:
 800894a:	4288      	cmp	r0, r1
 800894c:	b510      	push	{r4, lr}
 800894e:	eb01 0402 	add.w	r4, r1, r2
 8008952:	d902      	bls.n	800895a <memmove+0x10>
 8008954:	4284      	cmp	r4, r0
 8008956:	4623      	mov	r3, r4
 8008958:	d807      	bhi.n	800896a <memmove+0x20>
 800895a:	1e43      	subs	r3, r0, #1
 800895c:	42a1      	cmp	r1, r4
 800895e:	d008      	beq.n	8008972 <memmove+0x28>
 8008960:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008964:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008968:	e7f8      	b.n	800895c <memmove+0x12>
 800896a:	4601      	mov	r1, r0
 800896c:	4402      	add	r2, r0
 800896e:	428a      	cmp	r2, r1
 8008970:	d100      	bne.n	8008974 <memmove+0x2a>
 8008972:	bd10      	pop	{r4, pc}
 8008974:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008978:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800897c:	e7f7      	b.n	800896e <memmove+0x24>
	...

08008980 <_fstat_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	2300      	movs	r3, #0
 8008984:	4d06      	ldr	r5, [pc, #24]	@ (80089a0 <_fstat_r+0x20>)
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	4611      	mov	r1, r2
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	f7fa f87f 	bl	8002a90 <_fstat>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	d102      	bne.n	800899c <_fstat_r+0x1c>
 8008996:	682b      	ldr	r3, [r5, #0]
 8008998:	b103      	cbz	r3, 800899c <_fstat_r+0x1c>
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	bd38      	pop	{r3, r4, r5, pc}
 800899e:	bf00      	nop
 80089a0:	20000d34 	.word	0x20000d34

080089a4 <_isatty_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	2300      	movs	r3, #0
 80089a8:	4d05      	ldr	r5, [pc, #20]	@ (80089c0 <_isatty_r+0x1c>)
 80089aa:	4604      	mov	r4, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	602b      	str	r3, [r5, #0]
 80089b0:	f7fa f87d 	bl	8002aae <_isatty>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_isatty_r+0x1a>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	b103      	cbz	r3, 80089be <_isatty_r+0x1a>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	20000d34 	.word	0x20000d34

080089c4 <_sbrk_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	2300      	movs	r3, #0
 80089c8:	4d05      	ldr	r5, [pc, #20]	@ (80089e0 <_sbrk_r+0x1c>)
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	f7fa f884 	bl	8002adc <_sbrk>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_sbrk_r+0x1a>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_sbrk_r+0x1a>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	20000d34 	.word	0x20000d34

080089e4 <memcpy>:
 80089e4:	440a      	add	r2, r1
 80089e6:	4291      	cmp	r1, r2
 80089e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089ec:	d100      	bne.n	80089f0 <memcpy+0xc>
 80089ee:	4770      	bx	lr
 80089f0:	b510      	push	{r4, lr}
 80089f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089f6:	4291      	cmp	r1, r2
 80089f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089fc:	d1f9      	bne.n	80089f2 <memcpy+0xe>
 80089fe:	bd10      	pop	{r4, pc}

08008a00 <__assert_func>:
 8008a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a02:	4614      	mov	r4, r2
 8008a04:	461a      	mov	r2, r3
 8008a06:	4b09      	ldr	r3, [pc, #36]	@ (8008a2c <__assert_func+0x2c>)
 8008a08:	4605      	mov	r5, r0
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68d8      	ldr	r0, [r3, #12]
 8008a0e:	b14c      	cbz	r4, 8008a24 <__assert_func+0x24>
 8008a10:	4b07      	ldr	r3, [pc, #28]	@ (8008a30 <__assert_func+0x30>)
 8008a12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a16:	9100      	str	r1, [sp, #0]
 8008a18:	462b      	mov	r3, r5
 8008a1a:	4906      	ldr	r1, [pc, #24]	@ (8008a34 <__assert_func+0x34>)
 8008a1c:	f000 f870 	bl	8008b00 <fiprintf>
 8008a20:	f000 f880 	bl	8008b24 <abort>
 8008a24:	4b04      	ldr	r3, [pc, #16]	@ (8008a38 <__assert_func+0x38>)
 8008a26:	461c      	mov	r4, r3
 8008a28:	e7f3      	b.n	8008a12 <__assert_func+0x12>
 8008a2a:	bf00      	nop
 8008a2c:	2000001c 	.word	0x2000001c
 8008a30:	0800979c 	.word	0x0800979c
 8008a34:	080097a9 	.word	0x080097a9
 8008a38:	080097d7 	.word	0x080097d7

08008a3c <_calloc_r>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	fba1 5402 	umull	r5, r4, r1, r2
 8008a42:	b934      	cbnz	r4, 8008a52 <_calloc_r+0x16>
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7fe ffd9 	bl	80079fc <_malloc_r>
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	b928      	cbnz	r0, 8008a5a <_calloc_r+0x1e>
 8008a4e:	4630      	mov	r0, r6
 8008a50:	bd70      	pop	{r4, r5, r6, pc}
 8008a52:	220c      	movs	r2, #12
 8008a54:	2600      	movs	r6, #0
 8008a56:	6002      	str	r2, [r0, #0]
 8008a58:	e7f9      	b.n	8008a4e <_calloc_r+0x12>
 8008a5a:	462a      	mov	r2, r5
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	f7fe f83f 	bl	8006ae0 <memset>
 8008a62:	e7f4      	b.n	8008a4e <_calloc_r+0x12>

08008a64 <__ascii_mbtowc>:
 8008a64:	b082      	sub	sp, #8
 8008a66:	b901      	cbnz	r1, 8008a6a <__ascii_mbtowc+0x6>
 8008a68:	a901      	add	r1, sp, #4
 8008a6a:	b142      	cbz	r2, 8008a7e <__ascii_mbtowc+0x1a>
 8008a6c:	b14b      	cbz	r3, 8008a82 <__ascii_mbtowc+0x1e>
 8008a6e:	7813      	ldrb	r3, [r2, #0]
 8008a70:	600b      	str	r3, [r1, #0]
 8008a72:	7812      	ldrb	r2, [r2, #0]
 8008a74:	1e10      	subs	r0, r2, #0
 8008a76:	bf18      	it	ne
 8008a78:	2001      	movne	r0, #1
 8008a7a:	b002      	add	sp, #8
 8008a7c:	4770      	bx	lr
 8008a7e:	4610      	mov	r0, r2
 8008a80:	e7fb      	b.n	8008a7a <__ascii_mbtowc+0x16>
 8008a82:	f06f 0001 	mvn.w	r0, #1
 8008a86:	e7f8      	b.n	8008a7a <__ascii_mbtowc+0x16>

08008a88 <_realloc_r>:
 8008a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	4614      	mov	r4, r2
 8008a90:	460d      	mov	r5, r1
 8008a92:	b921      	cbnz	r1, 8008a9e <_realloc_r+0x16>
 8008a94:	4611      	mov	r1, r2
 8008a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9a:	f7fe bfaf 	b.w	80079fc <_malloc_r>
 8008a9e:	b92a      	cbnz	r2, 8008aac <_realloc_r+0x24>
 8008aa0:	f7fe ff3a 	bl	8007918 <_free_r>
 8008aa4:	4625      	mov	r5, r4
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aac:	f000 f841 	bl	8008b32 <_malloc_usable_size_r>
 8008ab0:	4284      	cmp	r4, r0
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	d802      	bhi.n	8008abc <_realloc_r+0x34>
 8008ab6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aba:	d8f4      	bhi.n	8008aa6 <_realloc_r+0x1e>
 8008abc:	4621      	mov	r1, r4
 8008abe:	4638      	mov	r0, r7
 8008ac0:	f7fe ff9c 	bl	80079fc <_malloc_r>
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	b908      	cbnz	r0, 8008acc <_realloc_r+0x44>
 8008ac8:	4645      	mov	r5, r8
 8008aca:	e7ec      	b.n	8008aa6 <_realloc_r+0x1e>
 8008acc:	42b4      	cmp	r4, r6
 8008ace:	4622      	mov	r2, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	bf28      	it	cs
 8008ad4:	4632      	movcs	r2, r6
 8008ad6:	f7ff ff85 	bl	80089e4 <memcpy>
 8008ada:	4629      	mov	r1, r5
 8008adc:	4638      	mov	r0, r7
 8008ade:	f7fe ff1b 	bl	8007918 <_free_r>
 8008ae2:	e7f1      	b.n	8008ac8 <_realloc_r+0x40>

08008ae4 <__ascii_wctomb>:
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	4608      	mov	r0, r1
 8008ae8:	b141      	cbz	r1, 8008afc <__ascii_wctomb+0x18>
 8008aea:	2aff      	cmp	r2, #255	@ 0xff
 8008aec:	d904      	bls.n	8008af8 <__ascii_wctomb+0x14>
 8008aee:	228a      	movs	r2, #138	@ 0x8a
 8008af0:	f04f 30ff 	mov.w	r0, #4294967295
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	4770      	bx	lr
 8008af8:	2001      	movs	r0, #1
 8008afa:	700a      	strb	r2, [r1, #0]
 8008afc:	4770      	bx	lr
	...

08008b00 <fiprintf>:
 8008b00:	b40e      	push	{r1, r2, r3}
 8008b02:	b503      	push	{r0, r1, lr}
 8008b04:	4601      	mov	r1, r0
 8008b06:	ab03      	add	r3, sp, #12
 8008b08:	4805      	ldr	r0, [pc, #20]	@ (8008b20 <fiprintf+0x20>)
 8008b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b0e:	6800      	ldr	r0, [r0, #0]
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	f7ff fcf9 	bl	8008508 <_vfiprintf_r>
 8008b16:	b002      	add	sp, #8
 8008b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b1c:	b003      	add	sp, #12
 8008b1e:	4770      	bx	lr
 8008b20:	2000001c 	.word	0x2000001c

08008b24 <abort>:
 8008b24:	2006      	movs	r0, #6
 8008b26:	b508      	push	{r3, lr}
 8008b28:	f000 f834 	bl	8008b94 <raise>
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	f7f9 ff7c 	bl	8002a2a <_exit>

08008b32 <_malloc_usable_size_r>:
 8008b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b36:	1f18      	subs	r0, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bfbc      	itt	lt
 8008b3c:	580b      	ldrlt	r3, [r1, r0]
 8008b3e:	18c0      	addlt	r0, r0, r3
 8008b40:	4770      	bx	lr

08008b42 <_raise_r>:
 8008b42:	291f      	cmp	r1, #31
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4605      	mov	r5, r0
 8008b48:	460c      	mov	r4, r1
 8008b4a:	d904      	bls.n	8008b56 <_raise_r+0x14>
 8008b4c:	2316      	movs	r3, #22
 8008b4e:	6003      	str	r3, [r0, #0]
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
 8008b56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b58:	b112      	cbz	r2, 8008b60 <_raise_r+0x1e>
 8008b5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b5e:	b94b      	cbnz	r3, 8008b74 <_raise_r+0x32>
 8008b60:	4628      	mov	r0, r5
 8008b62:	f000 f831 	bl	8008bc8 <_getpid_r>
 8008b66:	4622      	mov	r2, r4
 8008b68:	4601      	mov	r1, r0
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b70:	f000 b818 	b.w	8008ba4 <_kill_r>
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d00a      	beq.n	8008b8e <_raise_r+0x4c>
 8008b78:	1c59      	adds	r1, r3, #1
 8008b7a:	d103      	bne.n	8008b84 <_raise_r+0x42>
 8008b7c:	2316      	movs	r3, #22
 8008b7e:	6003      	str	r3, [r0, #0]
 8008b80:	2001      	movs	r0, #1
 8008b82:	e7e7      	b.n	8008b54 <_raise_r+0x12>
 8008b84:	2100      	movs	r1, #0
 8008b86:	4620      	mov	r0, r4
 8008b88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b8c:	4798      	blx	r3
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e7e0      	b.n	8008b54 <_raise_r+0x12>
	...

08008b94 <raise>:
 8008b94:	4b02      	ldr	r3, [pc, #8]	@ (8008ba0 <raise+0xc>)
 8008b96:	4601      	mov	r1, r0
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	f7ff bfd2 	b.w	8008b42 <_raise_r>
 8008b9e:	bf00      	nop
 8008ba0:	2000001c 	.word	0x2000001c

08008ba4 <_kill_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	4d06      	ldr	r5, [pc, #24]	@ (8008bc4 <_kill_r+0x20>)
 8008baa:	4604      	mov	r4, r0
 8008bac:	4608      	mov	r0, r1
 8008bae:	4611      	mov	r1, r2
 8008bb0:	602b      	str	r3, [r5, #0]
 8008bb2:	f7f9 ff2a 	bl	8002a0a <_kill>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	d102      	bne.n	8008bc0 <_kill_r+0x1c>
 8008bba:	682b      	ldr	r3, [r5, #0]
 8008bbc:	b103      	cbz	r3, 8008bc0 <_kill_r+0x1c>
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	bd38      	pop	{r3, r4, r5, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20000d34 	.word	0x20000d34

08008bc8 <_getpid_r>:
 8008bc8:	f7f9 bf18 	b.w	80029fc <_getpid>

08008bcc <_init>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr

08008bd8 <_fini>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr


mqtt_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f5c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  08008070  08008070  00009070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089a8  080089a8  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089a8  080089a8  000099a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b0  080089b0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b0  080089b0  000099b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089b4  080089b4  000099b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080089b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b18  200001d4  08008b8c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cec  08008b8c  0000acec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9a3  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002208  00000000  00000000  00014ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00016da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000759  00000000  00000000  00017758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e3d  00000000  00000000  00017eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca89  00000000  00000000  00030cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089374  00000000  00000000  0003d777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6aeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c0  00000000  00000000  000c6b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ca4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008054 	.word	0x08008054

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008054 	.word	0x08008054

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d801      	bhi.n	8000f5e <jsmn_alloc_token+0x1a>
    return NULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e014      	b.n	8000f88 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	1c59      	adds	r1, r3, #1
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	6051      	str	r1, [r2, #4]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000f86:	697b      	ldr	r3, [r7, #20]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000f92:	b480      	push	{r7}
 8000f94:	b085      	sub	sp, #20
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	7afa      	ldrb	r2, [r7, #11]
 8000fa6:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000fd8:	e03f      	b.n	800105a <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b7d      	cmp	r3, #125	@ 0x7d
 8000fe6:	d045      	beq.n	8001074 <jsmn_parse_primitive+0xb0>
 8000fe8:	2b7d      	cmp	r3, #125	@ 0x7d
 8000fea:	dc1c      	bgt.n	8001026 <jsmn_parse_primitive+0x62>
 8000fec:	2b5d      	cmp	r3, #93	@ 0x5d
 8000fee:	d041      	beq.n	8001074 <jsmn_parse_primitive+0xb0>
 8000ff0:	2b5d      	cmp	r3, #93	@ 0x5d
 8000ff2:	dc18      	bgt.n	8001026 <jsmn_parse_primitive+0x62>
 8000ff4:	2b3a      	cmp	r3, #58	@ 0x3a
 8000ff6:	dc16      	bgt.n	8001026 <jsmn_parse_primitive+0x62>
 8000ff8:	2b20      	cmp	r3, #32
 8000ffa:	da04      	bge.n	8001006 <jsmn_parse_primitive+0x42>
 8000ffc:	2b0a      	cmp	r3, #10
 8000ffe:	dc10      	bgt.n	8001022 <jsmn_parse_primitive+0x5e>
 8001000:	2b09      	cmp	r3, #9
 8001002:	da37      	bge.n	8001074 <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8001004:	e00f      	b.n	8001026 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8001006:	3b20      	subs	r3, #32
 8001008:	4a31      	ldr	r2, [pc, #196]	@ (80010d0 <jsmn_parse_primitive+0x10c>)
 800100a:	fa22 f303 	lsr.w	r3, r2, r3
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	bf14      	ite	ne
 8001016:	2301      	movne	r3, #1
 8001018:	2300      	moveq	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d129      	bne.n	8001074 <jsmn_parse_primitive+0xb0>
      break;
 8001020:	e001      	b.n	8001026 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8001022:	2b0d      	cmp	r3, #13
 8001024:	d026      	beq.n	8001074 <jsmn_parse_primitive+0xb0>
      break;
 8001026:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b1f      	cmp	r3, #31
 8001034:	d906      	bls.n	8001044 <jsmn_parse_primitive+0x80>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b7e      	cmp	r3, #126	@ 0x7e
 8001042:	d905      	bls.n	8001050 <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 800104a:	f06f 0301 	mvn.w	r3, #1
 800104e:	e03a      	b.n	80010c6 <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	d909      	bls.n	8001078 <jsmn_parse_primitive+0xb4>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1b3      	bne.n	8000fda <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8001072:	e001      	b.n	8001078 <jsmn_parse_primitive+0xb4>
      goto found;
 8001074:	bf00      	nop
 8001076:	e000      	b.n	800107a <jsmn_parse_primitive+0xb6>
found:
 8001078:	bf00      	nop
  if (tokens == NULL) {
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d106      	bne.n	800108e <jsmn_parse_primitive+0xca>
    parser->pos--;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	1e5a      	subs	r2, r3, #1
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	601a      	str	r2, [r3, #0]
    return 0;
 800108a:	2300      	movs	r3, #0
 800108c:	e01b      	b.n	80010c6 <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 800108e:	6a3a      	ldr	r2, [r7, #32]
 8001090:	6839      	ldr	r1, [r7, #0]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f7ff ff56 	bl	8000f44 <jsmn_alloc_token>
 8001098:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d105      	bne.n	80010ac <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e00c      	b.n	80010c6 <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	2108      	movs	r1, #8
 80010b4:	6938      	ldr	r0, [r7, #16]
 80010b6:	f7ff ff6c 	bl	8000f92 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	601a      	str	r2, [r3, #0]
  return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	04001001 	.word	0x04001001

080010d4 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80010f2:	e0ba      	b.n	800126a <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	4413      	add	r3, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	2b22      	cmp	r3, #34	@ 0x22
 8001104:	d11d      	bne.n	8001142 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <jsmn_parse_string+0x3c>
        return 0;
 800110c:	2300      	movs	r3, #0
 800110e:	e0be      	b.n	800128e <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001110:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001112:	6839      	ldr	r1, [r7, #0]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff15 	bl	8000f44 <jsmn_alloc_token>
 800111a:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d105      	bne.n	800112e <jsmn_parse_string+0x5a>
        parser->pos = start;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	e0af      	b.n	800128e <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2104      	movs	r1, #4
 8001138:	6938      	ldr	r0, [r7, #16]
 800113a:	f7ff ff2a 	bl	8000f92 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 800113e:	2300      	movs	r3, #0
 8001140:	e0a5      	b.n	800128e <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	2b5c      	cmp	r3, #92	@ 0x5c
 8001146:	f040 808b 	bne.w	8001260 <jsmn_parse_string+0x18c>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	f240 8084 	bls.w	8001260 <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b75      	cmp	r3, #117	@ 0x75
 800116e:	dc70      	bgt.n	8001252 <jsmn_parse_string+0x17e>
 8001170:	2b5c      	cmp	r3, #92	@ 0x5c
 8001172:	da04      	bge.n	800117e <jsmn_parse_string+0xaa>
 8001174:	2b22      	cmp	r3, #34	@ 0x22
 8001176:	d072      	beq.n	800125e <jsmn_parse_string+0x18a>
 8001178:	2b2f      	cmp	r3, #47	@ 0x2f
 800117a:	d070      	beq.n	800125e <jsmn_parse_string+0x18a>
 800117c:	e069      	b.n	8001252 <jsmn_parse_string+0x17e>
 800117e:	3b5c      	subs	r3, #92	@ 0x5c
 8001180:	2201      	movs	r2, #1
 8001182:	409a      	lsls	r2, r3
 8001184:	4b44      	ldr	r3, [pc, #272]	@ (8001298 <jsmn_parse_string+0x1c4>)
 8001186:	4013      	ands	r3, r2
 8001188:	2b00      	cmp	r3, #0
 800118a:	bf14      	ite	ne
 800118c:	2301      	movne	r3, #1
 800118e:	2300      	moveq	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d163      	bne.n	800125e <jsmn_parse_string+0x18a>
 8001196:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf14      	ite	ne
 800119e:	2301      	movne	r3, #1
 80011a0:	2300      	moveq	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d054      	beq.n	8001252 <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e037      	b.n	8001228 <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80011c4:	d906      	bls.n	80011d4 <jsmn_parse_string+0x100>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b39      	cmp	r3, #57	@ 0x39
 80011d2:	d921      	bls.n	8001218 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80011de:	2b40      	cmp	r3, #64	@ 0x40
 80011e0:	d906      	bls.n	80011f0 <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b46      	cmp	r3, #70	@ 0x46
 80011ee:	d913      	bls.n	8001218 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80011fa:	2b60      	cmp	r3, #96	@ 0x60
 80011fc:	d906      	bls.n	800120c <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b66      	cmp	r3, #102	@ 0x66
 800120a:	d905      	bls.n	8001218 <jsmn_parse_string+0x144>
            parser->pos = start;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8001212:	f06f 0301 	mvn.w	r3, #1
 8001216:	e03a      	b.n	800128e <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	601a      	str	r2, [r3, #0]
             i++) {
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3301      	adds	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	2b03      	cmp	r3, #3
 800122c:	dc0b      	bgt.n	8001246 <jsmn_parse_string+0x172>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	d906      	bls.n	8001246 <jsmn_parse_string+0x172>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1b8      	bne.n	80011b8 <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	601a      	str	r2, [r3, #0]
        break;
 8001250:	e006      	b.n	8001260 <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8001258:	f06f 0301 	mvn.w	r3, #1
 800125c:	e017      	b.n	800128e <jsmn_parse_string+0x1ba>
        break;
 800125e:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	d907      	bls.n	8001284 <jsmn_parse_string+0x1b0>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f47f af38 	bne.w	80010f4 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 800128a:	f06f 0302 	mvn.w	r3, #2
}
 800128e:	4618      	mov	r0, r3
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	01440441 	.word	0x01440441

0800129c <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	@ 0x30
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80012b0:	e176      	b.n	80015a0 <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	2b7d      	cmp	r3, #125	@ 0x7d
 80012c2:	d06c      	beq.n	800139e <jsmn_parse+0x102>
 80012c4:	2b7d      	cmp	r3, #125	@ 0x7d
 80012c6:	f300 8136 	bgt.w	8001536 <jsmn_parse+0x29a>
 80012ca:	2b7b      	cmp	r3, #123	@ 0x7b
 80012cc:	d030      	beq.n	8001330 <jsmn_parse+0x94>
 80012ce:	2b7b      	cmp	r3, #123	@ 0x7b
 80012d0:	f300 8131 	bgt.w	8001536 <jsmn_parse+0x29a>
 80012d4:	2b5d      	cmp	r3, #93	@ 0x5d
 80012d6:	d062      	beq.n	800139e <jsmn_parse+0x102>
 80012d8:	2b5d      	cmp	r3, #93	@ 0x5d
 80012da:	f300 812c 	bgt.w	8001536 <jsmn_parse+0x29a>
 80012de:	2b5b      	cmp	r3, #91	@ 0x5b
 80012e0:	d026      	beq.n	8001330 <jsmn_parse+0x94>
 80012e2:	2b5b      	cmp	r3, #91	@ 0x5b
 80012e4:	f300 8127 	bgt.w	8001536 <jsmn_parse+0x29a>
 80012e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80012ea:	f000 80d6 	beq.w	800149a <jsmn_parse+0x1fe>
 80012ee:	2b3a      	cmp	r3, #58	@ 0x3a
 80012f0:	f300 8121 	bgt.w	8001536 <jsmn_parse+0x29a>
 80012f4:	2b2c      	cmp	r3, #44	@ 0x2c
 80012f6:	f000 80d7 	beq.w	80014a8 <jsmn_parse+0x20c>
 80012fa:	2b2c      	cmp	r3, #44	@ 0x2c
 80012fc:	f300 811b 	bgt.w	8001536 <jsmn_parse+0x29a>
 8001300:	2b20      	cmp	r3, #32
 8001302:	dc11      	bgt.n	8001328 <jsmn_parse+0x8c>
 8001304:	2b09      	cmp	r3, #9
 8001306:	f2c0 8116 	blt.w	8001536 <jsmn_parse+0x29a>
 800130a:	3b09      	subs	r3, #9
 800130c:	4a91      	ldr	r2, [pc, #580]	@ (8001554 <jsmn_parse+0x2b8>)
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf14      	ite	ne
 800131a:	2301      	movne	r3, #1
 800131c:	2300      	moveq	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	f040 812d 	bne.w	8001580 <jsmn_parse+0x2e4>
 8001326:	e106      	b.n	8001536 <jsmn_parse+0x29a>
 8001328:	2b22      	cmp	r3, #34	@ 0x22
 800132a:	f000 8092 	beq.w	8001452 <jsmn_parse+0x1b6>
 800132e:	e102      	b.n	8001536 <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	3301      	adds	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 8123 	beq.w	8001584 <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 800133e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff fdfe 	bl	8000f44 <jsmn_alloc_token>
 8001348:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
 8001354:	e153      	b.n	80015fe <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d00a      	beq.n	8001376 <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4413      	add	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	2b7b      	cmp	r3, #123	@ 0x7b
 800137a:	d101      	bne.n	8001380 <jsmn_parse+0xe4>
 800137c:	2201      	movs	r2, #1
 800137e:	e000      	b.n	8001382 <jsmn_parse+0xe6>
 8001380:	2202      	movs	r2, #2
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	3b01      	subs	r3, #1
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	609a      	str	r2, [r3, #8]
      break;
 800139c:	e0fb      	b.n	8001596 <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80f1 	beq.w	8001588 <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	2b7d      	cmp	r3, #125	@ 0x7d
 80013aa:	d101      	bne.n	80013b0 <jsmn_parse+0x114>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <jsmn_parse+0x116>
 80013b0:	2302      	movs	r3, #2
 80013b2:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80013bc:	e024      	b.n	8001408 <jsmn_parse+0x16c>
        token = &tokens[i];
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d017      	beq.n	8001402 <jsmn_parse+0x166>
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013da:	d112      	bne.n	8001402 <jsmn_parse+0x166>
          if (token->type != type) {
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	7fba      	ldrb	r2, [r7, #30]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d002      	beq.n	80013ec <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 80013e6:	f06f 0301 	mvn.w	r3, #1
 80013ea:	e108      	b.n	80015fe <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f04f 32ff 	mov.w	r2, #4294967295
 80013f2:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	461a      	mov	r2, r3
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	609a      	str	r2, [r3, #8]
          break;
 8001400:	e005      	b.n	800140e <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	3b01      	subs	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	2b00      	cmp	r3, #0
 800140c:	dad7      	bge.n	80013be <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d119      	bne.n	800144a <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 8001416:	f06f 0301 	mvn.w	r3, #1
 800141a:	e0f0      	b.n	80015fe <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142e:	d009      	beq.n	8001444 <jsmn_parse+0x1a8>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d104      	bne.n	8001444 <jsmn_parse+0x1a8>
          parser->toksuper = i;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800143e:	609a      	str	r2, [r3, #8]
          break;
 8001440:	bf00      	nop
        }
      }
#endif
      break;
 8001442:	e0a8      	b.n	8001596 <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	3b01      	subs	r3, #1
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	2b00      	cmp	r3, #0
 800144e:	dae5      	bge.n	800141c <jsmn_parse+0x180>
      break;
 8001450:	e0a1      	b.n	8001596 <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8001452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff fe39 	bl	80010d4 <jsmn_parse_string>
 8001462:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	da01      	bge.n	800146e <jsmn_parse+0x1d2>
        return r;
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	e0c7      	b.n	80015fe <jsmn_parse+0x362>
      }
      count++;
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	3301      	adds	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	f000 8086 	beq.w	800158c <jsmn_parse+0x2f0>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8082 	beq.w	800158c <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	4413      	add	r3, r2
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	3201      	adds	r2, #1
 8001496:	60da      	str	r2, [r3, #12]
      }
      break;
 8001498:	e078      	b.n	800158c <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	461a      	mov	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	609a      	str	r2, [r3, #8]
      break;
 80014a6:	e076      	b.n	8001596 <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d070      	beq.n	8001590 <jsmn_parse+0x2f4>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b6:	d06b      	beq.n	8001590 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d063      	beq.n	8001590 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d05b      	beq.n	8001590 <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	3b01      	subs	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e0:	e025      	b.n	800152e <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d006      	beq.n	80014fe <jsmn_parse+0x262>
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d114      	bne.n	8001528 <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	4413      	add	r3, r2
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d00c      	beq.n	8001528 <jsmn_parse+0x28c>
 800150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d104      	bne.n	8001528 <jsmn_parse+0x28c>
              parser->toksuper = i;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001522:	609a      	str	r2, [r3, #8]
              break;
 8001524:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8001526:	e033      	b.n	8001590 <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	3b01      	subs	r3, #1
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	2b00      	cmp	r3, #0
 8001532:	dad6      	bge.n	80014e2 <jsmn_parse+0x246>
      break;
 8001534:	e02c      	b.n	8001590 <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8001536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff fd3f 	bl	8000fc4 <jsmn_parse_primitive>
 8001546:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	da04      	bge.n	8001558 <jsmn_parse+0x2bc>
        return r;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	e055      	b.n	80015fe <jsmn_parse+0x362>
 8001552:	bf00      	nop
 8001554:	00800013 	.word	0x00800013
      }
      count++;
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	3301      	adds	r3, #1
 800155c:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001566:	d015      	beq.n	8001594 <jsmn_parse+0x2f8>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d012      	beq.n	8001594 <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	4413      	add	r3, r2
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	3201      	adds	r2, #1
 800157c:	60da      	str	r2, [r3, #12]
      }
      break;
 800157e:	e009      	b.n	8001594 <jsmn_parse+0x2f8>
      break;
 8001580:	bf00      	nop
 8001582:	e008      	b.n	8001596 <jsmn_parse+0x2fa>
        break;
 8001584:	bf00      	nop
 8001586:	e006      	b.n	8001596 <jsmn_parse+0x2fa>
        break;
 8001588:	bf00      	nop
 800158a:	e004      	b.n	8001596 <jsmn_parse+0x2fa>
      break;
 800158c:	bf00      	nop
 800158e:	e002      	b.n	8001596 <jsmn_parse+0x2fa>
      break;
 8001590:	bf00      	nop
 8001592:	e000      	b.n	8001596 <jsmn_parse+0x2fa>
      break;
 8001594:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d907      	bls.n	80015ba <jsmn_parse+0x31e>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f47f ae7c 	bne.w	80012b2 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01d      	beq.n	80015fc <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c8:	e015      	b.n	80015f6 <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d00a      	beq.n	80015f0 <jsmn_parse+0x354>
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d102      	bne.n	80015f0 <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 80015ea:	f06f 0302 	mvn.w	r3, #2
 80015ee:	e006      	b.n	80015fe <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80015f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f2:	3b01      	subs	r3, #1
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	dae6      	bge.n	80015ca <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 80015fc:	6a3b      	ldr	r3, [r7, #32]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3728      	adds	r7, #40	@ 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop

08001608 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f04f 32ff 	mov.w	r2, #4294967295
 8001622:	609a      	str	r2, [r3, #8]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
	...

08001630 <receiveESP>:

#include "app.h"
#include "jsmn.h"

// 데이터 수신 함수
char* receiveESP() {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
	static char lineBuffer[2048] = {0,};
	int pos = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
	signed char ch;
	// 제한시간내에 첫 문자가 도착하지 않으면 타임아웃 반환
	int timeoutReceiveWifi = HAL_GetTick() + 10000;
 800163a:	f001 f983 	bl	8002944 <HAL_GetTick>
 800163e:	4603      	mov	r3, r0
 8001640:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8001644:	3310      	adds	r3, #16
 8001646:	607b      	str	r3, [r7, #4]
	do {
		ch = getUart();
 8001648:	f001 f8a6 	bl	8002798 <getUart>
 800164c:	4603      	mov	r3, r0
 800164e:	72fb      	strb	r3, [r7, #11]
		if(timeoutReceiveWifi < HAL_GetTick()) {
 8001650:	f001 f978 	bl	8002944 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	d901      	bls.n	8001660 <receiveESP+0x30>
			return lineBuffer;
 800165c:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <receiveESP+0xcc>)
 800165e:	e048      	b.n	80016f2 <receiveESP+0xc2>
		}
	} while(ch == 0);
 8001660:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0ef      	beq.n	8001648 <receiveESP+0x18>
	timeoutReceiveWifi = HAL_GetTick() + 3000; // 타임아웃 초기화
 8001668:	f001 f96c 	bl	8002944 <HAL_GetTick>
 800166c:	4603      	mov	r3, r0
 800166e:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8001672:	607b      	str	r3, [r7, #4]
	while(ch != '\r') { // '\r'까지 읽기
 8001674:	e033      	b.n	80016de <receiveESP+0xae>
		if(ch == '\n') {
 8001676:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800167a:	2b0a      	cmp	r3, #10
 800167c:	d102      	bne.n	8001684 <receiveESP+0x54>
			pos = 0; // 새로운 줄의 시작
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	e018      	b.n	80016b6 <receiveESP+0x86>
		}
		else if(ch != 0) { // 유효한 문자만 버퍼에 저장
 8001684:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d014      	beq.n	80016b6 <receiveESP+0x86>
			if(pos >= sizeof(lineBuffer) - 1) { // 버퍼 오버플로우 방지
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8001692:	4293      	cmp	r3, r2
 8001694:	d909      	bls.n	80016aa <receiveESP+0x7a>
				clearBuffer(); // Rx 버퍼 정리
 8001696:	f001 f86d 	bl	8002774 <clearBuffer>
				memset(lineBuffer, 0, 2048);
 800169a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800169e:	2100      	movs	r1, #0
 80016a0:	4816      	ldr	r0, [pc, #88]	@ (80016fc <receiveESP+0xcc>)
 80016a2:	f004 fc61 	bl	8005f68 <memset>
				return lineBuffer; // 에러 반환
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <receiveESP+0xcc>)
 80016a8:	e023      	b.n	80016f2 <receiveESP+0xc2>
			}
			lineBuffer[pos++] = ch;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	60fa      	str	r2, [r7, #12]
 80016b0:	7af9      	ldrb	r1, [r7, #11]
 80016b2:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <receiveESP+0xcc>)
 80016b4:	54d1      	strb	r1, [r2, r3]
		}
		if(timeoutReceiveWifi < HAL_GetTick()) { // 타임아웃 발생 시
 80016b6:	f001 f945 	bl	8002944 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d909      	bls.n	80016d6 <receiveESP+0xa6>
			clearBuffer(); // Rx 버퍼 정리
 80016c2:	f001 f857 	bl	8002774 <clearBuffer>
			memset(lineBuffer, 0, 2048);
 80016c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016ca:	2100      	movs	r1, #0
 80016cc:	480b      	ldr	r0, [pc, #44]	@ (80016fc <receiveESP+0xcc>)
 80016ce:	f004 fc4b 	bl	8005f68 <memset>
			return lineBuffer; // 타임아웃 반환
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <receiveESP+0xcc>)
 80016d4:	e00d      	b.n	80016f2 <receiveESP+0xc2>
		}
		ch = getUart(); // 다음 문자 읽기
 80016d6:	f001 f85f 	bl	8002798 <getUart>
 80016da:	4603      	mov	r3, r0
 80016dc:	72fb      	strb	r3, [r7, #11]
	while(ch != '\r') { // '\r'까지 읽기
 80016de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016e2:	2b0d      	cmp	r3, #13
 80016e4:	d1c7      	bne.n	8001676 <receiveESP+0x46>
	}
	lineBuffer[pos] = '\0'; // 문자열 종료
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <receiveESP+0xcc>)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
	return lineBuffer; // 읽은 데이터 반환
 80016f0:	4b02      	ldr	r3, [pc, #8]	@ (80016fc <receiveESP+0xcc>)
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200001f0 	.word	0x200001f0

08001700 <receivePacketWithHeader>:

// 헤더 찾기
char *receivePacketWithHeader(char *header) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	char *rxData;
	char *result;
	rxData = receiveESP();
 8001708:	f7ff ff92 	bl	8001630 <receiveESP>
 800170c:	60f8      	str	r0, [r7, #12]
	if(strncmp(rxData, header, strlen(header)) == 0) {
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7fe fd1e 	bl	8000150 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f004 fc39 	bl	8005f92 <strncmp>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <receivePacketWithHeader+0x3a>
		result = strchr(rxData, ':');
 8001726:	213a      	movs	r1, #58	@ 0x3a
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f004 fc25 	bl	8005f78 <strchr>
 800172e:	60b8      	str	r0, [r7, #8]
		result++;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3301      	adds	r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
	}
	else
		return 0;
	return result;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	e000      	b.n	800173c <receivePacketWithHeader+0x3c>
		return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <waitForResponse>:

// 수신 대기 함수
bool waitForResponse(char *cmpStr) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	char *rxData;
	int timeout;
	timeout = HAL_GetTick() + 3000;	// system timer(systick)의 값을 읽음(1ms마다 1씩 증가)
 800174c:	f001 f8fa 	bl	8002944 <HAL_GetTick>
 8001750:	4603      	mov	r3, r0
 8001752:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8001756:	60bb      	str	r3, [r7, #8]
	rxData = receiveESP();
 8001758:	f7ff ff6a 	bl	8001630 <receiveESP>
 800175c:	60f8      	str	r0, [r7, #12]
	// 일치하지 않는 위치를 리턴, 일치시 0리턴 strncmp(첫번째 문자열, 두번째 문자열, 비교 개수)
	while(strncmp(rxData, cmpStr, strlen(cmpStr)) != 0) {
 800175e:	e00d      	b.n	800177c <waitForResponse+0x38>
		rxData = receiveESP();
 8001760:	f7ff ff66 	bl	8001630 <receiveESP>
 8001764:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick() > timeout) {
 8001766:	f001 f8ed 	bl	8002944 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	429a      	cmp	r2, r3
 8001770:	d901      	bls.n	8001776 <waitForResponse+0x32>
			return false;
 8001772:	2300      	movs	r3, #0
 8001774:	e00f      	b.n	8001796 <waitForResponse+0x52>
		}
		HAL_Delay(1);
 8001776:	2001      	movs	r0, #1
 8001778:	f001 f8ee 	bl	8002958 <HAL_Delay>
	while(strncmp(rxData, cmpStr, strlen(cmpStr)) != 0) {
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7fe fce7 	bl	8000150 <strlen>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f004 fc02 	bl	8005f92 <strncmp>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1e5      	bne.n	8001760 <waitForResponse+0x1c>
	}
	return true;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <resetESP>:

// esp를 리셋하는 함수
void resetESP() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	printf("AT\r\n");
 80017a6:	481c      	ldr	r0, [pc, #112]	@ (8001818 <resetESP+0x78>)
 80017a8:	f004 faa0 	bl	8005cec <puts>
	HAL_Delay(50);
 80017ac:	2032      	movs	r0, #50	@ 0x32
 80017ae:	f001 f8d3 	bl	8002958 <HAL_Delay>
	clearBuffer();
 80017b2:	f000 ffdf 	bl	8002774 <clearBuffer>
	printf("at+rst\r\n");
 80017b6:	4819      	ldr	r0, [pc, #100]	@ (800181c <resetESP+0x7c>)
 80017b8:	f004 fa98 	bl	8005cec <puts>
	HAL_Delay(3000);
 80017bc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017c0:	f001 f8ca 	bl	8002958 <HAL_Delay>
	int status = waitForResponse("ready");
 80017c4:	4816      	ldr	r0, [pc, #88]	@ (8001820 <resetESP+0x80>)
 80017c6:	f7ff ffbd 	bl	8001744 <waitForResponse>
 80017ca:	4603      	mov	r3, r0
 80017cc:	607b      	str	r3, [r7, #4]
	if(status)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <resetESP+0x3c>
		printf2("-1 receive : ready\r\n");
 80017d4:	4813      	ldr	r0, [pc, #76]	@ (8001824 <resetESP+0x84>)
 80017d6:	f001 f80f 	bl	80027f8 <printf2>
 80017da:	e002      	b.n	80017e2 <resetESP+0x42>
	else
		printf2("-1 receive : ERROR\r\n");
 80017dc:	4812      	ldr	r0, [pc, #72]	@ (8001828 <resetESP+0x88>)
 80017de:	f001 f80b 	bl	80027f8 <printf2>
	clearBuffer();
 80017e2:	f000 ffc7 	bl	8002774 <clearBuffer>
	printf("ate0\r\n");		// echo(에코)를 꺼야 데이터를 보낼때마다 반향되는 문자가 없다.
 80017e6:	4811      	ldr	r0, [pc, #68]	@ (800182c <resetESP+0x8c>)
 80017e8:	f004 fa80 	bl	8005cec <puts>
	status = waitForResponse("OK");
 80017ec:	4810      	ldr	r0, [pc, #64]	@ (8001830 <resetESP+0x90>)
 80017ee:	f7ff ffa9 	bl	8001744 <waitForResponse>
 80017f2:	4603      	mov	r3, r0
 80017f4:	607b      	str	r3, [r7, #4]
	if(status)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <resetESP+0x64>
		printf2("0 receive : OK\r\n");
 80017fc:	480d      	ldr	r0, [pc, #52]	@ (8001834 <resetESP+0x94>)
 80017fe:	f000 fffb 	bl	80027f8 <printf2>
 8001802:	e002      	b.n	800180a <resetESP+0x6a>
	else
		printf2("0 receive : ERROR\r\n");
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <resetESP+0x98>)
 8001806:	f000 fff7 	bl	80027f8 <printf2>
	clearBuffer();
 800180a:	f000 ffb3 	bl	8002774 <clearBuffer>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08008070 	.word	0x08008070
 800181c:	08008074 	.word	0x08008074
 8001820:	0800807c 	.word	0x0800807c
 8001824:	08008084 	.word	0x08008084
 8001828:	0800809c 	.word	0x0800809c
 800182c:	080080b4 	.word	0x080080b4
 8001830:	080080bc 	.word	0x080080bc
 8001834:	080080c0 	.word	0x080080c0
 8001838:	080080d4 	.word	0x080080d4

0800183c <connectAP>:

// ap에 접속하는 함수
void connectAP() {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	// 초기 테스트
	printf("AT\r\n");
 8001842:	482b      	ldr	r0, [pc, #172]	@ (80018f0 <connectAP+0xb4>)
 8001844:	f004 fa52 	bl	8005cec <puts>
	int status = waitForResponse("OK");
 8001848:	482a      	ldr	r0, [pc, #168]	@ (80018f4 <connectAP+0xb8>)
 800184a:	f7ff ff7b 	bl	8001744 <waitForResponse>
 800184e:	4603      	mov	r3, r0
 8001850:	607b      	str	r3, [r7, #4]
	if(status)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <connectAP+0x24>
		printf2("1 receive : OK\r\n");
 8001858:	4827      	ldr	r0, [pc, #156]	@ (80018f8 <connectAP+0xbc>)
 800185a:	f000 ffcd 	bl	80027f8 <printf2>
 800185e:	e002      	b.n	8001866 <connectAP+0x2a>
	else
		printf2("1 receive : ERROR\r\n");
 8001860:	4826      	ldr	r0, [pc, #152]	@ (80018fc <connectAP+0xc0>)
 8001862:	f000 ffc9 	bl	80027f8 <printf2>
	clearBuffer();
 8001866:	f000 ff85 	bl	8002774 <clearBuffer>
	// WIFI 설정
	printf("AT+CWINIT=1\r\n");
 800186a:	4825      	ldr	r0, [pc, #148]	@ (8001900 <connectAP+0xc4>)
 800186c:	f004 fa3e 	bl	8005cec <puts>
	status = waitForResponse("OK");
 8001870:	4820      	ldr	r0, [pc, #128]	@ (80018f4 <connectAP+0xb8>)
 8001872:	f7ff ff67 	bl	8001744 <waitForResponse>
 8001876:	4603      	mov	r3, r0
 8001878:	607b      	str	r3, [r7, #4]
	if(status)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <connectAP+0x4c>
		printf2("2 receive : OK\r\n");
 8001880:	4820      	ldr	r0, [pc, #128]	@ (8001904 <connectAP+0xc8>)
 8001882:	f000 ffb9 	bl	80027f8 <printf2>
 8001886:	e002      	b.n	800188e <connectAP+0x52>
	else
		printf2("2 receive : ERROR\r\n");
 8001888:	481f      	ldr	r0, [pc, #124]	@ (8001908 <connectAP+0xcc>)
 800188a:	f000 ffb5 	bl	80027f8 <printf2>
	clearBuffer();
 800188e:	f000 ff71 	bl	8002774 <clearBuffer>
	// station mode
	printf("AT+CWMODE=1\r\n");
 8001892:	481e      	ldr	r0, [pc, #120]	@ (800190c <connectAP+0xd0>)
 8001894:	f004 fa2a 	bl	8005cec <puts>
	status = waitForResponse("OK");
 8001898:	4816      	ldr	r0, [pc, #88]	@ (80018f4 <connectAP+0xb8>)
 800189a:	f7ff ff53 	bl	8001744 <waitForResponse>
 800189e:	4603      	mov	r3, r0
 80018a0:	607b      	str	r3, [r7, #4]
	if(status)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <connectAP+0x74>
		printf2("3 receive : OK\r\n");
 80018a8:	4819      	ldr	r0, [pc, #100]	@ (8001910 <connectAP+0xd4>)
 80018aa:	f000 ffa5 	bl	80027f8 <printf2>
 80018ae:	e002      	b.n	80018b6 <connectAP+0x7a>
	else
		printf2("3 receive : ERROR\r\n");
 80018b0:	4818      	ldr	r0, [pc, #96]	@ (8001914 <connectAP+0xd8>)
 80018b2:	f000 ffa1 	bl	80027f8 <printf2>
	clearBuffer();
 80018b6:	f000 ff5d 	bl	8002774 <clearBuffer>
	// connection ap
	printf("AT+CWJAP=\"iot_AI\",\"iotiotiot\"\r\n");
 80018ba:	4817      	ldr	r0, [pc, #92]	@ (8001918 <connectAP+0xdc>)
 80018bc:	f004 fa16 	bl	8005cec <puts>
	status = waitForResponse("OK");
 80018c0:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <connectAP+0xb8>)
 80018c2:	f7ff ff3f 	bl	8001744 <waitForResponse>
 80018c6:	4603      	mov	r3, r0
 80018c8:	607b      	str	r3, [r7, #4]
	if(status)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <connectAP+0x9c>
		printf2("4 receive : OK\r\n");
 80018d0:	4812      	ldr	r0, [pc, #72]	@ (800191c <connectAP+0xe0>)
 80018d2:	f000 ff91 	bl	80027f8 <printf2>
 80018d6:	e002      	b.n	80018de <connectAP+0xa2>
	else
		printf2("4 receive : ERROR\r\n");
 80018d8:	4811      	ldr	r0, [pc, #68]	@ (8001920 <connectAP+0xe4>)
 80018da:	f000 ff8d 	bl	80027f8 <printf2>
	HAL_Delay(50);
 80018de:	2032      	movs	r0, #50	@ 0x32
 80018e0:	f001 f83a 	bl	8002958 <HAL_Delay>
	clearBuffer();
 80018e4:	f000 ff46 	bl	8002774 <clearBuffer>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	08008070 	.word	0x08008070
 80018f4:	080080bc 	.word	0x080080bc
 80018f8:	080080e8 	.word	0x080080e8
 80018fc:	080080fc 	.word	0x080080fc
 8001900:	08008110 	.word	0x08008110
 8001904:	08008120 	.word	0x08008120
 8001908:	08008134 	.word	0x08008134
 800190c:	08008148 	.word	0x08008148
 8001910:	08008158 	.word	0x08008158
 8001914:	0800816c 	.word	0x0800816c
 8001918:	08008180 	.word	0x08008180
 800191c:	080081a0 	.word	0x080081a0
 8001920:	080081b4 	.word	0x080081b4

08001924 <connectMQTT>:
	char rxData = receiveESP();
	printf2(receivePacketWithHeader("+IPD"));
}

// MQTT 서버 접속
void connectMQTT() {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
	printf("AT\r\n");
 800192a:	482a      	ldr	r0, [pc, #168]	@ (80019d4 <connectMQTT+0xb0>)
 800192c:	f004 f9de 	bl	8005cec <puts>
	HAL_Delay(10);
 8001930:	200a      	movs	r0, #10
 8001932:	f001 f811 	bl	8002958 <HAL_Delay>
	clearBuffer();
 8001936:	f000 ff1d 	bl	8002774 <clearBuffer>
	printf("AT+CIPMUX=1\r\n");	// 다중 접속 모드 활성, 이후 소켓 번호로 할당됨
 800193a:	4827      	ldr	r0, [pc, #156]	@ (80019d8 <connectMQTT+0xb4>)
 800193c:	f004 f9d6 	bl	8005cec <puts>
	HAL_Delay(50);
 8001940:	2032      	movs	r0, #50	@ 0x32
 8001942:	f001 f809 	bl	8002958 <HAL_Delay>
	clearBuffer();
 8001946:	f000 ff15 	bl	8002774 <clearBuffer>
	// MQTT Server 설정
	printf("AT+MQTTUSERCFG=0,1,\"MY_TOPIC\",\"\",\"\",0,0,\"\"\r\n");
 800194a:	4824      	ldr	r0, [pc, #144]	@ (80019dc <connectMQTT+0xb8>)
 800194c:	f004 f9ce 	bl	8005cec <puts>
	HAL_Delay(10);
 8001950:	200a      	movs	r0, #10
 8001952:	f001 f801 	bl	8002958 <HAL_Delay>
	bool status = waitForResponse("OK");
 8001956:	4822      	ldr	r0, [pc, #136]	@ (80019e0 <connectMQTT+0xbc>)
 8001958:	f7ff fef4 	bl	8001744 <waitForResponse>
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
	if(status)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <connectMQTT+0x4a>
		printf2("success mqtt config\r\n");
 8001966:	481f      	ldr	r0, [pc, #124]	@ (80019e4 <connectMQTT+0xc0>)
 8001968:	f000 ff46 	bl	80027f8 <printf2>
 800196c:	e002      	b.n	8001974 <connectMQTT+0x50>
	else
		printf2("failed mqtt config\r\n");
 800196e:	481e      	ldr	r0, [pc, #120]	@ (80019e8 <connectMQTT+0xc4>)
 8001970:	f000 ff42 	bl	80027f8 <printf2>
	// MQTT 접속
	printf("AT+MQTTCONN=0,\"192.168.0.51\",1883,1\r\n");
 8001974:	481d      	ldr	r0, [pc, #116]	@ (80019ec <connectMQTT+0xc8>)
 8001976:	f004 f9b9 	bl	8005cec <puts>
	HAL_Delay(10);
 800197a:	200a      	movs	r0, #10
 800197c:	f000 ffec 	bl	8002958 <HAL_Delay>
	status = waitForResponse("+MQTTCONNECTED");
 8001980:	481b      	ldr	r0, [pc, #108]	@ (80019f0 <connectMQTT+0xcc>)
 8001982:	f7ff fedf 	bl	8001744 <waitForResponse>
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
	if(status)
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <connectMQTT+0x74>
		printf2("success mqtt connect\r\n");
 8001990:	4818      	ldr	r0, [pc, #96]	@ (80019f4 <connectMQTT+0xd0>)
 8001992:	f000 ff31 	bl	80027f8 <printf2>
 8001996:	e002      	b.n	800199e <connectMQTT+0x7a>
	else
		printf2("failed matt connect\r\n");
 8001998:	4817      	ldr	r0, [pc, #92]	@ (80019f8 <connectMQTT+0xd4>)
 800199a:	f000 ff2d 	bl	80027f8 <printf2>
	clearBuffer();
 800199e:	f000 fee9 	bl	8002774 <clearBuffer>
	// Subscribe 등록 at+mqttsub=0,"topic",0
	printf("AT+MQTTSUB=0,\"MY_TOPIC\",0\r\n");
 80019a2:	4816      	ldr	r0, [pc, #88]	@ (80019fc <connectMQTT+0xd8>)
 80019a4:	f004 f9a2 	bl	8005cec <puts>
	HAL_Delay(10);
 80019a8:	200a      	movs	r0, #10
 80019aa:	f000 ffd5 	bl	8002958 <HAL_Delay>
	status = waitForResponse("OK");
 80019ae:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <connectMQTT+0xbc>)
 80019b0:	f7ff fec8 	bl	8001744 <waitForResponse>
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
	if(status) printf2("success subscribe\r\n");
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <connectMQTT+0xa2>
 80019be:	4810      	ldr	r0, [pc, #64]	@ (8001a00 <connectMQTT+0xdc>)
 80019c0:	f000 ff1a 	bl	80027f8 <printf2>
	else printf2("failed subscribe\r\n");
}
 80019c4:	e002      	b.n	80019cc <connectMQTT+0xa8>
	else printf2("failed subscribe\r\n");
 80019c6:	480f      	ldr	r0, [pc, #60]	@ (8001a04 <connectMQTT+0xe0>)
 80019c8:	f000 ff16 	bl	80027f8 <printf2>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	08008070 	.word	0x08008070
 80019d8:	08008284 	.word	0x08008284
 80019dc:	080083d8 	.word	0x080083d8
 80019e0:	080080bc 	.word	0x080080bc
 80019e4:	08008404 	.word	0x08008404
 80019e8:	0800841c 	.word	0x0800841c
 80019ec:	08008434 	.word	0x08008434
 80019f0:	0800845c 	.word	0x0800845c
 80019f4:	0800846c 	.word	0x0800846c
 80019f8:	08008484 	.word	0x08008484
 80019fc:	0800849c 	.word	0x0800849c
 8001a00:	080084b8 	.word	0x080084b8
 8001a04:	080084cc 	.word	0x080084cc

08001a08 <receiveMQTT>:

// MQTT Subscribe
// +MQTTSUB:0,"MY_TOPIC",5,hello
char *receiveMQTT() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	char *receiveMsg;
	receiveMsg = receivePacketWithHeader("+MQTTSUB");
 8001a0e:	480b      	ldr	r0, [pc, #44]	@ (8001a3c <receiveMQTT+0x34>)
 8001a10:	f7ff fe76 	bl	8001700 <receivePacketWithHeader>
 8001a14:	6078      	str	r0, [r7, #4]
	if(strncmp(&receiveMsg[3], "MY_TOPIC", 8) != 0) return 0;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3303      	adds	r3, #3
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	4908      	ldr	r1, [pc, #32]	@ (8001a40 <receiveMQTT+0x38>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f004 fab7 	bl	8005f92 <strncmp>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <receiveMQTT+0x26>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e001      	b.n	8001a32 <receiveMQTT+0x2a>
	return &receiveMsg[2];
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3302      	adds	r3, #2
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	080084e0 	.word	0x080084e0
 8001a40:	080084ec 	.word	0x080084ec

08001a44 <jsoneq>:

int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d11e      	bne.n	8001a96 <jsoneq+0x52>
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7fe fb79 	bl	8000150 <strlen>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4619      	mov	r1, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	4299      	cmp	r1, r3
 8001a6e:	d112      	bne.n	8001a96 <jsoneq+0x52>
      strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	461a      	mov	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1898      	adds	r0, r3, r2
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f004 fa83 	bl	8005f92 <strncmp>
 8001a8c:	4603      	mov	r3, r0
  if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <jsoneq+0x52>
    return 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e001      	b.n	8001a9a <jsoneq+0x56>
  }
  return -1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <json_parse>:

void json_parse(char *inStr) {
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	f6ad 0d34 	subw	sp, sp, #2100	@ 0x834
 8001aaa:	af02      	add	r7, sp, #8
 8001aac:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001ab0:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001ab4:	6018      	str	r0, [r3, #0]
	jsmn_parser p;
	jsmntok_t		t[128];
	jsmn_init(&p);
 8001ab6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fda4 	bl	8001608 <jsmn_init>
	int result = jsmn_parse(&p, inStr, strlen(inStr), t, 128);
 8001ac0:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001ac4:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	f7fe fb41 	bl	8000150 <strlen>
 8001ace:	4604      	mov	r4, r0
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001ad8:	f6a2 0124 	subw	r1, r2, #2084	@ 0x824
 8001adc:	f507 6001 	add.w	r0, r7, #2064	@ 0x810
 8001ae0:	2280      	movs	r2, #128	@ 0x80
 8001ae2:	9200      	str	r2, [sp, #0]
 8001ae4:	4622      	mov	r2, r4
 8001ae6:	6809      	ldr	r1, [r1, #0]
 8001ae8:	f7ff fbd8 	bl	800129c <jsmn_parse>
 8001aec:	f8c7 0820 	str.w	r0, [r7, #2080]	@ 0x820
	// {"KEY":"VAR"}
	if(result < 1) {
 8001af0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	dc03      	bgt.n	8001b00 <json_parse+0x5c>
		printf2("json format error\r\n");
 8001af8:	48d8      	ldr	r0, [pc, #864]	@ (8001e5c <json_parse+0x3b8>)
 8001afa:	f000 fe7d 	bl	80027f8 <printf2>
 8001afe:	e1a8      	b.n	8001e52 <json_parse+0x3ae>
		return;
	}
	for(int i = 1; i < result; i++) {
 8001b00:	2301      	movs	r3, #1
 8001b02:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001b06:	e19d      	b.n	8001e44 <json_parse+0x3a0>
		if(jsoneq(inStr, &t[i], "HEADER") == 0) {
 8001b08:	f107 0210 	add.w	r2, r7, #16
 8001b0c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	18d1      	adds	r1, r2, r3
 8001b14:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001b18:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001b1c:	4ad0      	ldr	r2, [pc, #832]	@ (8001e60 <json_parse+0x3bc>)
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	f7ff ff90 	bl	8001a44 <jsoneq>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d132      	bne.n	8001b90 <json_parse+0xec>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("HEADER = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 8001b2a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001b34:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3308      	adds	r3, #8
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001b44:	3301      	adds	r3, #1
 8001b46:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001b4a:	f6a1 0118 	subw	r1, r1, #2072	@ 0x818
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	440b      	add	r3, r1
 8001b52:	3304      	adds	r3, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1ad1      	subs	r1, r2, r3
 8001b58:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001b62:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001b74:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	48b9      	ldr	r0, [pc, #740]	@ (8001e64 <json_parse+0x3c0>)
 8001b80:	f000 fe3a 	bl	80027f8 <printf2>
			i++;
 8001b84:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001b8e:	e154      	b.n	8001e3a <json_parse+0x396>
		}
		else if(jsoneq(inStr, &t[i], "CONTENT") == 0) {
 8001b90:	f107 0210 	add.w	r2, r7, #16
 8001b94:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	18d1      	adds	r1, r2, r3
 8001b9c:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001ba0:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001ba4:	4ab0      	ldr	r2, [pc, #704]	@ (8001e68 <json_parse+0x3c4>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	f7ff ff4c 	bl	8001a44 <jsoneq>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d132      	bne.n	8001c18 <json_parse+0x174>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("CONTENT = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 8001bb2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001bbc:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3308      	adds	r3, #8
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001bd2:	f6a1 0118 	subw	r1, r1, #2072	@ 0x818
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	440b      	add	r3, r1
 8001bda:	3304      	adds	r3, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	1ad1      	subs	r1, r2, r3
 8001be0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001be4:	3301      	adds	r3, #1
 8001be6:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001bea:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001bfc:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4899      	ldr	r0, [pc, #612]	@ (8001e6c <json_parse+0x3c8>)
 8001c08:	f000 fdf6 	bl	80027f8 <printf2>
			i++;
 8001c0c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c10:	3301      	adds	r3, #1
 8001c12:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001c16:	e110      	b.n	8001e3a <json_parse+0x396>
		}
		else if(jsoneq(inStr, &t[i], "ITEM1") == 0) {
 8001c18:	f107 0210 	add.w	r2, r7, #16
 8001c1c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	18d1      	adds	r1, r2, r3
 8001c24:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001c28:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001c2c:	4a90      	ldr	r2, [pc, #576]	@ (8001e70 <json_parse+0x3cc>)
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	f7ff ff08 	bl	8001a44 <jsoneq>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d132      	bne.n	8001ca0 <json_parse+0x1fc>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("ITEM1 = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 8001c3a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001c44:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c54:	3301      	adds	r3, #1
 8001c56:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001c5a:	f6a1 0118 	subw	r1, r1, #2072	@ 0x818
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	440b      	add	r3, r1
 8001c62:	3304      	adds	r3, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1ad1      	subs	r1, r2, r3
 8001c68:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001c72:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001c84:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4879      	ldr	r0, [pc, #484]	@ (8001e74 <json_parse+0x3d0>)
 8001c90:	f000 fdb2 	bl	80027f8 <printf2>
			i++;
 8001c94:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001c9e:	e0cc      	b.n	8001e3a <json_parse+0x396>
		}
		else if(jsoneq(inStr, &t[i], "ITEM2") == 0) {
 8001ca0:	f107 0210 	add.w	r2, r7, #16
 8001ca4:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	18d1      	adds	r1, r2, r3
 8001cac:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001cb0:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001cb4:	4a70      	ldr	r2, [pc, #448]	@ (8001e78 <json_parse+0x3d4>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f7ff fec4 	bl	8001a44 <jsoneq>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d132      	bne.n	8001d28 <json_parse+0x284>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("ITEM2 = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 8001cc2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001ccc:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3308      	adds	r3, #8
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001ce2:	f6a1 0118 	subw	r1, r1, #2072	@ 0x818
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	440b      	add	r3, r1
 8001cea:	3304      	adds	r3, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	1ad1      	subs	r1, r2, r3
 8001cf0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001cfa:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001d0c:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	461a      	mov	r2, r3
 8001d16:	4859      	ldr	r0, [pc, #356]	@ (8001e7c <json_parse+0x3d8>)
 8001d18:	f000 fd6e 	bl	80027f8 <printf2>
			i++;
 8001d1c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d20:	3301      	adds	r3, #1
 8001d22:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001d26:	e088      	b.n	8001e3a <json_parse+0x396>
		}
		else if(jsoneq(inStr, &t[i], "MOTOR") == 0) {
 8001d28:	f107 0210 	add.w	r2, r7, #16
 8001d2c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	18d1      	adds	r1, r2, r3
 8001d34:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001d38:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001d3c:	4a50      	ldr	r2, [pc, #320]	@ (8001e80 <json_parse+0x3dc>)
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	f7ff fe80 	bl	8001a44 <jsoneq>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d177      	bne.n	8001e3a <json_parse+0x396>
			// %.s 문자열의 길이를 지정하여 출력
			printf2("MOTOR = %.*s\r\n", t[i+1].end - t[i+1].start, inStr + t[i+1].start);
 8001d4a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001d54:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3308      	adds	r3, #8
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d64:	3301      	adds	r3, #1
 8001d66:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001d6a:	f6a1 0118 	subw	r1, r1, #2072	@ 0x818
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	440b      	add	r3, r1
 8001d72:	3304      	adds	r3, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1ad1      	subs	r1, r2, r3
 8001d78:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001d82:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	4413      	add	r3, r2
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001d94:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4839      	ldr	r0, [pc, #228]	@ (8001e84 <json_parse+0x3e0>)
 8001da0:	f000 fd2a 	bl	80027f8 <printf2>
			char tmp[5] = {0};
 8001da4:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001da8:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	711a      	strb	r2, [r3, #4]
			strncpy(tmp, inStr + t[i+1].start, t[i+1].end - t[i+1].start);
 8001db2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001db6:	3301      	adds	r3, #1
 8001db8:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001dbc:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001dce:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	1898      	adds	r0, r3, r2
 8001dd6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 8001de0:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	4413      	add	r3, r2
 8001de8:	3308      	adds	r3, #8
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001df0:	3301      	adds	r3, #1
 8001df2:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8001df6:	f6a1 0118 	subw	r1, r1, #2072	@ 0x818
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3304      	adds	r3, #4
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	4601      	mov	r1, r0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 f8d2 	bl	8005fb6 <strncpy>
			uint8_t val = atoi(tmp);
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 f95c 	bl	80050d4 <atoi>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f887 381f 	strb.w	r3, [r7, #2079]	@ 0x81f
			HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, val);
 8001e22:	f897 381f 	ldrb.w	r3, [r7, #2079]	@ 0x81f
 8001e26:	461a      	mov	r2, r3
 8001e28:	2120      	movs	r1, #32
 8001e2a:	4817      	ldr	r0, [pc, #92]	@ (8001e88 <json_parse+0x3e4>)
 8001e2c:	f001 fd54 	bl	80038d8 <HAL_GPIO_WritePin>
			i++;
 8001e30:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001e34:	3301      	adds	r3, #1
 8001e36:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
	for(int i = 1; i < result; i++) {
 8001e3a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001e44:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8001e48:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f6ff ae5b 	blt.w	8001b08 <json_parse+0x64>
		}
	}
}
 8001e52:	f607 072c 	addw	r7, r7, #2092	@ 0x82c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	080084f8 	.word	0x080084f8
 8001e60:	0800850c 	.word	0x0800850c
 8001e64:	08008514 	.word	0x08008514
 8001e68:	08008524 	.word	0x08008524
 8001e6c:	0800852c 	.word	0x0800852c
 8001e70:	08008540 	.word	0x08008540
 8001e74:	08008548 	.word	0x08008548
 8001e78:	08008558 	.word	0x08008558
 8001e7c:	08008560 	.word	0x08008560
 8001e80:	08008570 	.word	0x08008570
 8001e84:	08008578 	.word	0x08008578
 8001e88:	40010800 	.word	0x40010800

08001e8c <app>:

void app() {
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8001e92:	af02      	add	r7, sp, #8
	// uart 초기화
	initUart(&huart1);	// to ESP32
 8001e94:	4846      	ldr	r0, [pc, #280]	@ (8001fb0 <app+0x124>)
 8001e96:	f000 fc41 	bl	800271c <initUart>
	initUart2(&huart2);	// to PC by USB
 8001e9a:	4846      	ldr	r0, [pc, #280]	@ (8001fb4 <app+0x128>)
 8001e9c:	f000 fc54 	bl	8002748 <initUart2>
	// ESP 초기화
	resetESP();
 8001ea0:	f7ff fc7e 	bl	80017a0 <resetESP>
	// AP 접속
	connectAP();
 8001ea4:	f7ff fcca 	bl	800183c <connectAP>
	// MQTT 접속
	connectMQTT();
 8001ea8:	f7ff fd3c 	bl	8001924 <connectMQTT>
	while(1) {
		static uint32_t cycle_sub = 0, cycle_pub = 0;
		static uint8_t seq_num = 0;
		// publish
		if(HAL_GetTick() > cycle_pub) {
 8001eac:	f000 fd4a 	bl	8002944 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b41      	ldr	r3, [pc, #260]	@ (8001fb8 <app+0x12c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d955      	bls.n	8001f66 <app+0xda>
			cycle_pub = HAL_GetTick() + 1000;
 8001eba:	f000 fd43 	bl	8002944 <HAL_GetTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb8 <app+0x12c>)
 8001ec6:	6013      	str	r3, [r2, #0]
			// ad conversion
			HAL_ADC_Start(&hadc1);
 8001ec8:	483c      	ldr	r0, [pc, #240]	@ (8001fbc <app+0x130>)
 8001eca:	f000 fe41 	bl	8002b50 <HAL_ADC_Start>
			// wait for complete
			HAL_ADC_PollForConversion(&hadc1, 10);
 8001ece:	210a      	movs	r1, #10
 8001ed0:	483a      	ldr	r0, [pc, #232]	@ (8001fbc <app+0x130>)
 8001ed2:	f000 ff17 	bl	8002d04 <HAL_ADC_PollForConversion>
			// get adc value
			uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 8001ed6:	4839      	ldr	r0, [pc, #228]	@ (8001fbc <app+0x130>)
 8001ed8:	f001 f81a 	bl	8002f10 <HAL_ADC_GetValue>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f8a7 31fe 	strh.w	r3, [r7, #510]	@ 0x1fe
			// stop adc
			HAL_ADC_Stop(&hadc1);
 8001ee2:	4836      	ldr	r0, [pc, #216]	@ (8001fbc <app+0x130>)
 8001ee4:	f000 fee2 	bl	8002cac <HAL_ADC_Stop>
			char sendMsg[500];
			sprintf(sendMsg, "{\"TYPE\":\"TEMP\","
					"\"SEQ\":%d,"
					"\"STATUS\":[{"
					"\"TEMP1\":%2.1f,"
					"\"TEMP2\":-1}]}", seq_num++, (float)adcValue / 64);
 8001ee8:	4b35      	ldr	r3, [pc, #212]	@ (8001fc0 <app+0x134>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	b2d1      	uxtb	r1, r2
 8001ef0:	4a33      	ldr	r2, [pc, #204]	@ (8001fc0 <app+0x134>)
 8001ef2:	7011      	strb	r1, [r2, #0]
			sprintf(sendMsg, "{\"TYPE\":\"TEMP\","
 8001ef4:	461c      	mov	r4, r3
					"\"TEMP2\":-1}]}", seq_num++, (float)adcValue / 64);
 8001ef6:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	@ 0x1fe
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fe7a 	bl	8000bf4 <__aeabi_ui2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f04f 4185 	mov.w	r1, #1115684864	@ 0x42800000
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe ff80 	bl	8000e0c <__aeabi_fdiv>
 8001f0c:	4603      	mov	r3, r0
			sprintf(sendMsg, "{\"TYPE\":\"TEMP\","
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fa8a 	bl	8000428 <__aeabi_f2d>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	1d38      	adds	r0, r7, #4
 8001f1a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f1e:	4622      	mov	r2, r4
 8001f20:	4928      	ldr	r1, [pc, #160]	@ (8001fc4 <app+0x138>)
 8001f22:	f003 feeb 	bl	8005cfc <siprintf>
			printf("AT+MQTTPUBRAW=0,\"MY_TOPIC\",%d,0,0\r\n", strlen(sendMsg));
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe f911 	bl	8000150 <strlen>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4825      	ldr	r0, [pc, #148]	@ (8001fc8 <app+0x13c>)
 8001f34:	f003 fe72 	bl	8005c1c <iprintf>
			bool status = waitForResponse("OK");
 8001f38:	4824      	ldr	r0, [pc, #144]	@ (8001fcc <app+0x140>)
 8001f3a:	f7ff fc03 	bl	8001744 <waitForResponse>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f887 31fd 	strb.w	r3, [r7, #509]	@ 0x1fd
			if(status) {
 8001f44:	f897 31fd 	ldrb.w	r3, [r7, #509]	@ 0x1fd
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00c      	beq.n	8001f66 <app+0xda>
				while(getUart() != '>');	// 문자열 입력 프롬프트 대기
 8001f4c:	bf00      	nop
 8001f4e:	f000 fc23 	bl	8002798 <getUart>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f56:	d1fa      	bne.n	8001f4e <app+0xc2>
				printf(sendMsg);
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 fe5e 	bl	8005c1c <iprintf>
				printf2("published\r\n");
 8001f60:	481b      	ldr	r0, [pc, #108]	@ (8001fd0 <app+0x144>)
 8001f62:	f000 fc49 	bl	80027f8 <printf2>
			}
		}
		// subscribe
		if(HAL_GetTick() > cycle_sub) {
 8001f66:	f000 fced 	bl	8002944 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <app+0x148>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d99b      	bls.n	8001eac <app+0x20>
			cycle_sub = HAL_GetTick() + 10;
 8001f74:	f000 fce6 	bl	8002944 <HAL_GetTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	330a      	adds	r3, #10
 8001f7c:	4a15      	ldr	r2, [pc, #84]	@ (8001fd4 <app+0x148>)
 8001f7e:	6013      	str	r3, [r2, #0]
			char *msg = receiveMQTT();
 8001f80:	f7ff fd42 	bl	8001a08 <receiveMQTT>
 8001f84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
			if(msg[0] != 0) {
 8001f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d08c      	beq.n	8001eac <app+0x20>
				printf2("%s\r\n", &msg[14]);
 8001f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f96:	330e      	adds	r3, #14
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480f      	ldr	r0, [pc, #60]	@ (8001fd8 <app+0x14c>)
 8001f9c:	f000 fc2c 	bl	80027f8 <printf2>
				// json parse
				json_parse(&msg[14]);
 8001fa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fa4:	330e      	adds	r3, #14
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fd7c 	bl	8001aa4 <json_parse>
	while(1) {
 8001fac:	e77e      	b.n	8001eac <app+0x20>
 8001fae:	bf00      	nop
 8001fb0:	20000a2c 	.word	0x20000a2c
 8001fb4:	20000a74 	.word	0x20000a74
 8001fb8:	200009f0 	.word	0x200009f0
 8001fbc:	200009fc 	.word	0x200009fc
 8001fc0:	200009f4 	.word	0x200009f4
 8001fc4:	08008588 	.word	0x08008588
 8001fc8:	080085c8 	.word	0x080085c8
 8001fcc:	080080bc 	.word	0x080080bc
 8001fd0:	080085ec 	.word	0x080085ec
 8001fd4:	200009f8 	.word	0x200009f8
 8001fd8:	0800827c 	.word	0x0800827c

08001fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe0:	f000 fc58 	bl	8002894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe4:	f000 f80c 	bl	8002000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe8:	f000 f8f4 	bl	80021d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001fec:	f000 f860 	bl	80020b0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001ff0:	f000 f89c 	bl	800212c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ff4:	f000 f8c4 	bl	8002180 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app();
 8001ff8:	f7ff ff48 	bl	8001e8c <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <main+0x20>

08002000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b094      	sub	sp, #80	@ 0x50
 8002004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002006:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800200a:	2228      	movs	r2, #40	@ 0x28
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f003 ffaa 	bl	8005f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002030:	2302      	movs	r3, #2
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002034:	2301      	movs	r3, #1
 8002036:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002038:	2310      	movs	r3, #16
 800203a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800203c:	2302      	movs	r3, #2
 800203e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002040:	2300      	movs	r3, #0
 8002042:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002044:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002048:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800204a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800204e:	4618      	mov	r0, r3
 8002050:	f001 fc5a 	bl	8003908 <HAL_RCC_OscConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800205a:	f000 f8ed 	bl	8002238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800205e:	230f      	movs	r3, #15
 8002060:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800206a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800206e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2102      	movs	r1, #2
 800207a:	4618      	mov	r0, r3
 800207c:	f001 fec6 	bl	8003e0c <HAL_RCC_ClockConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002086:	f000 f8d7 	bl	8002238 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800208a:	2302      	movs	r3, #2
 800208c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800208e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002092:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4618      	mov	r0, r3
 8002098:	f002 f846 	bl	8004128 <HAL_RCCEx_PeriphCLKConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80020a2:	f000 f8c9 	bl	8002238 <Error_Handler>
  }
}
 80020a6:	bf00      	nop
 80020a8:	3750      	adds	r7, #80	@ 0x50
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020c0:	4b18      	ldr	r3, [pc, #96]	@ (8002124 <MX_ADC1_Init+0x74>)
 80020c2:	4a19      	ldr	r2, [pc, #100]	@ (8002128 <MX_ADC1_Init+0x78>)
 80020c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020c6:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <MX_ADC1_Init+0x74>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020cc:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <MX_ADC1_Init+0x74>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020d2:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <MX_ADC1_Init+0x74>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <MX_ADC1_Init+0x74>)
 80020da:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80020de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020e0:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <MX_ADC1_Init+0x74>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80020e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <MX_ADC1_Init+0x74>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020ec:	480d      	ldr	r0, [pc, #52]	@ (8002124 <MX_ADC1_Init+0x74>)
 80020ee:	f000 fc57 	bl	80029a0 <HAL_ADC_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80020f8:	f000 f89e 	bl	8002238 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002100:	2301      	movs	r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	@ (8002124 <MX_ADC1_Init+0x74>)
 800210e:	f000 ff0b 	bl	8002f28 <HAL_ADC_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002118:	f000 f88e 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200009fc 	.word	0x200009fc
 8002128:	40012400 	.word	0x40012400

0800212c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002132:	4a12      	ldr	r2, [pc, #72]	@ (800217c <MX_USART1_UART_Init+0x50>)
 8002134:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800213c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800213e:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800214a:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002152:	220c      	movs	r2, #12
 8002154:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002162:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_USART1_UART_Init+0x4c>)
 8002164:	f002 f94c 	bl	8004400 <HAL_UART_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800216e:	f000 f863 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000a2c 	.word	0x20000a2c
 800217c:	40013800 	.word	0x40013800

08002180 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 8002186:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <MX_USART2_UART_Init+0x50>)
 8002188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 800218c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021a4:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 80021a6:	220c      	movs	r2, #12
 80021a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	@ (80021cc <MX_USART2_UART_Init+0x4c>)
 80021b8:	f002 f922 	bl	8004400 <HAL_UART_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021c2:	f000 f839 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000a74 	.word	0x20000a74
 80021d0:	40004400 	.word	0x40004400

080021d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <MX_GPIO_Init+0x5c>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <MX_GPIO_Init+0x5c>)
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <MX_GPIO_Init+0x5c>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2120      	movs	r1, #32
 8002204:	480b      	ldr	r0, [pc, #44]	@ (8002234 <MX_GPIO_Init+0x60>)
 8002206:	f001 fb67 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_Pin */
  GPIO_InitStruct.Pin = MOTOR_Pin;
 800220a:	2320      	movs	r3, #32
 800220c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220e:	2301      	movs	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2302      	movs	r3, #2
 8002218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	4619      	mov	r1, r3
 8002220:	4804      	ldr	r0, [pc, #16]	@ (8002234 <MX_GPIO_Init+0x60>)
 8002222:	f001 f9d5 	bl	80035d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	40010800 	.word	0x40010800

08002238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <Error_Handler+0x8>

08002244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800224a:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_MspInit+0x5c>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <HAL_MspInit+0x5c>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6193      	str	r3, [r2, #24]
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_MspInit+0x5c>)
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <HAL_MspInit+0x5c>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4a0e      	ldr	r2, [pc, #56]	@ (80022a0 <HAL_MspInit+0x5c>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226c:	61d3      	str	r3, [r2, #28]
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_MspInit+0x5c>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800227a:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <HAL_MspInit+0x60>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <HAL_MspInit+0x60>)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000

080022a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <HAL_ADC_MspInit+0x6c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d121      	bne.n	800230c <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <HAL_ADC_MspInit+0x70>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a12      	ldr	r2, [pc, #72]	@ (8002318 <HAL_ADC_MspInit+0x70>)
 80022ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <HAL_ADC_MspInit+0x70>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <HAL_ADC_MspInit+0x70>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002318 <HAL_ADC_MspInit+0x70>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <HAL_ADC_MspInit+0x70>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fc:	2303      	movs	r3, #3
 80022fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	4619      	mov	r1, r3
 8002306:	4805      	ldr	r0, [pc, #20]	@ (800231c <HAL_ADC_MspInit+0x74>)
 8002308:	f001 f962 	bl	80035d0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800230c:	bf00      	nop
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40012400 	.word	0x40012400
 8002318:	40021000 	.word	0x40021000
 800231c:	40010800 	.word	0x40010800

08002320 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0318 	add.w	r3, r7, #24
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a3f      	ldr	r2, [pc, #252]	@ (8002438 <HAL_UART_MspInit+0x118>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d13a      	bne.n	80023b6 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002340:	4b3e      	ldr	r3, [pc, #248]	@ (800243c <HAL_UART_MspInit+0x11c>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a3d      	ldr	r2, [pc, #244]	@ (800243c <HAL_UART_MspInit+0x11c>)
 8002346:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <HAL_UART_MspInit+0x11c>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	4b38      	ldr	r3, [pc, #224]	@ (800243c <HAL_UART_MspInit+0x11c>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a37      	ldr	r2, [pc, #220]	@ (800243c <HAL_UART_MspInit+0x11c>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b35      	ldr	r3, [pc, #212]	@ (800243c <HAL_UART_MspInit+0x11c>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800237a:	2303      	movs	r3, #3
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 0318 	add.w	r3, r7, #24
 8002382:	4619      	mov	r1, r3
 8002384:	482e      	ldr	r0, [pc, #184]	@ (8002440 <HAL_UART_MspInit+0x120>)
 8002386:	f001 f923 	bl	80035d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800238a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800238e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 0318 	add.w	r3, r7, #24
 800239c:	4619      	mov	r1, r3
 800239e:	4828      	ldr	r0, [pc, #160]	@ (8002440 <HAL_UART_MspInit+0x120>)
 80023a0:	f001 f916 	bl	80035d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023a4:	2200      	movs	r2, #0
 80023a6:	2100      	movs	r1, #0
 80023a8:	2025      	movs	r0, #37	@ 0x25
 80023aa:	f001 f828 	bl	80033fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ae:	2025      	movs	r0, #37	@ 0x25
 80023b0:	f001 f841 	bl	8003436 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80023b4:	e03c      	b.n	8002430 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a22      	ldr	r2, [pc, #136]	@ (8002444 <HAL_UART_MspInit+0x124>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d137      	bne.n	8002430 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c0:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <HAL_UART_MspInit+0x11c>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4a1d      	ldr	r2, [pc, #116]	@ (800243c <HAL_UART_MspInit+0x11c>)
 80023c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ca:	61d3      	str	r3, [r2, #28]
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <HAL_UART_MspInit+0x11c>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b18      	ldr	r3, [pc, #96]	@ (800243c <HAL_UART_MspInit+0x11c>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a17      	ldr	r2, [pc, #92]	@ (800243c <HAL_UART_MspInit+0x11c>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b15      	ldr	r3, [pc, #84]	@ (800243c <HAL_UART_MspInit+0x11c>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023f0:	2304      	movs	r3, #4
 80023f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fc:	f107 0318 	add.w	r3, r7, #24
 8002400:	4619      	mov	r1, r3
 8002402:	480f      	ldr	r0, [pc, #60]	@ (8002440 <HAL_UART_MspInit+0x120>)
 8002404:	f001 f8e4 	bl	80035d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002408:	2308      	movs	r3, #8
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 0318 	add.w	r3, r7, #24
 8002418:	4619      	mov	r1, r3
 800241a:	4809      	ldr	r0, [pc, #36]	@ (8002440 <HAL_UART_MspInit+0x120>)
 800241c:	f001 f8d8 	bl	80035d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2100      	movs	r1, #0
 8002424:	2026      	movs	r0, #38	@ 0x26
 8002426:	f000 ffea 	bl	80033fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800242a:	2026      	movs	r0, #38	@ 0x26
 800242c:	f001 f803 	bl	8003436 <HAL_NVIC_EnableIRQ>
}
 8002430:	bf00      	nop
 8002432:	3728      	adds	r7, #40	@ 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40013800 	.word	0x40013800
 800243c:	40021000 	.word	0x40021000
 8002440:	40010800 	.word	0x40010800
 8002444:	40004400 	.word	0x40004400

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <NMI_Handler+0x4>

08002450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <HardFault_Handler+0x4>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <MemManage_Handler+0x4>

08002460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <UsageFault_Handler+0x4>

08002470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002498:	f000 fa42 	bl	8002920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}

080024a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <USART1_IRQHandler+0x10>)
 80024a6:	f002 f8ab 	bl	8004600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000a2c 	.word	0x20000a2c

080024b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024b8:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <USART2_IRQHandler+0x10>)
 80024ba:	f002 f8a1 	bl	8004600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000a74 	.word	0x20000a74

080024c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return 1;
 80024cc:	2301      	movs	r3, #1
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <_kill>:

int _kill(int pid, int sig)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024e0:	f003 fdc6 	bl	8006070 <__errno>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2216      	movs	r2, #22
 80024e8:	601a      	str	r2, [r3, #0]
  return -1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_exit>:

void _exit (int status)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffe7 	bl	80024d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <_exit+0x12>

0800250c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	e00a      	b.n	8002534 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800251e:	f3af 8000 	nop.w
 8002522:	4601      	mov	r1, r0
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	60ba      	str	r2, [r7, #8]
 800252a:	b2ca      	uxtb	r2, r1
 800252c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	dbf0      	blt.n	800251e <_read+0x12>
  }

  return len;
 800253c:	687b      	ldr	r3, [r7, #4]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800256c:	605a      	str	r2, [r3, #4]
  return 0;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <_isatty>:

int _isatty(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
	...

080025a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b0:	4a14      	ldr	r2, [pc, #80]	@ (8002604 <_sbrk+0x5c>)
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <_sbrk+0x60>)
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025bc:	4b13      	ldr	r3, [pc, #76]	@ (800260c <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c4:	4b11      	ldr	r3, [pc, #68]	@ (800260c <_sbrk+0x64>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <_sbrk+0x68>)
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ca:	4b10      	ldr	r3, [pc, #64]	@ (800260c <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d207      	bcs.n	80025e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d8:	f003 fd4a 	bl	8006070 <__errno>
 80025dc:	4603      	mov	r3, r0
 80025de:	220c      	movs	r2, #12
 80025e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	e009      	b.n	80025fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e8:	4b08      	ldr	r3, [pc, #32]	@ (800260c <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ee:	4b07      	ldr	r3, [pc, #28]	@ (800260c <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	4a05      	ldr	r2, [pc, #20]	@ (800260c <_sbrk+0x64>)
 80025f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20005000 	.word	0x20005000
 8002608:	00000400 	.word	0x00000400
 800260c:	20000abc 	.word	0x20000abc
 8002610:	20000cf0 	.word	0x20000cf0

08002614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <_write>:
uint16_t	rxBufferWriteIndex2;			// 쓰기 인덱스
uint16_t	rxBufferReadIndex2;			// 읽기 인덱스
uint8_t		rxChar2;									// 수신된 1바이트

// printf 장치 재설정
int _write(int file, char *p, int len) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uart, (uint8_t *)p, len, len);
 800262c:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <_write+0x28>)
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	b29a      	uxth	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	f001 ff32 	bl	80044a0 <HAL_UART_Transmit>
	return len;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000ac0 	.word	0x20000ac0

0800264c <HAL_UART_RxCpltCallback>:

// uart 수신 인터럽트(문자 수신시 이곳으로 이동됨)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	// uart1에서 수신된 인터럽트 처리
	if(huart->Instance == uart->Instance) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <HAL_UART_RxCpltCallback+0xac>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d11f      	bne.n	80026a2 <HAL_UART_RxCpltCallback+0x56>
		rxBuffer[rxBufferWriteIndex++] = rxChar;	// 버퍼에 1바이트 넣고 쓰기 인덱스 1증가
 8002662:	4b26      	ldr	r3, [pc, #152]	@ (80026fc <HAL_UART_RxCpltCallback+0xb0>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	b291      	uxth	r1, r2
 800266a:	4a24      	ldr	r2, [pc, #144]	@ (80026fc <HAL_UART_RxCpltCallback+0xb0>)
 800266c:	8011      	strh	r1, [r2, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	4b23      	ldr	r3, [pc, #140]	@ (8002700 <HAL_UART_RxCpltCallback+0xb4>)
 8002672:	7819      	ldrb	r1, [r3, #0]
 8002674:	4b23      	ldr	r3, [pc, #140]	@ (8002704 <HAL_UART_RxCpltCallback+0xb8>)
 8002676:	5499      	strb	r1, [r3, r2]
		rxBufferWriteIndex %= rxBufferMax;			// 쓰기 인덱스가 마지막에서 처음으로 이동
 8002678:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <HAL_UART_RxCpltCallback+0xb0>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	4a22      	ldr	r2, [pc, #136]	@ (8002708 <HAL_UART_RxCpltCallback+0xbc>)
 800267e:	fba2 1203 	umull	r1, r2, r2, r3
 8002682:	0952      	lsrs	r2, r2, #5
 8002684:	2164      	movs	r1, #100	@ 0x64
 8002686:	fb01 f202 	mul.w	r2, r1, r2
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	b29a      	uxth	r2, r3
 800268e:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <HAL_UART_RxCpltCallback+0xb0>)
 8002690:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(uart, &rxChar, 1);	// 수신 인터럽트 활성화(재장전)
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_UART_RxCpltCallback+0xac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	4919      	ldr	r1, [pc, #100]	@ (8002700 <HAL_UART_RxCpltCallback+0xb4>)
 800269a:	4618      	mov	r0, r3
 800269c:	f001 ff8b 	bl	80045b6 <HAL_UART_Receive_IT>
	else if(huart->Instance == uart2->Instance) {
		rxBuffer2[rxBufferWriteIndex2++] = rxChar2;	// 버퍼에 1바이트 넣고 쓰기 인덱스 1증가
		rxBufferWriteIndex2 %= rxBufferMax2;			// 쓰기 인덱스가 마지막에서 처음으로 이동
		HAL_UART_Receive_IT(uart2, &rxChar2, 1);	// 수신 인터럽트 활성화(재장전)
	}
}
 80026a0:	e025      	b.n	80026ee <HAL_UART_RxCpltCallback+0xa2>
	else if(huart->Instance == uart2->Instance) {
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b19      	ldr	r3, [pc, #100]	@ (800270c <HAL_UART_RxCpltCallback+0xc0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d11e      	bne.n	80026ee <HAL_UART_RxCpltCallback+0xa2>
		rxBuffer2[rxBufferWriteIndex2++] = rxChar2;	// 버퍼에 1바이트 넣고 쓰기 인덱스 1증가
 80026b0:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <HAL_UART_RxCpltCallback+0xc4>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	b291      	uxth	r1, r2
 80026b8:	4a15      	ldr	r2, [pc, #84]	@ (8002710 <HAL_UART_RxCpltCallback+0xc4>)
 80026ba:	8011      	strh	r1, [r2, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <HAL_UART_RxCpltCallback+0xc8>)
 80026c0:	7819      	ldrb	r1, [r3, #0]
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <HAL_UART_RxCpltCallback+0xcc>)
 80026c4:	5499      	strb	r1, [r3, r2]
		rxBufferWriteIndex2 %= rxBufferMax2;			// 쓰기 인덱스가 마지막에서 처음으로 이동
 80026c6:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_UART_RxCpltCallback+0xc4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002708 <HAL_UART_RxCpltCallback+0xbc>)
 80026cc:	fba2 1203 	umull	r1, r2, r2, r3
 80026d0:	0952      	lsrs	r2, r2, #5
 80026d2:	2164      	movs	r1, #100	@ 0x64
 80026d4:	fb01 f202 	mul.w	r2, r1, r2
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <HAL_UART_RxCpltCallback+0xc4>)
 80026de:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(uart2, &rxChar2, 1);	// 수신 인터럽트 활성화(재장전)
 80026e0:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_UART_RxCpltCallback+0xc0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	490b      	ldr	r1, [pc, #44]	@ (8002714 <HAL_UART_RxCpltCallback+0xc8>)
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 ff64 	bl	80045b6 <HAL_UART_Receive_IT>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000ac0 	.word	0x20000ac0
 80026fc:	20000b2c 	.word	0x20000b2c
 8002700:	20000b30 	.word	0x20000b30
 8002704:	20000ac8 	.word	0x20000ac8
 8002708:	51eb851f 	.word	0x51eb851f
 800270c:	20000ac4 	.word	0x20000ac4
 8002710:	20000b98 	.word	0x20000b98
 8002714:	20000b9a 	.word	0x20000b9a
 8002718:	20000b34 	.word	0x20000b34

0800271c <initUart>:

// function implementation
// 함수 초기화
void initUart(UART_HandleTypeDef *huart) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	uart = huart;	// uart 장치 핸들 저장
 8002724:	4a06      	ldr	r2, [pc, #24]	@ (8002740 <initUart+0x24>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(uart, &rxChar, 1);	// 수신 인터럽트 활성화
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <initUart+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2201      	movs	r2, #1
 8002730:	4904      	ldr	r1, [pc, #16]	@ (8002744 <initUart+0x28>)
 8002732:	4618      	mov	r0, r3
 8002734:	f001 ff3f 	bl	80045b6 <HAL_UART_Receive_IT>
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000ac0 	.word	0x20000ac0
 8002744:	20000b30 	.word	0x20000b30

08002748 <initUart2>:

void initUart2(UART_HandleTypeDef *huart) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	uart2 = huart;	// uart 장치 핸들 저장
 8002750:	4a06      	ldr	r2, [pc, #24]	@ (800276c <initUart2+0x24>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(uart2, &rxChar2, 1);	// 수신 인터럽트 활성화
 8002756:	4b05      	ldr	r3, [pc, #20]	@ (800276c <initUart2+0x24>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	4904      	ldr	r1, [pc, #16]	@ (8002770 <initUart2+0x28>)
 800275e:	4618      	mov	r0, r3
 8002760:	f001 ff29 	bl	80045b6 <HAL_UART_Receive_IT>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000ac4 	.word	0x20000ac4
 8002770:	20000b9a 	.word	0x20000b9a

08002774 <clearBuffer>:

// 수신 버퍼 초기화
void clearBuffer() {
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
	rxBufferWriteIndex = rxBufferReadIndex = 0;
 8002778:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <clearBuffer+0x1c>)
 800277a:	2200      	movs	r2, #0
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <clearBuffer+0x1c>)
 8002780:	881a      	ldrh	r2, [r3, #0]
 8002782:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <clearBuffer+0x20>)
 8002784:	801a      	strh	r2, [r3, #0]
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000b2e 	.word	0x20000b2e
 8002794:	20000b2c 	.word	0x20000b2c

08002798 <getUart>:

char getUart() {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
	char result;
	if(rxBufferWriteIndex == rxBufferReadIndex) return 0;	// 버퍼가 비어있음
 800279e:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <getUart+0x50>)
 80027a0:	881a      	ldrh	r2, [r3, #0]
 80027a2:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <getUart+0x54>)
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d101      	bne.n	80027ae <getUart+0x16>
 80027aa:	2300      	movs	r3, #0
 80027ac:	e017      	b.n	80027de <getUart+0x46>
	result = rxBuffer[rxBufferReadIndex++];	// 버퍼에서 1바이트 꺼내고 읽기 인덱스 1증가
 80027ae:	4b0f      	ldr	r3, [pc, #60]	@ (80027ec <getUart+0x54>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	b291      	uxth	r1, r2
 80027b6:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <getUart+0x54>)
 80027b8:	8011      	strh	r1, [r2, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <getUart+0x58>)
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	71fb      	strb	r3, [r7, #7]
	rxBufferReadIndex %= rxBufferMax;	// 읽기 인덱스가 마지막에서 처음으로 이동
 80027c2:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <getUart+0x54>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	4a0b      	ldr	r2, [pc, #44]	@ (80027f4 <getUart+0x5c>)
 80027c8:	fba2 1203 	umull	r1, r2, r2, r3
 80027cc:	0952      	lsrs	r2, r2, #5
 80027ce:	2164      	movs	r1, #100	@ 0x64
 80027d0:	fb01 f202 	mul.w	r2, r1, r2
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <getUart+0x54>)
 80027da:	801a      	strh	r2, [r3, #0]
	return result;
 80027dc:	79fb      	ldrb	r3, [r7, #7]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	20000b2c 	.word	0x20000b2c
 80027ec:	20000b2e 	.word	0x20000b2e
 80027f0:	20000ac8 	.word	0x20000ac8
 80027f4:	51eb851f 	.word	0x51eb851f

080027f8 <printf2>:
		}
	}
	return msg;
}

void printf2(const char *format, ...) {
 80027f8:	b40f      	push	{r0, r1, r2, r3}
 80027fa:	b5b0      	push	{r4, r5, r7, lr}
 80027fc:	b09a      	sub	sp, #104	@ 0x68
 80027fe:	af00      	add	r7, sp, #0
	char buffer[100];
	va_list args;
	va_start(args, format);
 8002800:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002804:	603b      	str	r3, [r7, #0]
	// snprintf(배열, 배열크기, ...)
	vsnprintf(buffer, sizeof(buffer), format, args);
 8002806:	1d38      	adds	r0, r7, #4
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800280c:	2164      	movs	r1, #100	@ 0x64
 800280e:	f003 fb09 	bl	8005e24 <vsniprintf>
	va_end(args);
	HAL_UART_Transmit(uart2, buffer, strlen(buffer), strlen(buffer));
 8002812:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <printf2+0x4c>)
 8002814:	681c      	ldr	r4, [r3, #0]
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fc99 	bl	8000150 <strlen>
 800281e:	4603      	mov	r3, r0
 8002820:	b29d      	uxth	r5, r3
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fc93 	bl	8000150 <strlen>
 800282a:	4603      	mov	r3, r0
 800282c:	1d39      	adds	r1, r7, #4
 800282e:	462a      	mov	r2, r5
 8002830:	4620      	mov	r0, r4
 8002832:	f001 fe35 	bl	80044a0 <HAL_UART_Transmit>
}
 8002836:	bf00      	nop
 8002838:	3768      	adds	r7, #104	@ 0x68
 800283a:	46bd      	mov	sp, r7
 800283c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002840:	b004      	add	sp, #16
 8002842:	4770      	bx	lr
 8002844:	20000ac4 	.word	0x20000ac4

08002848 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002848:	f7ff fee4 	bl	8002614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800284c:	480b      	ldr	r0, [pc, #44]	@ (800287c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800284e:	490c      	ldr	r1, [pc, #48]	@ (8002880 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002850:	4a0c      	ldr	r2, [pc, #48]	@ (8002884 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002854:	e002      	b.n	800285c <LoopCopyDataInit>

08002856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285a:	3304      	adds	r3, #4

0800285c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800285c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002860:	d3f9      	bcc.n	8002856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002862:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002864:	4c09      	ldr	r4, [pc, #36]	@ (800288c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002868:	e001      	b.n	800286e <LoopFillZerobss>

0800286a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800286c:	3204      	adds	r2, #4

0800286e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002870:	d3fb      	bcc.n	800286a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002872:	f003 fc03 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002876:	f7ff fbb1 	bl	8001fdc <main>
  bx lr
 800287a:	4770      	bx	lr
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002884:	080089b8 	.word	0x080089b8
  ldr r2, =_sbss
 8002888:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800288c:	20000cec 	.word	0x20000cec

08002890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC1_2_IRQHandler>
	...

08002894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002898:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <HAL_Init+0x28>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <HAL_Init+0x28>)
 800289e:	f043 0310 	orr.w	r3, r3, #16
 80028a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a4:	2003      	movs	r0, #3
 80028a6:	f000 fd9f 	bl	80033e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028aa:	200f      	movs	r0, #15
 80028ac:	f000 f808 	bl	80028c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b0:	f7ff fcc8 	bl	8002244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40022000 	.word	0x40022000

080028c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c8:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <HAL_InitTick+0x54>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <HAL_InitTick+0x58>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4619      	mov	r1, r3
 80028d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fdb7 	bl	8003452 <HAL_SYSTICK_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00e      	b.n	800290c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b0f      	cmp	r3, #15
 80028f2:	d80a      	bhi.n	800290a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f4:	2200      	movs	r2, #0
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f000 fd7f 	bl	80033fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002900:	4a06      	ldr	r2, [pc, #24]	@ (800291c <HAL_InitTick+0x5c>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000000 	.word	0x20000000
 8002918:	20000008 	.word	0x20000008
 800291c:	20000004 	.word	0x20000004

08002920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_IncTick+0x1c>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_IncTick+0x20>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4413      	add	r3, r2
 8002930:	4a03      	ldr	r2, [pc, #12]	@ (8002940 <HAL_IncTick+0x20>)
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	20000008 	.word	0x20000008
 8002940:	20000b9c 	.word	0x20000b9c

08002944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b02      	ldr	r3, [pc, #8]	@ (8002954 <HAL_GetTick+0x10>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	20000b9c 	.word	0x20000b9c

08002958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002960:	f7ff fff0 	bl	8002944 <HAL_GetTick>
 8002964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d005      	beq.n	800297e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <HAL_Delay+0x44>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800297e:	bf00      	nop
 8002980:	f7ff ffe0 	bl	8002944 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d8f7      	bhi.n	8002980 <HAL_Delay+0x28>
  {
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000008 	.word	0x20000008

080029a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0be      	b.n	8002b40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fc62 	bl	80022a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fbf1 	bl	80031cc <ADC_ConversionStop_Disable>
 80029ea:	4603      	mov	r3, r0
 80029ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 8099 	bne.w	8002b2e <HAL_ADC_Init+0x18e>
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 8095 	bne.w	8002b2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a0c:	f023 0302 	bic.w	r3, r3, #2
 8002a10:	f043 0202 	orr.w	r2, r3, #2
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7b1b      	ldrb	r3, [r3, #12]
 8002a26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a38:	d003      	beq.n	8002a42 <HAL_ADC_Init+0xa2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_ADC_Init+0xa8>
 8002a42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a46:	e000      	b.n	8002a4a <HAL_ADC_Init+0xaa>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7d1b      	ldrb	r3, [r3, #20]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d119      	bne.n	8002a8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7b1b      	ldrb	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	035a      	lsls	r2, r3, #13
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	e00b      	b.n	8002a8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	4b28      	ldr	r3, [pc, #160]	@ (8002b48 <HAL_ADC_Init+0x1a8>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002abc:	d003      	beq.n	8002ac6 <HAL_ADC_Init+0x126>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d104      	bne.n	8002ad0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	051b      	lsls	r3, r3, #20
 8002ace:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <HAL_ADC_Init+0x1ac>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d10b      	bne.n	8002b0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b0a:	e018      	b.n	8002b3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	f023 0312 	bic.w	r3, r3, #18
 8002b14:	f043 0210 	orr.w	r2, r3, #16
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b2c:	e007      	b.n	8002b3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b32:	f043 0210 	orr.w	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	ffe1f7fd 	.word	0xffe1f7fd
 8002b4c:	ff1f0efe 	.word	0xff1f0efe

08002b50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_Start+0x1a>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e098      	b.n	8002c9c <HAL_ADC_Start+0x14c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fad0 	bl	8003118 <ADC_Enable>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8087 	bne.w	8002c92 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a41      	ldr	r2, [pc, #260]	@ (8002ca4 <HAL_ADC_Start+0x154>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d105      	bne.n	8002bae <HAL_ADC_Start+0x5e>
 8002ba2:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <HAL_ADC_Start+0x158>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d115      	bne.n	8002bda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d026      	beq.n	8002c16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bd8:	e01d      	b.n	8002c16 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2f      	ldr	r2, [pc, #188]	@ (8002ca8 <HAL_ADC_Start+0x158>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_ADC_Start+0xaa>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca4 <HAL_ADC_Start+0x154>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10d      	bne.n	8002c16 <HAL_ADC_Start+0xc6>
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_ADC_Start+0x158>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	f023 0206 	bic.w	r2, r3, #6
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c2e:	e002      	b.n	8002c36 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f06f 0202 	mvn.w	r2, #2
 8002c46:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002c52:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002c56:	d113      	bne.n	8002c80 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_ADC_Start+0x154>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d105      	bne.n	8002c6e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_ADC_Start+0x158>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d108      	bne.n	8002c80 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	e00c      	b.n	8002c9a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	e003      	b.n	8002c9a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40012800 	.word	0x40012800
 8002ca8:	40012400 	.word	0x40012400

08002cac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_Stop+0x1a>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e01a      	b.n	8002cfc <HAL_ADC_Stop+0x50>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa7c 	bl	80031cc <ADC_ConversionStop_Disable>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	f043 0201 	orr.w	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d1a:	f7ff fe13 	bl	8002944 <HAL_GetTick>
 8002d1e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d32:	f043 0220 	orr.w	r2, r3, #32
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0d3      	b.n	8002eee <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d131      	bne.n	8002db8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d12a      	bne.n	8002db8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d62:	e021      	b.n	8002da8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d01d      	beq.n	8002da8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_ADC_PollForConversion+0x7e>
 8002d72:	f7ff fde7 	bl	8002944 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d212      	bcs.n	8002da8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	f043 0204 	orr.w	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0a2      	b.n	8002eee <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0d6      	beq.n	8002d64 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002db6:	e070      	b.n	8002e9a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002db8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef8 <HAL_ADC_PollForConversion+0x1f4>)
 8002dba:	681c      	ldr	r4, [r3, #0]
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f001 fa69 	bl	8004294 <HAL_RCCEx_GetPeriphCLKFreq>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6919      	ldr	r1, [r3, #16]
 8002dce:	4b4b      	ldr	r3, [pc, #300]	@ (8002efc <HAL_ADC_PollForConversion+0x1f8>)
 8002dd0:	400b      	ands	r3, r1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d118      	bne.n	8002e08 <HAL_ADC_PollForConversion+0x104>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68d9      	ldr	r1, [r3, #12]
 8002ddc:	4b48      	ldr	r3, [pc, #288]	@ (8002f00 <HAL_ADC_PollForConversion+0x1fc>)
 8002dde:	400b      	ands	r3, r1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d111      	bne.n	8002e08 <HAL_ADC_PollForConversion+0x104>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6919      	ldr	r1, [r3, #16]
 8002dea:	4b46      	ldr	r3, [pc, #280]	@ (8002f04 <HAL_ADC_PollForConversion+0x200>)
 8002dec:	400b      	ands	r3, r1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <HAL_ADC_PollForConversion+0x100>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68d9      	ldr	r1, [r3, #12]
 8002df8:	4b43      	ldr	r3, [pc, #268]	@ (8002f08 <HAL_ADC_PollForConversion+0x204>)
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_PollForConversion+0x100>
 8002e00:	2314      	movs	r3, #20
 8002e02:	e020      	b.n	8002e46 <HAL_ADC_PollForConversion+0x142>
 8002e04:	2329      	movs	r3, #41	@ 0x29
 8002e06:	e01e      	b.n	8002e46 <HAL_ADC_PollForConversion+0x142>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6919      	ldr	r1, [r3, #16]
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f04 <HAL_ADC_PollForConversion+0x200>)
 8002e10:	400b      	ands	r3, r1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_ADC_PollForConversion+0x120>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68d9      	ldr	r1, [r3, #12]
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f08 <HAL_ADC_PollForConversion+0x204>)
 8002e1e:	400b      	ands	r3, r1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <HAL_ADC_PollForConversion+0x13c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6919      	ldr	r1, [r3, #16]
 8002e2a:	4b38      	ldr	r3, [pc, #224]	@ (8002f0c <HAL_ADC_PollForConversion+0x208>)
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <HAL_ADC_PollForConversion+0x140>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68d9      	ldr	r1, [r3, #12]
 8002e38:	4b34      	ldr	r3, [pc, #208]	@ (8002f0c <HAL_ADC_PollForConversion+0x208>)
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_PollForConversion+0x140>
 8002e40:	2354      	movs	r3, #84	@ 0x54
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_PollForConversion+0x142>
 8002e44:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e4c:	e021      	b.n	8002e92 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d01a      	beq.n	8002e8c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <HAL_ADC_PollForConversion+0x168>
 8002e5c:	f7ff fd72 	bl	8002944 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d20f      	bcs.n	8002e8c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d90b      	bls.n	8002e8c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e030      	b.n	8002eee <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d8d9      	bhi.n	8002e4e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f06f 0212 	mvn.w	r2, #18
 8002ea2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002eba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002ebe:	d115      	bne.n	8002eec <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d111      	bne.n	8002eec <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	24924924 	.word	0x24924924
 8002f00:	00924924 	.word	0x00924924
 8002f04:	12492492 	.word	0x12492492
 8002f08:	00492492 	.word	0x00492492
 8002f0c:	00249249 	.word	0x00249249

08002f10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x20>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e0dc      	b.n	8003102 <HAL_ADC_ConfigChannel+0x1da>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d81c      	bhi.n	8002f92 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	3b05      	subs	r3, #5
 8002f6a:	221f      	movs	r2, #31
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	4019      	ands	r1, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	3b05      	subs	r3, #5
 8002f84:	fa00 f203 	lsl.w	r2, r0, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f90:	e03c      	b.n	800300c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d81c      	bhi.n	8002fd4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	3b23      	subs	r3, #35	@ 0x23
 8002fac:	221f      	movs	r2, #31
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	4019      	ands	r1, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3b23      	subs	r3, #35	@ 0x23
 8002fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fd2:	e01b      	b.n	800300c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3b41      	subs	r3, #65	@ 0x41
 8002fe6:	221f      	movs	r2, #31
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	4019      	ands	r1, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b41      	subs	r3, #65	@ 0x41
 8003000:	fa00 f203 	lsl.w	r2, r0, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b09      	cmp	r3, #9
 8003012:	d91c      	bls.n	800304e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68d9      	ldr	r1, [r3, #12]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	3b1e      	subs	r3, #30
 8003026:	2207      	movs	r2, #7
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	4019      	ands	r1, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6898      	ldr	r0, [r3, #8]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	3b1e      	subs	r3, #30
 8003040:	fa00 f203 	lsl.w	r2, r0, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]
 800304c:	e019      	b.n	8003082 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6919      	ldr	r1, [r3, #16]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	2207      	movs	r2, #7
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	4019      	ands	r1, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6898      	ldr	r0, [r3, #8]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	fa00 f203 	lsl.w	r2, r0, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b10      	cmp	r3, #16
 8003088:	d003      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800308e:	2b11      	cmp	r3, #17
 8003090:	d132      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1d      	ldr	r2, [pc, #116]	@ (800310c <HAL_ADC_ConfigChannel+0x1e4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d125      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d126      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80030b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d11a      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030c2:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <HAL_ADC_ConfigChannel+0x1e8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a13      	ldr	r2, [pc, #76]	@ (8003114 <HAL_ADC_ConfigChannel+0x1ec>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	0c9a      	lsrs	r2, r3, #18
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030d8:	e002      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3b01      	subs	r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f9      	bne.n	80030da <HAL_ADC_ConfigChannel+0x1b2>
 80030e6:	e007      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40012400 	.word	0x40012400
 8003110:	20000000 	.word	0x20000000
 8003114:	431bde83 	.word	0x431bde83

08003118 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d040      	beq.n	80031b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003146:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <ADC_Enable+0xac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1f      	ldr	r2, [pc, #124]	@ (80031c8 <ADC_Enable+0xb0>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	0c9b      	lsrs	r3, r3, #18
 8003152:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003154:	e002      	b.n	800315c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3b01      	subs	r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f9      	bne.n	8003156 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003162:	f7ff fbef 	bl	8002944 <HAL_GetTick>
 8003166:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003168:	e01f      	b.n	80031aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800316a:	f7ff fbeb 	bl	8002944 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d918      	bls.n	80031aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d011      	beq.n	80031aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318a:	f043 0210 	orr.w	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	f043 0201 	orr.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e007      	b.n	80031ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d1d8      	bne.n	800316a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000000 	.word	0x20000000
 80031c8:	431bde83 	.word	0x431bde83

080031cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d12e      	bne.n	8003244 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031f6:	f7ff fba5 	bl	8002944 <HAL_GetTick>
 80031fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031fc:	e01b      	b.n	8003236 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031fe:	f7ff fba1 	bl	8002944 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d914      	bls.n	8003236 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10d      	bne.n	8003236 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321e:	f043 0210 	orr.w	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e007      	b.n	8003246 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d0dc      	beq.n	80031fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003260:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003278:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800327c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003282:	4a04      	ldr	r2, [pc, #16]	@ (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	60d3      	str	r3, [r2, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4906      	ldr	r1, [pc, #24]	@ (80032e8 <__NVIC_EnableIRQ+0x34>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	e000e100 	.word	0xe000e100

080032ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	@ (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	@ (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	@ 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
         );
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	@ 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033b4:	d301      	bcc.n	80033ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00f      	b.n	80033da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ba:	4a0a      	ldr	r2, [pc, #40]	@ (80033e4 <SysTick_Config+0x40>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c2:	210f      	movs	r1, #15
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	f7ff ff90 	bl	80032ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <SysTick_Config+0x40>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d2:	4b04      	ldr	r3, [pc, #16]	@ (80033e4 <SysTick_Config+0x40>)
 80033d4:	2207      	movs	r2, #7
 80033d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	e000e010 	.word	0xe000e010

080033e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff2d 	bl	8003250 <__NVIC_SetPriorityGrouping>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003410:	f7ff ff42 	bl	8003298 <__NVIC_GetPriorityGrouping>
 8003414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	6978      	ldr	r0, [r7, #20]
 800341c:	f7ff ff90 	bl	8003340 <NVIC_EncodePriority>
 8003420:	4602      	mov	r2, r0
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff5f 	bl	80032ec <__NVIC_SetPriority>
}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff35 	bl	80032b4 <__NVIC_EnableIRQ>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ffa2 	bl	80033a4 <SysTick_Config>
 8003460:	4603      	mov	r3, r0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d008      	beq.n	8003494 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2204      	movs	r2, #4
 8003486:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e020      	b.n	80034d6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 020e 	bic.w	r2, r2, #14
 80034a2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d005      	beq.n	8003504 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2204      	movs	r2, #4
 80034fc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e051      	b.n	80035a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 020e 	bic.w	r2, r2, #14
 8003512:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a22      	ldr	r2, [pc, #136]	@ (80035b4 <HAL_DMA_Abort_IT+0xd4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d029      	beq.n	8003582 <HAL_DMA_Abort_IT+0xa2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a21      	ldr	r2, [pc, #132]	@ (80035b8 <HAL_DMA_Abort_IT+0xd8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_DMA_Abort_IT+0x9e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1f      	ldr	r2, [pc, #124]	@ (80035bc <HAL_DMA_Abort_IT+0xdc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01a      	beq.n	8003578 <HAL_DMA_Abort_IT+0x98>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1e      	ldr	r2, [pc, #120]	@ (80035c0 <HAL_DMA_Abort_IT+0xe0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d012      	beq.n	8003572 <HAL_DMA_Abort_IT+0x92>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1c      	ldr	r2, [pc, #112]	@ (80035c4 <HAL_DMA_Abort_IT+0xe4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00a      	beq.n	800356c <HAL_DMA_Abort_IT+0x8c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1b      	ldr	r2, [pc, #108]	@ (80035c8 <HAL_DMA_Abort_IT+0xe8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d102      	bne.n	8003566 <HAL_DMA_Abort_IT+0x86>
 8003560:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003564:	e00e      	b.n	8003584 <HAL_DMA_Abort_IT+0xa4>
 8003566:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800356a:	e00b      	b.n	8003584 <HAL_DMA_Abort_IT+0xa4>
 800356c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003570:	e008      	b.n	8003584 <HAL_DMA_Abort_IT+0xa4>
 8003572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003576:	e005      	b.n	8003584 <HAL_DMA_Abort_IT+0xa4>
 8003578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800357c:	e002      	b.n	8003584 <HAL_DMA_Abort_IT+0xa4>
 800357e:	2310      	movs	r3, #16
 8003580:	e000      	b.n	8003584 <HAL_DMA_Abort_IT+0xa4>
 8003582:	2301      	movs	r3, #1
 8003584:	4a11      	ldr	r2, [pc, #68]	@ (80035cc <HAL_DMA_Abort_IT+0xec>)
 8003586:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
    } 
  }
  return status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40020008 	.word	0x40020008
 80035b8:	4002001c 	.word	0x4002001c
 80035bc:	40020030 	.word	0x40020030
 80035c0:	40020044 	.word	0x40020044
 80035c4:	40020058 	.word	0x40020058
 80035c8:	4002006c 	.word	0x4002006c
 80035cc:	40020000 	.word	0x40020000

080035d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b08b      	sub	sp, #44	@ 0x2c
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e2:	e169      	b.n	80038b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035e4:	2201      	movs	r2, #1
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	f040 8158 	bne.w	80038b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4a9a      	ldr	r2, [pc, #616]	@ (8003870 <HAL_GPIO_Init+0x2a0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d05e      	beq.n	80036ca <HAL_GPIO_Init+0xfa>
 800360c:	4a98      	ldr	r2, [pc, #608]	@ (8003870 <HAL_GPIO_Init+0x2a0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d875      	bhi.n	80036fe <HAL_GPIO_Init+0x12e>
 8003612:	4a98      	ldr	r2, [pc, #608]	@ (8003874 <HAL_GPIO_Init+0x2a4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d058      	beq.n	80036ca <HAL_GPIO_Init+0xfa>
 8003618:	4a96      	ldr	r2, [pc, #600]	@ (8003874 <HAL_GPIO_Init+0x2a4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d86f      	bhi.n	80036fe <HAL_GPIO_Init+0x12e>
 800361e:	4a96      	ldr	r2, [pc, #600]	@ (8003878 <HAL_GPIO_Init+0x2a8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d052      	beq.n	80036ca <HAL_GPIO_Init+0xfa>
 8003624:	4a94      	ldr	r2, [pc, #592]	@ (8003878 <HAL_GPIO_Init+0x2a8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d869      	bhi.n	80036fe <HAL_GPIO_Init+0x12e>
 800362a:	4a94      	ldr	r2, [pc, #592]	@ (800387c <HAL_GPIO_Init+0x2ac>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d04c      	beq.n	80036ca <HAL_GPIO_Init+0xfa>
 8003630:	4a92      	ldr	r2, [pc, #584]	@ (800387c <HAL_GPIO_Init+0x2ac>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d863      	bhi.n	80036fe <HAL_GPIO_Init+0x12e>
 8003636:	4a92      	ldr	r2, [pc, #584]	@ (8003880 <HAL_GPIO_Init+0x2b0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d046      	beq.n	80036ca <HAL_GPIO_Init+0xfa>
 800363c:	4a90      	ldr	r2, [pc, #576]	@ (8003880 <HAL_GPIO_Init+0x2b0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d85d      	bhi.n	80036fe <HAL_GPIO_Init+0x12e>
 8003642:	2b12      	cmp	r3, #18
 8003644:	d82a      	bhi.n	800369c <HAL_GPIO_Init+0xcc>
 8003646:	2b12      	cmp	r3, #18
 8003648:	d859      	bhi.n	80036fe <HAL_GPIO_Init+0x12e>
 800364a:	a201      	add	r2, pc, #4	@ (adr r2, 8003650 <HAL_GPIO_Init+0x80>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	080036cb 	.word	0x080036cb
 8003654:	080036a5 	.word	0x080036a5
 8003658:	080036b7 	.word	0x080036b7
 800365c:	080036f9 	.word	0x080036f9
 8003660:	080036ff 	.word	0x080036ff
 8003664:	080036ff 	.word	0x080036ff
 8003668:	080036ff 	.word	0x080036ff
 800366c:	080036ff 	.word	0x080036ff
 8003670:	080036ff 	.word	0x080036ff
 8003674:	080036ff 	.word	0x080036ff
 8003678:	080036ff 	.word	0x080036ff
 800367c:	080036ff 	.word	0x080036ff
 8003680:	080036ff 	.word	0x080036ff
 8003684:	080036ff 	.word	0x080036ff
 8003688:	080036ff 	.word	0x080036ff
 800368c:	080036ff 	.word	0x080036ff
 8003690:	080036ff 	.word	0x080036ff
 8003694:	080036ad 	.word	0x080036ad
 8003698:	080036c1 	.word	0x080036c1
 800369c:	4a79      	ldr	r2, [pc, #484]	@ (8003884 <HAL_GPIO_Init+0x2b4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036a2:	e02c      	b.n	80036fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	623b      	str	r3, [r7, #32]
          break;
 80036aa:	e029      	b.n	8003700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	3304      	adds	r3, #4
 80036b2:	623b      	str	r3, [r7, #32]
          break;
 80036b4:	e024      	b.n	8003700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	3308      	adds	r3, #8
 80036bc:	623b      	str	r3, [r7, #32]
          break;
 80036be:	e01f      	b.n	8003700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	330c      	adds	r3, #12
 80036c6:	623b      	str	r3, [r7, #32]
          break;
 80036c8:	e01a      	b.n	8003700 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036d2:	2304      	movs	r3, #4
 80036d4:	623b      	str	r3, [r7, #32]
          break;
 80036d6:	e013      	b.n	8003700 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036e0:	2308      	movs	r3, #8
 80036e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	611a      	str	r2, [r3, #16]
          break;
 80036ea:	e009      	b.n	8003700 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036ec:	2308      	movs	r3, #8
 80036ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	615a      	str	r2, [r3, #20]
          break;
 80036f6:	e003      	b.n	8003700 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036f8:	2300      	movs	r3, #0
 80036fa:	623b      	str	r3, [r7, #32]
          break;
 80036fc:	e000      	b.n	8003700 <HAL_GPIO_Init+0x130>
          break;
 80036fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2bff      	cmp	r3, #255	@ 0xff
 8003704:	d801      	bhi.n	800370a <HAL_GPIO_Init+0x13a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	e001      	b.n	800370e <HAL_GPIO_Init+0x13e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2bff      	cmp	r3, #255	@ 0xff
 8003714:	d802      	bhi.n	800371c <HAL_GPIO_Init+0x14c>
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	e002      	b.n	8003722 <HAL_GPIO_Init+0x152>
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	3b08      	subs	r3, #8
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	210f      	movs	r1, #15
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	401a      	ands	r2, r3
 8003734:	6a39      	ldr	r1, [r7, #32]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	431a      	orrs	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80b1 	beq.w	80038b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003750:	4b4d      	ldr	r3, [pc, #308]	@ (8003888 <HAL_GPIO_Init+0x2b8>)
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	4a4c      	ldr	r2, [pc, #304]	@ (8003888 <HAL_GPIO_Init+0x2b8>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6193      	str	r3, [r2, #24]
 800375c:	4b4a      	ldr	r3, [pc, #296]	@ (8003888 <HAL_GPIO_Init+0x2b8>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003768:	4a48      	ldr	r2, [pc, #288]	@ (800388c <HAL_GPIO_Init+0x2bc>)
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	3302      	adds	r3, #2
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	220f      	movs	r2, #15
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a40      	ldr	r2, [pc, #256]	@ (8003890 <HAL_GPIO_Init+0x2c0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d013      	beq.n	80037bc <HAL_GPIO_Init+0x1ec>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a3f      	ldr	r2, [pc, #252]	@ (8003894 <HAL_GPIO_Init+0x2c4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00d      	beq.n	80037b8 <HAL_GPIO_Init+0x1e8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a3e      	ldr	r2, [pc, #248]	@ (8003898 <HAL_GPIO_Init+0x2c8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d007      	beq.n	80037b4 <HAL_GPIO_Init+0x1e4>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a3d      	ldr	r2, [pc, #244]	@ (800389c <HAL_GPIO_Init+0x2cc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_GPIO_Init+0x1e0>
 80037ac:	2303      	movs	r3, #3
 80037ae:	e006      	b.n	80037be <HAL_GPIO_Init+0x1ee>
 80037b0:	2304      	movs	r3, #4
 80037b2:	e004      	b.n	80037be <HAL_GPIO_Init+0x1ee>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e002      	b.n	80037be <HAL_GPIO_Init+0x1ee>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_GPIO_Init+0x1ee>
 80037bc:	2300      	movs	r3, #0
 80037be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c0:	f002 0203 	and.w	r2, r2, #3
 80037c4:	0092      	lsls	r2, r2, #2
 80037c6:	4093      	lsls	r3, r2
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037ce:	492f      	ldr	r1, [pc, #188]	@ (800388c <HAL_GPIO_Init+0x2bc>)
 80037d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	3302      	adds	r3, #2
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d006      	beq.n	80037f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037e8:	4b2d      	ldr	r3, [pc, #180]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	492c      	ldr	r1, [pc, #176]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]
 80037f4:	e006      	b.n	8003804 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037f6:	4b2a      	ldr	r3, [pc, #168]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	4928      	ldr	r1, [pc, #160]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 8003800:	4013      	ands	r3, r2
 8003802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d006      	beq.n	800381e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003810:	4b23      	ldr	r3, [pc, #140]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	4922      	ldr	r1, [pc, #136]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	60cb      	str	r3, [r1, #12]
 800381c:	e006      	b.n	800382c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800381e:	4b20      	ldr	r3, [pc, #128]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	43db      	mvns	r3, r3
 8003826:	491e      	ldr	r1, [pc, #120]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 8003828:	4013      	ands	r3, r2
 800382a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d006      	beq.n	8003846 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003838:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	4918      	ldr	r1, [pc, #96]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
 8003844:	e006      	b.n	8003854 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003846:	4b16      	ldr	r3, [pc, #88]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	43db      	mvns	r3, r3
 800384e:	4914      	ldr	r1, [pc, #80]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 8003850:	4013      	ands	r3, r2
 8003852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d021      	beq.n	80038a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003860:	4b0f      	ldr	r3, [pc, #60]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	490e      	ldr	r1, [pc, #56]	@ (80038a0 <HAL_GPIO_Init+0x2d0>)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]
 800386c:	e021      	b.n	80038b2 <HAL_GPIO_Init+0x2e2>
 800386e:	bf00      	nop
 8003870:	10320000 	.word	0x10320000
 8003874:	10310000 	.word	0x10310000
 8003878:	10220000 	.word	0x10220000
 800387c:	10210000 	.word	0x10210000
 8003880:	10120000 	.word	0x10120000
 8003884:	10110000 	.word	0x10110000
 8003888:	40021000 	.word	0x40021000
 800388c:	40010000 	.word	0x40010000
 8003890:	40010800 	.word	0x40010800
 8003894:	40010c00 	.word	0x40010c00
 8003898:	40011000 	.word	0x40011000
 800389c:	40011400 	.word	0x40011400
 80038a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <HAL_GPIO_Init+0x304>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	4909      	ldr	r1, [pc, #36]	@ (80038d4 <HAL_GPIO_Init+0x304>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	3301      	adds	r3, #1
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	fa22 f303 	lsr.w	r3, r2, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f47f ae8e 	bne.w	80035e4 <HAL_GPIO_Init+0x14>
  }
}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	372c      	adds	r7, #44	@ 0x2c
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	40010400 	.word	0x40010400

080038d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
 80038e4:	4613      	mov	r3, r2
 80038e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038e8:	787b      	ldrb	r3, [r7, #1]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038f4:	e003      	b.n	80038fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038f6:	887b      	ldrh	r3, [r7, #2]
 80038f8:	041a      	lsls	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	611a      	str	r2, [r3, #16]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e272      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8087 	beq.w	8003a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003928:	4b92      	ldr	r3, [pc, #584]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b04      	cmp	r3, #4
 8003932:	d00c      	beq.n	800394e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003934:	4b8f      	ldr	r3, [pc, #572]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b08      	cmp	r3, #8
 800393e:	d112      	bne.n	8003966 <HAL_RCC_OscConfig+0x5e>
 8003940:	4b8c      	ldr	r3, [pc, #560]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800394c:	d10b      	bne.n	8003966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394e:	4b89      	ldr	r3, [pc, #548]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d06c      	beq.n	8003a34 <HAL_RCC_OscConfig+0x12c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d168      	bne.n	8003a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e24c      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396e:	d106      	bne.n	800397e <HAL_RCC_OscConfig+0x76>
 8003970:	4b80      	ldr	r3, [pc, #512]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a7f      	ldr	r2, [pc, #508]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e02e      	b.n	80039dc <HAL_RCC_OscConfig+0xd4>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x98>
 8003986:	4b7b      	ldr	r3, [pc, #492]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7a      	ldr	r2, [pc, #488]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 800398c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b78      	ldr	r3, [pc, #480]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a77      	ldr	r2, [pc, #476]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003998:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e01d      	b.n	80039dc <HAL_RCC_OscConfig+0xd4>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0xbc>
 80039aa:	4b72      	ldr	r3, [pc, #456]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a71      	ldr	r2, [pc, #452]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0xd4>
 80039c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b68      	ldr	r3, [pc, #416]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a67      	ldr	r2, [pc, #412]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fe ffae 	bl	8002944 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ec:	f7fe ffaa 	bl	8002944 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	@ 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e200      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0xe4>
 8003a0a:	e014      	b.n	8003a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe ff9a 	bl	8002944 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe ff96 	bl	8002944 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	@ 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1ec      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a26:	4b53      	ldr	r3, [pc, #332]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x10c>
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d063      	beq.n	8003b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a42:	4b4c      	ldr	r3, [pc, #304]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a4e:	4b49      	ldr	r3, [pc, #292]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d11c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x18c>
 8003a5a:	4b46      	ldr	r3, [pc, #280]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	4b43      	ldr	r3, [pc, #268]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_RCC_OscConfig+0x176>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e1c0      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4939      	ldr	r1, [pc, #228]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a92:	e03a      	b.n	8003b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9c:	4b36      	ldr	r3, [pc, #216]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fe ff4f 	bl	8002944 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7fe ff4b 	bl	8002944 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e1a1      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4927      	ldr	r1, [pc, #156]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ade:	4b26      	ldr	r3, [pc, #152]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe ff2e 	bl	8002944 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fe ff2a 	bl	8002944 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e180      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d03a      	beq.n	8003b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d019      	beq.n	8003b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b17      	ldr	r3, [pc, #92]	@ (8003b7c <HAL_RCC_OscConfig+0x274>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b24:	f7fe ff0e 	bl	8002944 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fe ff0a 	bl	8002944 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e160      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f000 face 	bl	80040ec <RCC_Delay>
 8003b50:	e01c      	b.n	8003b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b52:	4b0a      	ldr	r3, [pc, #40]	@ (8003b7c <HAL_RCC_OscConfig+0x274>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b58:	f7fe fef4 	bl	8002944 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5e:	e00f      	b.n	8003b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fe fef0 	bl	8002944 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d908      	bls.n	8003b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e146      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	42420000 	.word	0x42420000
 8003b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	4b92      	ldr	r3, [pc, #584]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e9      	bne.n	8003b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80a6 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10d      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003baa:	4b88      	ldr	r3, [pc, #544]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	4a87      	ldr	r2, [pc, #540]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb4:	61d3      	str	r3, [r2, #28]
 8003bb6:	4b85      	ldr	r3, [pc, #532]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc6:	4b82      	ldr	r3, [pc, #520]	@ (8003dd0 <HAL_RCC_OscConfig+0x4c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d118      	bne.n	8003c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8003dd0 <HAL_RCC_OscConfig+0x4c8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8003dd0 <HAL_RCC_OscConfig+0x4c8>)
 8003bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bde:	f7fe feb1 	bl	8002944 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be6:	f7fe fead 	bl	8002944 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b64      	cmp	r3, #100	@ 0x64
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e103      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	4b75      	ldr	r3, [pc, #468]	@ (8003dd0 <HAL_RCC_OscConfig+0x4c8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCC_OscConfig+0x312>
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4a6e      	ldr	r2, [pc, #440]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6213      	str	r3, [r2, #32]
 8003c18:	e02d      	b.n	8003c76 <HAL_RCC_OscConfig+0x36e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x334>
 8003c22:	4b6a      	ldr	r3, [pc, #424]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	4a69      	ldr	r2, [pc, #420]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	6213      	str	r3, [r2, #32]
 8003c2e:	4b67      	ldr	r3, [pc, #412]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4a66      	ldr	r2, [pc, #408]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	f023 0304 	bic.w	r3, r3, #4
 8003c38:	6213      	str	r3, [r2, #32]
 8003c3a:	e01c      	b.n	8003c76 <HAL_RCC_OscConfig+0x36e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	d10c      	bne.n	8003c5e <HAL_RCC_OscConfig+0x356>
 8003c44:	4b61      	ldr	r3, [pc, #388]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4a60      	ldr	r2, [pc, #384]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6213      	str	r3, [r2, #32]
 8003c50:	4b5e      	ldr	r3, [pc, #376]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4a5d      	ldr	r2, [pc, #372]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6213      	str	r3, [r2, #32]
 8003c5c:	e00b      	b.n	8003c76 <HAL_RCC_OscConfig+0x36e>
 8003c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	4a5a      	ldr	r2, [pc, #360]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6213      	str	r3, [r2, #32]
 8003c6a:	4b58      	ldr	r3, [pc, #352]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4a57      	ldr	r2, [pc, #348]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d015      	beq.n	8003caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7e:	f7fe fe61 	bl	8002944 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fe fe5d 	bl	8002944 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e0b1      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ee      	beq.n	8003c86 <HAL_RCC_OscConfig+0x37e>
 8003ca8:	e014      	b.n	8003cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003caa:	f7fe fe4b 	bl	8002944 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fe fe47 	bl	8002944 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e09b      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc8:	4b40      	ldr	r3, [pc, #256]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ee      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b3c      	ldr	r3, [pc, #240]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4a3b      	ldr	r2, [pc, #236]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8087 	beq.w	8003dfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf0:	4b36      	ldr	r3, [pc, #216]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d061      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d146      	bne.n	8003d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d04:	4b33      	ldr	r3, [pc, #204]	@ (8003dd4 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7fe fe1b 	bl	8002944 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fe fe17 	bl	8002944 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e06d      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d24:	4b29      	ldr	r3, [pc, #164]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d38:	d108      	bne.n	8003d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d3a:	4b24      	ldr	r3, [pc, #144]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	4921      	ldr	r1, [pc, #132]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a19      	ldr	r1, [r3, #32]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	491b      	ldr	r1, [pc, #108]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d64:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd4 <HAL_RCC_OscConfig+0x4cc>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6a:	f7fe fdeb 	bl	8002944 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d72:	f7fe fde7 	bl	8002944 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e03d      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d84:	4b11      	ldr	r3, [pc, #68]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x46a>
 8003d90:	e035      	b.n	8003dfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <HAL_RCC_OscConfig+0x4cc>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fe fdd4 	bl	8002944 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da0:	f7fe fdd0 	bl	8002944 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e026      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db2:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x498>
 8003dbe:	e01e      	b.n	8003dfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e019      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <HAL_RCC_OscConfig+0x500>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d001      	beq.n	8003dfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000

08003e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0d0      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e20:	4b6a      	ldr	r3, [pc, #424]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d910      	bls.n	8003e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b67      	ldr	r3, [pc, #412]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 0207 	bic.w	r2, r3, #7
 8003e36:	4965      	ldr	r1, [pc, #404]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3e:	4b63      	ldr	r3, [pc, #396]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0b8      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d020      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e68:	4b59      	ldr	r3, [pc, #356]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4a58      	ldr	r2, [pc, #352]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e80:	4b53      	ldr	r3, [pc, #332]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4a52      	ldr	r2, [pc, #328]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e8c:	4b50      	ldr	r3, [pc, #320]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	494d      	ldr	r1, [pc, #308]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d040      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b47      	ldr	r3, [pc, #284]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d115      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e07f      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	4b41      	ldr	r3, [pc, #260]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e073      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eda:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e06b      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eea:	4b39      	ldr	r3, [pc, #228]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4936      	ldr	r1, [pc, #216]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003efc:	f7fe fd22 	bl	8002944 <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7fe fd1e 	bl	8002944 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e053      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1eb      	bne.n	8003f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b27      	ldr	r3, [pc, #156]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d210      	bcs.n	8003f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 0207 	bic.w	r2, r3, #7
 8003f42:	4922      	ldr	r1, [pc, #136]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4a:	4b20      	ldr	r3, [pc, #128]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e032      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f68:	4b19      	ldr	r3, [pc, #100]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4916      	ldr	r1, [pc, #88]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f86:	4b12      	ldr	r3, [pc, #72]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	490e      	ldr	r1, [pc, #56]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f9a:	f000 f821 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	091b      	lsrs	r3, r3, #4
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	490a      	ldr	r1, [pc, #40]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fac:	5ccb      	ldrb	r3, [r1, r3]
 8003fae:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb2:	4a09      	ldr	r2, [pc, #36]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8003fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fb6:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <HAL_RCC_ClockConfig+0x1d0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fc80 	bl	80028c0 <HAL_InitTick>

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40022000 	.word	0x40022000
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	080085f8 	.word	0x080085f8
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	20000004 	.word	0x20000004

08003fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b04      	cmp	r3, #4
 8004008:	d002      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x30>
 800400a:	2b08      	cmp	r3, #8
 800400c:	d003      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0x36>
 800400e:	e027      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004010:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x98>)
 8004012:	613b      	str	r3, [r7, #16]
      break;
 8004014:	e027      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	0c9b      	lsrs	r3, r3, #18
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	4a17      	ldr	r2, [pc, #92]	@ (800407c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004020:	5cd3      	ldrb	r3, [r2, r3]
 8004022:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d010      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800402e:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x94>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	0c5b      	lsrs	r3, r3, #17
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	4a11      	ldr	r2, [pc, #68]	@ (8004080 <HAL_RCC_GetSysClockFreq+0xa0>)
 800403a:	5cd3      	ldrb	r3, [r2, r3]
 800403c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a0d      	ldr	r2, [pc, #52]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x98>)
 8004042:	fb03 f202 	mul.w	r2, r3, r2
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e004      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a0c      	ldr	r2, [pc, #48]	@ (8004084 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	613b      	str	r3, [r7, #16]
      break;
 800405e:	e002      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x98>)
 8004062:	613b      	str	r3, [r7, #16]
      break;
 8004064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004066:	693b      	ldr	r3, [r7, #16]
}
 8004068:	4618      	mov	r0, r3
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	007a1200 	.word	0x007a1200
 800407c:	08008610 	.word	0x08008610
 8004080:	08008620 	.word	0x08008620
 8004084:	003d0900 	.word	0x003d0900

08004088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800408c:	4b02      	ldr	r3, [pc, #8]	@ (8004098 <HAL_RCC_GetHCLKFreq+0x10>)
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr
 8004098:	20000000 	.word	0x20000000

0800409c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040a0:	f7ff fff2 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4903      	ldr	r1, [pc, #12]	@ (80040c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	08008608 	.word	0x08008608

080040c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c8:	f7ff ffde 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	0adb      	lsrs	r3, r3, #11
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4903      	ldr	r1, [pc, #12]	@ (80040e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40021000 	.word	0x40021000
 80040e8:	08008608 	.word	0x08008608

080040ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004120 <RCC_Delay+0x34>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004124 <RCC_Delay+0x38>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0a5b      	lsrs	r3, r3, #9
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004108:	bf00      	nop
  }
  while (Delay --);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1e5a      	subs	r2, r3, #1
 800410e:	60fa      	str	r2, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f9      	bne.n	8004108 <RCC_Delay+0x1c>
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	20000000 	.word	0x20000000
 8004124:	10624dd3 	.word	0x10624dd3

08004128 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d07d      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004144:	2300      	movs	r3, #0
 8004146:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004148:	4b4f      	ldr	r3, [pc, #316]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10d      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004154:	4b4c      	ldr	r3, [pc, #304]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	4a4b      	ldr	r2, [pc, #300]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415e:	61d3      	str	r3, [r2, #28]
 8004160:	4b49      	ldr	r3, [pc, #292]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416c:	2301      	movs	r3, #1
 800416e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004170:	4b46      	ldr	r3, [pc, #280]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d118      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417c:	4b43      	ldr	r3, [pc, #268]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a42      	ldr	r2, [pc, #264]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004186:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004188:	f7fe fbdc 	bl	8002944 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418e:	e008      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004190:	f7fe fbd8 	bl	8002944 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	@ 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e06d      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a2:	4b3a      	ldr	r3, [pc, #232]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ae:	4b36      	ldr	r3, [pc, #216]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02e      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d027      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041e2:	4a29      	ldr	r2, [pc, #164]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d014      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fe fba7 	bl	8002944 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f8:	e00a      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fa:	f7fe fba3 	bl	8002944 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004208:	4293      	cmp	r3, r2
 800420a:	d901      	bls.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e036      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004210:	4b1d      	ldr	r3, [pc, #116]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ee      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421c:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4917      	ldr	r1, [pc, #92]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422a:	4313      	orrs	r3, r2
 800422c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800422e:	7dfb      	ldrb	r3, [r7, #23]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004234:	4b14      	ldr	r3, [pc, #80]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	4a13      	ldr	r2, [pc, #76]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800424c:	4b0e      	ldr	r3, [pc, #56]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	490b      	ldr	r1, [pc, #44]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800426a:	4b07      	ldr	r3, [pc, #28]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4904      	ldr	r1, [pc, #16]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004278:	4313      	orrs	r3, r2
 800427a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	40007000 	.word	0x40007000
 8004290:	42420440 	.word	0x42420440

08004294 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	f200 808a 	bhi.w	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d045      	beq.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d075      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80042ca:	e082      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80042cc:	4b46      	ldr	r3, [pc, #280]	@ (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042d2:	4b45      	ldr	r3, [pc, #276]	@ (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d07b      	beq.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	0c9b      	lsrs	r3, r3, #18
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	4a41      	ldr	r2, [pc, #260]	@ (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80042e8:	5cd3      	ldrb	r3, [r2, r3]
 80042ea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d015      	beq.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042f6:	4b3c      	ldr	r3, [pc, #240]	@ (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	0c5b      	lsrs	r3, r3, #17
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	4a3b      	ldr	r2, [pc, #236]	@ (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004302:	5cd3      	ldrb	r3, [r2, r3]
 8004304:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00d      	beq.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004310:	4a38      	ldr	r2, [pc, #224]	@ (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	fbb2 f2f3 	udiv	r2, r2, r3
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	e004      	b.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4a34      	ldr	r2, [pc, #208]	@ (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800432c:	4b2e      	ldr	r3, [pc, #184]	@ (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004334:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004338:	d102      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	61bb      	str	r3, [r7, #24]
      break;
 800433e:	e04a      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4a2d      	ldr	r2, [pc, #180]	@ (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	61bb      	str	r3, [r7, #24]
      break;
 800434e:	e042      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004350:	4b25      	ldr	r3, [pc, #148]	@ (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800435c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004360:	d108      	bne.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800436c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	e01f      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800437e:	d109      	bne.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004380:	4b19      	ldr	r3, [pc, #100]	@ (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800438c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	e00f      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800439a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800439e:	d11c      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043a0:	4b11      	ldr	r3, [pc, #68]	@ (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d016      	beq.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80043ac:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80043b0:	61bb      	str	r3, [r7, #24]
      break;
 80043b2:	e012      	b.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043b4:	e011      	b.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043b6:	f7ff fe85 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 80043ba:	4602      	mov	r2, r0
 80043bc:	4b0a      	ldr	r3, [pc, #40]	@ (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	0b9b      	lsrs	r3, r3, #14
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	3301      	adds	r3, #1
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	61bb      	str	r3, [r7, #24]
      break;
 80043d0:	e004      	b.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043da:	bf00      	nop
    }
  }
  return (frequency);
 80043dc:	69bb      	ldr	r3, [r7, #24]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	08008624 	.word	0x08008624
 80043f0:	08008634 	.word	0x08008634
 80043f4:	007a1200 	.word	0x007a1200
 80043f8:	003d0900 	.word	0x003d0900
 80043fc:	aaaaaaab 	.word	0xaaaaaaab

08004400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e042      	b.n	8004498 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd ff7a 	bl	8002320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2224      	movs	r2, #36	@ 0x24
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fdb7 	bl	8004fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	@ 0x28
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d175      	bne.n	80045ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_UART_Transmit+0x2c>
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e06e      	b.n	80045ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2221      	movs	r2, #33	@ 0x21
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044de:	f7fe fa31 	bl	8002944 <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f8:	d108      	bne.n	800450c <HAL_UART_Transmit+0x6c>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	e003      	b.n	8004514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004514:	e02e      	b.n	8004574 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2180      	movs	r1, #128	@ 0x80
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fb1c 	bl	8004b5e <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e03a      	b.n	80045ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800454c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	3302      	adds	r3, #2
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	e007      	b.n	8004566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	3301      	adds	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1cb      	bne.n	8004516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	2140      	movs	r1, #64	@ 0x40
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fae8 	bl	8004b5e <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e006      	b.n	80045ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	4613      	mov	r3, r2
 80045c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d112      	bne.n	80045f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_UART_Receive_IT+0x26>
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e00b      	b.n	80045f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	461a      	mov	r2, r3
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fb0f 	bl	8004c10 <UART_Start_Receive_IT>
 80045f2:	4603      	mov	r3, r0
 80045f4:	e000      	b.n	80045f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
  }
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b0ba      	sub	sp, #232	@ 0xe8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004626:	2300      	movs	r3, #0
 8004628:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800463e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10f      	bne.n	8004666 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <HAL_UART_IRQHandler+0x66>
 8004652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fbec 	bl	8004e3c <UART_Receive_IT>
      return;
 8004664:	e25b      	b.n	8004b1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80de 	beq.w	800482c <HAL_UART_IRQHandler+0x22c>
 8004670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800467c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004680:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80d1 	beq.w	800482c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <HAL_UART_IRQHandler+0xae>
 8004696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800469a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a6:	f043 0201 	orr.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_UART_IRQHandler+0xd2>
 80046ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ca:	f043 0202 	orr.w	r2, r3, #2
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <HAL_UART_IRQHandler+0xf6>
 80046de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	f043 0204 	orr.w	r2, r3, #4
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d011      	beq.n	8004726 <HAL_UART_IRQHandler+0x126>
 8004702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d105      	bne.n	800471a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800470e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	f043 0208 	orr.w	r2, r3, #8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 81f2 	beq.w	8004b14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <HAL_UART_IRQHandler+0x14e>
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fb77 	bl	8004e3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <HAL_UART_IRQHandler+0x17a>
 8004772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d04f      	beq.n	800481a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fa81 	bl	8004c82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d041      	beq.n	8004812 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3314      	adds	r3, #20
 80047b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1d9      	bne.n	800478e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d013      	beq.n	800480a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e6:	4a7e      	ldr	r2, [pc, #504]	@ (80049e0 <HAL_UART_IRQHandler+0x3e0>)
 80047e8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fe76 	bl	80034e0 <HAL_DMA_Abort_IT>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d016      	beq.n	8004828 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004804:	4610      	mov	r0, r2
 8004806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004808:	e00e      	b.n	8004828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f993 	bl	8004b36 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004810:	e00a      	b.n	8004828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f98f 	bl	8004b36 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004818:	e006      	b.n	8004828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f98b 	bl	8004b36 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004826:	e175      	b.n	8004b14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	bf00      	nop
    return;
 800482a:	e173      	b.n	8004b14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	2b01      	cmp	r3, #1
 8004832:	f040 814f 	bne.w	8004ad4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8148 	beq.w	8004ad4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8141 	beq.w	8004ad4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004852:	2300      	movs	r3, #0
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 80b6 	beq.w	80049e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004884:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8145 	beq.w	8004b18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004896:	429a      	cmp	r2, r3
 8004898:	f080 813e 	bcs.w	8004b18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	f000 8088 	beq.w	80049c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1d9      	bne.n	80048b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800490c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3314      	adds	r3, #20
 800491c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004920:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004924:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004928:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004932:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e1      	bne.n	80048fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004948:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800494a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800494e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800495c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800495e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004962:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800496a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e3      	bne.n	8004938 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800498e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004990:	f023 0310 	bic.w	r3, r3, #16
 8004994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e3      	bne.n	800497e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fd55 	bl	800346a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8b6 	bl	8004b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049dc:	e09c      	b.n	8004b18 <HAL_UART_IRQHandler+0x518>
 80049de:	bf00      	nop
 80049e0:	08004d47 	.word	0x08004d47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 808e 	beq.w	8004b1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8089 	beq.w	8004b1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e3      	bne.n	8004a0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3314      	adds	r3, #20
 8004a48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	623b      	str	r3, [r7, #32]
   return(result);
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3314      	adds	r3, #20
 8004a62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a66:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e3      	bne.n	8004a42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0310 	bic.w	r3, r3, #16
 8004a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004aac:	61fa      	str	r2, [r7, #28]
 8004aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	69b9      	ldr	r1, [r7, #24]
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e3      	bne.n	8004a88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ac6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f83b 	bl	8004b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ad2:	e023      	b.n	8004b1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <HAL_UART_IRQHandler+0x4f4>
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f93e 	bl	8004d6e <UART_Transmit_IT>
    return;
 8004af2:	e014      	b.n	8004b1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00e      	beq.n	8004b1e <HAL_UART_IRQHandler+0x51e>
 8004b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f97d 	bl	8004e0c <UART_EndTransmit_IT>
    return;
 8004b12:	e004      	b.n	8004b1e <HAL_UART_IRQHandler+0x51e>
    return;
 8004b14:	bf00      	nop
 8004b16:	e002      	b.n	8004b1e <HAL_UART_IRQHandler+0x51e>
      return;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <HAL_UART_IRQHandler+0x51e>
      return;
 8004b1c:	bf00      	nop
  }
}
 8004b1e:	37e8      	adds	r7, #232	@ 0xe8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr

08004b36 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr

08004b5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b086      	sub	sp, #24
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6e:	e03b      	b.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d037      	beq.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fd fee4 	bl	8002944 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	6a3a      	ldr	r2, [r7, #32]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x30>
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e03a      	b.n	8004c08 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d023      	beq.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b80      	cmp	r3, #128	@ 0x80
 8004ba4:	d020      	beq.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b40      	cmp	r3, #64	@ 0x40
 8004baa:	d01d      	beq.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d116      	bne.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f856 	bl	8004c82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2208      	movs	r2, #8
 8004bda:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e00f      	b.n	8004c08 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d0b4      	beq.n	8004b70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2222      	movs	r2, #34	@ 0x22
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c54:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0220 	orr.w	r2, r2, #32
 8004c74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr

08004c82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b095      	sub	sp, #84	@ 0x54
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004caa:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e5      	bne.n	8004c8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3314      	adds	r3, #20
 8004cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1e5      	bne.n	8004cbe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d119      	bne.n	8004d2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f023 0310 	bic.w	r3, r3, #16
 8004d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d1a:	61ba      	str	r2, [r7, #24]
 8004d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6979      	ldr	r1, [r7, #20]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	613b      	str	r3, [r7, #16]
   return(result);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e5      	bne.n	8004cfa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d3c:	bf00      	nop
 8004d3e:	3754      	adds	r7, #84	@ 0x54
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr

08004d46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff fee8 	bl	8004b36 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b21      	cmp	r3, #33	@ 0x21
 8004d80:	d13e      	bne.n	8004e00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d8a:	d114      	bne.n	8004db6 <UART_Transmit_IT+0x48>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d110      	bne.n	8004db6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	1c9a      	adds	r2, r3, #2
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	621a      	str	r2, [r3, #32]
 8004db4:	e008      	b.n	8004dc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6211      	str	r1, [r2, #32]
 8004dc0:	781a      	ldrb	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10f      	bne.n	8004dfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e000      	b.n	8004e02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
  }
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr

08004e0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fe79 	bl	8004b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	@ 0x30
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b22      	cmp	r3, #34	@ 0x22
 8004e4e:	f040 80ae 	bne.w	8004fae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e5a:	d117      	bne.n	8004e8c <UART_Receive_IT+0x50>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d113      	bne.n	8004e8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e8a:	e026      	b.n	8004eda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e9e:	d007      	beq.n	8004eb0 <UART_Receive_IT+0x74>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <UART_Receive_IT+0x82>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	e008      	b.n	8004ed0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ece:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d15d      	bne.n	8004faa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0220 	bic.w	r2, r2, #32
 8004efc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d135      	bne.n	8004fa0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	330c      	adds	r3, #12
 8004f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f023 0310 	bic.w	r3, r3, #16
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5a:	623a      	str	r2, [r7, #32]
 8004f5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	69f9      	ldr	r1, [r7, #28]
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d10a      	bne.n	8004f92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f96:	4619      	mov	r1, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fdd5 	bl	8004b48 <HAL_UARTEx_RxEventCallback>
 8004f9e:	e002      	b.n	8004fa6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fd fb53 	bl	800264c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e002      	b.n	8004fb0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e000      	b.n	8004fb0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
  }
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3730      	adds	r7, #48	@ 0x30
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004ff2:	f023 030c 	bic.w	r3, r3, #12
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2c      	ldr	r2, [pc, #176]	@ (80050cc <UART_SetConfig+0x114>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d103      	bne.n	8005028 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005020:	f7ff f850 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	e002      	b.n	800502e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005028:	f7ff f838 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 800502c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009a      	lsls	r2, r3, #2
 8005038:	441a      	add	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	4a22      	ldr	r2, [pc, #136]	@ (80050d0 <UART_SetConfig+0x118>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	0119      	lsls	r1, r3, #4
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009a      	lsls	r2, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	fbb2 f2f3 	udiv	r2, r2, r3
 8005064:	4b1a      	ldr	r3, [pc, #104]	@ (80050d0 <UART_SetConfig+0x118>)
 8005066:	fba3 0302 	umull	r0, r3, r3, r2
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	2064      	movs	r0, #100	@ 0x64
 800506e:	fb00 f303 	mul.w	r3, r0, r3
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	3332      	adds	r3, #50	@ 0x32
 8005078:	4a15      	ldr	r2, [pc, #84]	@ (80050d0 <UART_SetConfig+0x118>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005084:	4419      	add	r1, r3
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009a      	lsls	r2, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	fbb2 f2f3 	udiv	r2, r2, r3
 800509c:	4b0c      	ldr	r3, [pc, #48]	@ (80050d0 <UART_SetConfig+0x118>)
 800509e:	fba3 0302 	umull	r0, r3, r3, r2
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	2064      	movs	r0, #100	@ 0x64
 80050a6:	fb00 f303 	mul.w	r3, r0, r3
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	3332      	adds	r3, #50	@ 0x32
 80050b0:	4a07      	ldr	r2, [pc, #28]	@ (80050d0 <UART_SetConfig+0x118>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	440a      	add	r2, r1
 80050c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40013800 	.word	0x40013800
 80050d0:	51eb851f 	.word	0x51eb851f

080050d4 <atoi>:
 80050d4:	220a      	movs	r2, #10
 80050d6:	2100      	movs	r1, #0
 80050d8:	f000 b87a 	b.w	80051d0 <strtol>

080050dc <_strtol_l.isra.0>:
 80050dc:	2b24      	cmp	r3, #36	@ 0x24
 80050de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e2:	4686      	mov	lr, r0
 80050e4:	4690      	mov	r8, r2
 80050e6:	d801      	bhi.n	80050ec <_strtol_l.isra.0+0x10>
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d106      	bne.n	80050fa <_strtol_l.isra.0+0x1e>
 80050ec:	f000 ffc0 	bl	8006070 <__errno>
 80050f0:	2316      	movs	r3, #22
 80050f2:	6003      	str	r3, [r0, #0]
 80050f4:	2000      	movs	r0, #0
 80050f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fa:	460d      	mov	r5, r1
 80050fc:	4833      	ldr	r0, [pc, #204]	@ (80051cc <_strtol_l.isra.0+0xf0>)
 80050fe:	462a      	mov	r2, r5
 8005100:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005104:	5d06      	ldrb	r6, [r0, r4]
 8005106:	f016 0608 	ands.w	r6, r6, #8
 800510a:	d1f8      	bne.n	80050fe <_strtol_l.isra.0+0x22>
 800510c:	2c2d      	cmp	r4, #45	@ 0x2d
 800510e:	d110      	bne.n	8005132 <_strtol_l.isra.0+0x56>
 8005110:	2601      	movs	r6, #1
 8005112:	782c      	ldrb	r4, [r5, #0]
 8005114:	1c95      	adds	r5, r2, #2
 8005116:	f033 0210 	bics.w	r2, r3, #16
 800511a:	d115      	bne.n	8005148 <_strtol_l.isra.0+0x6c>
 800511c:	2c30      	cmp	r4, #48	@ 0x30
 800511e:	d10d      	bne.n	800513c <_strtol_l.isra.0+0x60>
 8005120:	782a      	ldrb	r2, [r5, #0]
 8005122:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005126:	2a58      	cmp	r2, #88	@ 0x58
 8005128:	d108      	bne.n	800513c <_strtol_l.isra.0+0x60>
 800512a:	786c      	ldrb	r4, [r5, #1]
 800512c:	3502      	adds	r5, #2
 800512e:	2310      	movs	r3, #16
 8005130:	e00a      	b.n	8005148 <_strtol_l.isra.0+0x6c>
 8005132:	2c2b      	cmp	r4, #43	@ 0x2b
 8005134:	bf04      	itt	eq
 8005136:	782c      	ldrbeq	r4, [r5, #0]
 8005138:	1c95      	addeq	r5, r2, #2
 800513a:	e7ec      	b.n	8005116 <_strtol_l.isra.0+0x3a>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f6      	bne.n	800512e <_strtol_l.isra.0+0x52>
 8005140:	2c30      	cmp	r4, #48	@ 0x30
 8005142:	bf14      	ite	ne
 8005144:	230a      	movne	r3, #10
 8005146:	2308      	moveq	r3, #8
 8005148:	2200      	movs	r2, #0
 800514a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800514e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005152:	fbbc f9f3 	udiv	r9, ip, r3
 8005156:	4610      	mov	r0, r2
 8005158:	fb03 ca19 	mls	sl, r3, r9, ip
 800515c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005160:	2f09      	cmp	r7, #9
 8005162:	d80f      	bhi.n	8005184 <_strtol_l.isra.0+0xa8>
 8005164:	463c      	mov	r4, r7
 8005166:	42a3      	cmp	r3, r4
 8005168:	dd1b      	ble.n	80051a2 <_strtol_l.isra.0+0xc6>
 800516a:	1c57      	adds	r7, r2, #1
 800516c:	d007      	beq.n	800517e <_strtol_l.isra.0+0xa2>
 800516e:	4581      	cmp	r9, r0
 8005170:	d314      	bcc.n	800519c <_strtol_l.isra.0+0xc0>
 8005172:	d101      	bne.n	8005178 <_strtol_l.isra.0+0x9c>
 8005174:	45a2      	cmp	sl, r4
 8005176:	db11      	blt.n	800519c <_strtol_l.isra.0+0xc0>
 8005178:	2201      	movs	r2, #1
 800517a:	fb00 4003 	mla	r0, r0, r3, r4
 800517e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005182:	e7eb      	b.n	800515c <_strtol_l.isra.0+0x80>
 8005184:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005188:	2f19      	cmp	r7, #25
 800518a:	d801      	bhi.n	8005190 <_strtol_l.isra.0+0xb4>
 800518c:	3c37      	subs	r4, #55	@ 0x37
 800518e:	e7ea      	b.n	8005166 <_strtol_l.isra.0+0x8a>
 8005190:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005194:	2f19      	cmp	r7, #25
 8005196:	d804      	bhi.n	80051a2 <_strtol_l.isra.0+0xc6>
 8005198:	3c57      	subs	r4, #87	@ 0x57
 800519a:	e7e4      	b.n	8005166 <_strtol_l.isra.0+0x8a>
 800519c:	f04f 32ff 	mov.w	r2, #4294967295
 80051a0:	e7ed      	b.n	800517e <_strtol_l.isra.0+0xa2>
 80051a2:	1c53      	adds	r3, r2, #1
 80051a4:	d108      	bne.n	80051b8 <_strtol_l.isra.0+0xdc>
 80051a6:	2322      	movs	r3, #34	@ 0x22
 80051a8:	4660      	mov	r0, ip
 80051aa:	f8ce 3000 	str.w	r3, [lr]
 80051ae:	f1b8 0f00 	cmp.w	r8, #0
 80051b2:	d0a0      	beq.n	80050f6 <_strtol_l.isra.0+0x1a>
 80051b4:	1e69      	subs	r1, r5, #1
 80051b6:	e006      	b.n	80051c6 <_strtol_l.isra.0+0xea>
 80051b8:	b106      	cbz	r6, 80051bc <_strtol_l.isra.0+0xe0>
 80051ba:	4240      	negs	r0, r0
 80051bc:	f1b8 0f00 	cmp.w	r8, #0
 80051c0:	d099      	beq.n	80050f6 <_strtol_l.isra.0+0x1a>
 80051c2:	2a00      	cmp	r2, #0
 80051c4:	d1f6      	bne.n	80051b4 <_strtol_l.isra.0+0xd8>
 80051c6:	f8c8 1000 	str.w	r1, [r8]
 80051ca:	e794      	b.n	80050f6 <_strtol_l.isra.0+0x1a>
 80051cc:	08008637 	.word	0x08008637

080051d0 <strtol>:
 80051d0:	4613      	mov	r3, r2
 80051d2:	460a      	mov	r2, r1
 80051d4:	4601      	mov	r1, r0
 80051d6:	4802      	ldr	r0, [pc, #8]	@ (80051e0 <strtol+0x10>)
 80051d8:	6800      	ldr	r0, [r0, #0]
 80051da:	f7ff bf7f 	b.w	80050dc <_strtol_l.isra.0>
 80051de:	bf00      	nop
 80051e0:	20000018 	.word	0x20000018

080051e4 <__cvt>:
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ea:	461d      	mov	r5, r3
 80051ec:	bfbb      	ittet	lt
 80051ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80051f2:	461d      	movlt	r5, r3
 80051f4:	2300      	movge	r3, #0
 80051f6:	232d      	movlt	r3, #45	@ 0x2d
 80051f8:	b088      	sub	sp, #32
 80051fa:	4614      	mov	r4, r2
 80051fc:	bfb8      	it	lt
 80051fe:	4614      	movlt	r4, r2
 8005200:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005202:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005204:	7013      	strb	r3, [r2, #0]
 8005206:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005208:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800520c:	f023 0820 	bic.w	r8, r3, #32
 8005210:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005214:	d005      	beq.n	8005222 <__cvt+0x3e>
 8005216:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800521a:	d100      	bne.n	800521e <__cvt+0x3a>
 800521c:	3601      	adds	r6, #1
 800521e:	2302      	movs	r3, #2
 8005220:	e000      	b.n	8005224 <__cvt+0x40>
 8005222:	2303      	movs	r3, #3
 8005224:	aa07      	add	r2, sp, #28
 8005226:	9204      	str	r2, [sp, #16]
 8005228:	aa06      	add	r2, sp, #24
 800522a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800522e:	e9cd 3600 	strd	r3, r6, [sp]
 8005232:	4622      	mov	r2, r4
 8005234:	462b      	mov	r3, r5
 8005236:	f000 ffdf 	bl	80061f8 <_dtoa_r>
 800523a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800523e:	4607      	mov	r7, r0
 8005240:	d119      	bne.n	8005276 <__cvt+0x92>
 8005242:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005244:	07db      	lsls	r3, r3, #31
 8005246:	d50e      	bpl.n	8005266 <__cvt+0x82>
 8005248:	eb00 0906 	add.w	r9, r0, r6
 800524c:	2200      	movs	r2, #0
 800524e:	2300      	movs	r3, #0
 8005250:	4620      	mov	r0, r4
 8005252:	4629      	mov	r1, r5
 8005254:	f7fb fba8 	bl	80009a8 <__aeabi_dcmpeq>
 8005258:	b108      	cbz	r0, 800525e <__cvt+0x7a>
 800525a:	f8cd 901c 	str.w	r9, [sp, #28]
 800525e:	2230      	movs	r2, #48	@ 0x30
 8005260:	9b07      	ldr	r3, [sp, #28]
 8005262:	454b      	cmp	r3, r9
 8005264:	d31e      	bcc.n	80052a4 <__cvt+0xc0>
 8005266:	4638      	mov	r0, r7
 8005268:	9b07      	ldr	r3, [sp, #28]
 800526a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800526c:	1bdb      	subs	r3, r3, r7
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	b008      	add	sp, #32
 8005272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005276:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800527a:	eb00 0906 	add.w	r9, r0, r6
 800527e:	d1e5      	bne.n	800524c <__cvt+0x68>
 8005280:	7803      	ldrb	r3, [r0, #0]
 8005282:	2b30      	cmp	r3, #48	@ 0x30
 8005284:	d10a      	bne.n	800529c <__cvt+0xb8>
 8005286:	2200      	movs	r2, #0
 8005288:	2300      	movs	r3, #0
 800528a:	4620      	mov	r0, r4
 800528c:	4629      	mov	r1, r5
 800528e:	f7fb fb8b 	bl	80009a8 <__aeabi_dcmpeq>
 8005292:	b918      	cbnz	r0, 800529c <__cvt+0xb8>
 8005294:	f1c6 0601 	rsb	r6, r6, #1
 8005298:	f8ca 6000 	str.w	r6, [sl]
 800529c:	f8da 3000 	ldr.w	r3, [sl]
 80052a0:	4499      	add	r9, r3
 80052a2:	e7d3      	b.n	800524c <__cvt+0x68>
 80052a4:	1c59      	adds	r1, r3, #1
 80052a6:	9107      	str	r1, [sp, #28]
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e7d9      	b.n	8005260 <__cvt+0x7c>

080052ac <__exponent>:
 80052ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ae:	2900      	cmp	r1, #0
 80052b0:	bfb6      	itet	lt
 80052b2:	232d      	movlt	r3, #45	@ 0x2d
 80052b4:	232b      	movge	r3, #43	@ 0x2b
 80052b6:	4249      	neglt	r1, r1
 80052b8:	2909      	cmp	r1, #9
 80052ba:	7002      	strb	r2, [r0, #0]
 80052bc:	7043      	strb	r3, [r0, #1]
 80052be:	dd29      	ble.n	8005314 <__exponent+0x68>
 80052c0:	f10d 0307 	add.w	r3, sp, #7
 80052c4:	461d      	mov	r5, r3
 80052c6:	270a      	movs	r7, #10
 80052c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80052cc:	461a      	mov	r2, r3
 80052ce:	fb07 1416 	mls	r4, r7, r6, r1
 80052d2:	3430      	adds	r4, #48	@ 0x30
 80052d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80052d8:	460c      	mov	r4, r1
 80052da:	2c63      	cmp	r4, #99	@ 0x63
 80052dc:	4631      	mov	r1, r6
 80052de:	f103 33ff 	add.w	r3, r3, #4294967295
 80052e2:	dcf1      	bgt.n	80052c8 <__exponent+0x1c>
 80052e4:	3130      	adds	r1, #48	@ 0x30
 80052e6:	1e94      	subs	r4, r2, #2
 80052e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052ec:	4623      	mov	r3, r4
 80052ee:	1c41      	adds	r1, r0, #1
 80052f0:	42ab      	cmp	r3, r5
 80052f2:	d30a      	bcc.n	800530a <__exponent+0x5e>
 80052f4:	f10d 0309 	add.w	r3, sp, #9
 80052f8:	1a9b      	subs	r3, r3, r2
 80052fa:	42ac      	cmp	r4, r5
 80052fc:	bf88      	it	hi
 80052fe:	2300      	movhi	r3, #0
 8005300:	3302      	adds	r3, #2
 8005302:	4403      	add	r3, r0
 8005304:	1a18      	subs	r0, r3, r0
 8005306:	b003      	add	sp, #12
 8005308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800530a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800530e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005312:	e7ed      	b.n	80052f0 <__exponent+0x44>
 8005314:	2330      	movs	r3, #48	@ 0x30
 8005316:	3130      	adds	r1, #48	@ 0x30
 8005318:	7083      	strb	r3, [r0, #2]
 800531a:	70c1      	strb	r1, [r0, #3]
 800531c:	1d03      	adds	r3, r0, #4
 800531e:	e7f1      	b.n	8005304 <__exponent+0x58>

08005320 <_printf_float>:
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	b091      	sub	sp, #68	@ 0x44
 8005326:	460c      	mov	r4, r1
 8005328:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800532c:	4616      	mov	r6, r2
 800532e:	461f      	mov	r7, r3
 8005330:	4605      	mov	r5, r0
 8005332:	f000 fe53 	bl	8005fdc <_localeconv_r>
 8005336:	6803      	ldr	r3, [r0, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	9308      	str	r3, [sp, #32]
 800533c:	f7fa ff08 	bl	8000150 <strlen>
 8005340:	2300      	movs	r3, #0
 8005342:	930e      	str	r3, [sp, #56]	@ 0x38
 8005344:	f8d8 3000 	ldr.w	r3, [r8]
 8005348:	9009      	str	r0, [sp, #36]	@ 0x24
 800534a:	3307      	adds	r3, #7
 800534c:	f023 0307 	bic.w	r3, r3, #7
 8005350:	f103 0208 	add.w	r2, r3, #8
 8005354:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005358:	f8d4 b000 	ldr.w	fp, [r4]
 800535c:	f8c8 2000 	str.w	r2, [r8]
 8005360:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005364:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800536a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800536e:	f04f 32ff 	mov.w	r2, #4294967295
 8005372:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005376:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800537a:	4b9c      	ldr	r3, [pc, #624]	@ (80055ec <_printf_float+0x2cc>)
 800537c:	f7fb fb46 	bl	8000a0c <__aeabi_dcmpun>
 8005380:	bb70      	cbnz	r0, 80053e0 <_printf_float+0xc0>
 8005382:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005386:	f04f 32ff 	mov.w	r2, #4294967295
 800538a:	4b98      	ldr	r3, [pc, #608]	@ (80055ec <_printf_float+0x2cc>)
 800538c:	f7fb fb20 	bl	80009d0 <__aeabi_dcmple>
 8005390:	bb30      	cbnz	r0, 80053e0 <_printf_float+0xc0>
 8005392:	2200      	movs	r2, #0
 8005394:	2300      	movs	r3, #0
 8005396:	4640      	mov	r0, r8
 8005398:	4649      	mov	r1, r9
 800539a:	f7fb fb0f 	bl	80009bc <__aeabi_dcmplt>
 800539e:	b110      	cbz	r0, 80053a6 <_printf_float+0x86>
 80053a0:	232d      	movs	r3, #45	@ 0x2d
 80053a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053a6:	4a92      	ldr	r2, [pc, #584]	@ (80055f0 <_printf_float+0x2d0>)
 80053a8:	4b92      	ldr	r3, [pc, #584]	@ (80055f4 <_printf_float+0x2d4>)
 80053aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80053ae:	bf8c      	ite	hi
 80053b0:	4690      	movhi	r8, r2
 80053b2:	4698      	movls	r8, r3
 80053b4:	2303      	movs	r3, #3
 80053b6:	f04f 0900 	mov.w	r9, #0
 80053ba:	6123      	str	r3, [r4, #16]
 80053bc:	f02b 0304 	bic.w	r3, fp, #4
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	4633      	mov	r3, r6
 80053c4:	4621      	mov	r1, r4
 80053c6:	4628      	mov	r0, r5
 80053c8:	9700      	str	r7, [sp, #0]
 80053ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80053cc:	f000 f9d4 	bl	8005778 <_printf_common>
 80053d0:	3001      	adds	r0, #1
 80053d2:	f040 8090 	bne.w	80054f6 <_printf_float+0x1d6>
 80053d6:	f04f 30ff 	mov.w	r0, #4294967295
 80053da:	b011      	add	sp, #68	@ 0x44
 80053dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	4640      	mov	r0, r8
 80053e6:	4649      	mov	r1, r9
 80053e8:	f7fb fb10 	bl	8000a0c <__aeabi_dcmpun>
 80053ec:	b148      	cbz	r0, 8005402 <_printf_float+0xe2>
 80053ee:	464b      	mov	r3, r9
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bfb8      	it	lt
 80053f4:	232d      	movlt	r3, #45	@ 0x2d
 80053f6:	4a80      	ldr	r2, [pc, #512]	@ (80055f8 <_printf_float+0x2d8>)
 80053f8:	bfb8      	it	lt
 80053fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80053fe:	4b7f      	ldr	r3, [pc, #508]	@ (80055fc <_printf_float+0x2dc>)
 8005400:	e7d3      	b.n	80053aa <_printf_float+0x8a>
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	d13f      	bne.n	800548c <_printf_float+0x16c>
 800540c:	2306      	movs	r3, #6
 800540e:	6063      	str	r3, [r4, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	9206      	str	r2, [sp, #24]
 800541a:	aa0e      	add	r2, sp, #56	@ 0x38
 800541c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005420:	aa0d      	add	r2, sp, #52	@ 0x34
 8005422:	9203      	str	r2, [sp, #12]
 8005424:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005428:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800542c:	6863      	ldr	r3, [r4, #4]
 800542e:	4642      	mov	r2, r8
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	4628      	mov	r0, r5
 8005434:	464b      	mov	r3, r9
 8005436:	910a      	str	r1, [sp, #40]	@ 0x28
 8005438:	f7ff fed4 	bl	80051e4 <__cvt>
 800543c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800543e:	4680      	mov	r8, r0
 8005440:	2947      	cmp	r1, #71	@ 0x47
 8005442:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005444:	d128      	bne.n	8005498 <_printf_float+0x178>
 8005446:	1cc8      	adds	r0, r1, #3
 8005448:	db02      	blt.n	8005450 <_printf_float+0x130>
 800544a:	6863      	ldr	r3, [r4, #4]
 800544c:	4299      	cmp	r1, r3
 800544e:	dd40      	ble.n	80054d2 <_printf_float+0x1b2>
 8005450:	f1aa 0a02 	sub.w	sl, sl, #2
 8005454:	fa5f fa8a 	uxtb.w	sl, sl
 8005458:	4652      	mov	r2, sl
 800545a:	3901      	subs	r1, #1
 800545c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005460:	910d      	str	r1, [sp, #52]	@ 0x34
 8005462:	f7ff ff23 	bl	80052ac <__exponent>
 8005466:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005468:	4681      	mov	r9, r0
 800546a:	1813      	adds	r3, r2, r0
 800546c:	2a01      	cmp	r2, #1
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	dc02      	bgt.n	8005478 <_printf_float+0x158>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	07d2      	lsls	r2, r2, #31
 8005476:	d501      	bpl.n	800547c <_printf_float+0x15c>
 8005478:	3301      	adds	r3, #1
 800547a:	6123      	str	r3, [r4, #16]
 800547c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005480:	2b00      	cmp	r3, #0
 8005482:	d09e      	beq.n	80053c2 <_printf_float+0xa2>
 8005484:	232d      	movs	r3, #45	@ 0x2d
 8005486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800548a:	e79a      	b.n	80053c2 <_printf_float+0xa2>
 800548c:	2947      	cmp	r1, #71	@ 0x47
 800548e:	d1bf      	bne.n	8005410 <_printf_float+0xf0>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1bd      	bne.n	8005410 <_printf_float+0xf0>
 8005494:	2301      	movs	r3, #1
 8005496:	e7ba      	b.n	800540e <_printf_float+0xee>
 8005498:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800549c:	d9dc      	bls.n	8005458 <_printf_float+0x138>
 800549e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80054a2:	d118      	bne.n	80054d6 <_printf_float+0x1b6>
 80054a4:	2900      	cmp	r1, #0
 80054a6:	6863      	ldr	r3, [r4, #4]
 80054a8:	dd0b      	ble.n	80054c2 <_printf_float+0x1a2>
 80054aa:	6121      	str	r1, [r4, #16]
 80054ac:	b913      	cbnz	r3, 80054b4 <_printf_float+0x194>
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	07d0      	lsls	r0, r2, #31
 80054b2:	d502      	bpl.n	80054ba <_printf_float+0x19a>
 80054b4:	3301      	adds	r3, #1
 80054b6:	440b      	add	r3, r1
 80054b8:	6123      	str	r3, [r4, #16]
 80054ba:	f04f 0900 	mov.w	r9, #0
 80054be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80054c0:	e7dc      	b.n	800547c <_printf_float+0x15c>
 80054c2:	b913      	cbnz	r3, 80054ca <_printf_float+0x1aa>
 80054c4:	6822      	ldr	r2, [r4, #0]
 80054c6:	07d2      	lsls	r2, r2, #31
 80054c8:	d501      	bpl.n	80054ce <_printf_float+0x1ae>
 80054ca:	3302      	adds	r3, #2
 80054cc:	e7f4      	b.n	80054b8 <_printf_float+0x198>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e7f2      	b.n	80054b8 <_printf_float+0x198>
 80054d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80054d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054d8:	4299      	cmp	r1, r3
 80054da:	db05      	blt.n	80054e8 <_printf_float+0x1c8>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	6121      	str	r1, [r4, #16]
 80054e0:	07d8      	lsls	r0, r3, #31
 80054e2:	d5ea      	bpl.n	80054ba <_printf_float+0x19a>
 80054e4:	1c4b      	adds	r3, r1, #1
 80054e6:	e7e7      	b.n	80054b8 <_printf_float+0x198>
 80054e8:	2900      	cmp	r1, #0
 80054ea:	bfcc      	ite	gt
 80054ec:	2201      	movgt	r2, #1
 80054ee:	f1c1 0202 	rsble	r2, r1, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	e7e0      	b.n	80054b8 <_printf_float+0x198>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	055a      	lsls	r2, r3, #21
 80054fa:	d407      	bmi.n	800550c <_printf_float+0x1ec>
 80054fc:	6923      	ldr	r3, [r4, #16]
 80054fe:	4642      	mov	r2, r8
 8005500:	4631      	mov	r1, r6
 8005502:	4628      	mov	r0, r5
 8005504:	47b8      	blx	r7
 8005506:	3001      	adds	r0, #1
 8005508:	d12b      	bne.n	8005562 <_printf_float+0x242>
 800550a:	e764      	b.n	80053d6 <_printf_float+0xb6>
 800550c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005510:	f240 80dc 	bls.w	80056cc <_printf_float+0x3ac>
 8005514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005518:	2200      	movs	r2, #0
 800551a:	2300      	movs	r3, #0
 800551c:	f7fb fa44 	bl	80009a8 <__aeabi_dcmpeq>
 8005520:	2800      	cmp	r0, #0
 8005522:	d033      	beq.n	800558c <_printf_float+0x26c>
 8005524:	2301      	movs	r3, #1
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	4a35      	ldr	r2, [pc, #212]	@ (8005600 <_printf_float+0x2e0>)
 800552c:	47b8      	blx	r7
 800552e:	3001      	adds	r0, #1
 8005530:	f43f af51 	beq.w	80053d6 <_printf_float+0xb6>
 8005534:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005538:	4543      	cmp	r3, r8
 800553a:	db02      	blt.n	8005542 <_printf_float+0x222>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	07d8      	lsls	r0, r3, #31
 8005540:	d50f      	bpl.n	8005562 <_printf_float+0x242>
 8005542:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	47b8      	blx	r7
 800554c:	3001      	adds	r0, #1
 800554e:	f43f af42 	beq.w	80053d6 <_printf_float+0xb6>
 8005552:	f04f 0900 	mov.w	r9, #0
 8005556:	f108 38ff 	add.w	r8, r8, #4294967295
 800555a:	f104 0a1a 	add.w	sl, r4, #26
 800555e:	45c8      	cmp	r8, r9
 8005560:	dc09      	bgt.n	8005576 <_printf_float+0x256>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	079b      	lsls	r3, r3, #30
 8005566:	f100 8102 	bmi.w	800576e <_printf_float+0x44e>
 800556a:	68e0      	ldr	r0, [r4, #12]
 800556c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800556e:	4298      	cmp	r0, r3
 8005570:	bfb8      	it	lt
 8005572:	4618      	movlt	r0, r3
 8005574:	e731      	b.n	80053da <_printf_float+0xba>
 8005576:	2301      	movs	r3, #1
 8005578:	4652      	mov	r2, sl
 800557a:	4631      	mov	r1, r6
 800557c:	4628      	mov	r0, r5
 800557e:	47b8      	blx	r7
 8005580:	3001      	adds	r0, #1
 8005582:	f43f af28 	beq.w	80053d6 <_printf_float+0xb6>
 8005586:	f109 0901 	add.w	r9, r9, #1
 800558a:	e7e8      	b.n	800555e <_printf_float+0x23e>
 800558c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800558e:	2b00      	cmp	r3, #0
 8005590:	dc38      	bgt.n	8005604 <_printf_float+0x2e4>
 8005592:	2301      	movs	r3, #1
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	4a19      	ldr	r2, [pc, #100]	@ (8005600 <_printf_float+0x2e0>)
 800559a:	47b8      	blx	r7
 800559c:	3001      	adds	r0, #1
 800559e:	f43f af1a 	beq.w	80053d6 <_printf_float+0xb6>
 80055a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80055a6:	ea59 0303 	orrs.w	r3, r9, r3
 80055aa:	d102      	bne.n	80055b2 <_printf_float+0x292>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	07d9      	lsls	r1, r3, #31
 80055b0:	d5d7      	bpl.n	8005562 <_printf_float+0x242>
 80055b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b8      	blx	r7
 80055bc:	3001      	adds	r0, #1
 80055be:	f43f af0a 	beq.w	80053d6 <_printf_float+0xb6>
 80055c2:	f04f 0a00 	mov.w	sl, #0
 80055c6:	f104 0b1a 	add.w	fp, r4, #26
 80055ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055cc:	425b      	negs	r3, r3
 80055ce:	4553      	cmp	r3, sl
 80055d0:	dc01      	bgt.n	80055d6 <_printf_float+0x2b6>
 80055d2:	464b      	mov	r3, r9
 80055d4:	e793      	b.n	80054fe <_printf_float+0x1de>
 80055d6:	2301      	movs	r3, #1
 80055d8:	465a      	mov	r2, fp
 80055da:	4631      	mov	r1, r6
 80055dc:	4628      	mov	r0, r5
 80055de:	47b8      	blx	r7
 80055e0:	3001      	adds	r0, #1
 80055e2:	f43f aef8 	beq.w	80053d6 <_printf_float+0xb6>
 80055e6:	f10a 0a01 	add.w	sl, sl, #1
 80055ea:	e7ee      	b.n	80055ca <_printf_float+0x2aa>
 80055ec:	7fefffff 	.word	0x7fefffff
 80055f0:	0800873b 	.word	0x0800873b
 80055f4:	08008737 	.word	0x08008737
 80055f8:	08008743 	.word	0x08008743
 80055fc:	0800873f 	.word	0x0800873f
 8005600:	08008747 	.word	0x08008747
 8005604:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005606:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800560a:	4553      	cmp	r3, sl
 800560c:	bfa8      	it	ge
 800560e:	4653      	movge	r3, sl
 8005610:	2b00      	cmp	r3, #0
 8005612:	4699      	mov	r9, r3
 8005614:	dc36      	bgt.n	8005684 <_printf_float+0x364>
 8005616:	f04f 0b00 	mov.w	fp, #0
 800561a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800561e:	f104 021a 	add.w	r2, r4, #26
 8005622:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005624:	930a      	str	r3, [sp, #40]	@ 0x28
 8005626:	eba3 0309 	sub.w	r3, r3, r9
 800562a:	455b      	cmp	r3, fp
 800562c:	dc31      	bgt.n	8005692 <_printf_float+0x372>
 800562e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005630:	459a      	cmp	sl, r3
 8005632:	dc3a      	bgt.n	80056aa <_printf_float+0x38a>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	07da      	lsls	r2, r3, #31
 8005638:	d437      	bmi.n	80056aa <_printf_float+0x38a>
 800563a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800563c:	ebaa 0903 	sub.w	r9, sl, r3
 8005640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005642:	ebaa 0303 	sub.w	r3, sl, r3
 8005646:	4599      	cmp	r9, r3
 8005648:	bfa8      	it	ge
 800564a:	4699      	movge	r9, r3
 800564c:	f1b9 0f00 	cmp.w	r9, #0
 8005650:	dc33      	bgt.n	80056ba <_printf_float+0x39a>
 8005652:	f04f 0800 	mov.w	r8, #0
 8005656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800565a:	f104 0b1a 	add.w	fp, r4, #26
 800565e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005660:	ebaa 0303 	sub.w	r3, sl, r3
 8005664:	eba3 0309 	sub.w	r3, r3, r9
 8005668:	4543      	cmp	r3, r8
 800566a:	f77f af7a 	ble.w	8005562 <_printf_float+0x242>
 800566e:	2301      	movs	r3, #1
 8005670:	465a      	mov	r2, fp
 8005672:	4631      	mov	r1, r6
 8005674:	4628      	mov	r0, r5
 8005676:	47b8      	blx	r7
 8005678:	3001      	adds	r0, #1
 800567a:	f43f aeac 	beq.w	80053d6 <_printf_float+0xb6>
 800567e:	f108 0801 	add.w	r8, r8, #1
 8005682:	e7ec      	b.n	800565e <_printf_float+0x33e>
 8005684:	4642      	mov	r2, r8
 8005686:	4631      	mov	r1, r6
 8005688:	4628      	mov	r0, r5
 800568a:	47b8      	blx	r7
 800568c:	3001      	adds	r0, #1
 800568e:	d1c2      	bne.n	8005616 <_printf_float+0x2f6>
 8005690:	e6a1      	b.n	80053d6 <_printf_float+0xb6>
 8005692:	2301      	movs	r3, #1
 8005694:	4631      	mov	r1, r6
 8005696:	4628      	mov	r0, r5
 8005698:	920a      	str	r2, [sp, #40]	@ 0x28
 800569a:	47b8      	blx	r7
 800569c:	3001      	adds	r0, #1
 800569e:	f43f ae9a 	beq.w	80053d6 <_printf_float+0xb6>
 80056a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056a4:	f10b 0b01 	add.w	fp, fp, #1
 80056a8:	e7bb      	b.n	8005622 <_printf_float+0x302>
 80056aa:	4631      	mov	r1, r6
 80056ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b8      	blx	r7
 80056b4:	3001      	adds	r0, #1
 80056b6:	d1c0      	bne.n	800563a <_printf_float+0x31a>
 80056b8:	e68d      	b.n	80053d6 <_printf_float+0xb6>
 80056ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056bc:	464b      	mov	r3, r9
 80056be:	4631      	mov	r1, r6
 80056c0:	4628      	mov	r0, r5
 80056c2:	4442      	add	r2, r8
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	d1c3      	bne.n	8005652 <_printf_float+0x332>
 80056ca:	e684      	b.n	80053d6 <_printf_float+0xb6>
 80056cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80056d0:	f1ba 0f01 	cmp.w	sl, #1
 80056d4:	dc01      	bgt.n	80056da <_printf_float+0x3ba>
 80056d6:	07db      	lsls	r3, r3, #31
 80056d8:	d536      	bpl.n	8005748 <_printf_float+0x428>
 80056da:	2301      	movs	r3, #1
 80056dc:	4642      	mov	r2, r8
 80056de:	4631      	mov	r1, r6
 80056e0:	4628      	mov	r0, r5
 80056e2:	47b8      	blx	r7
 80056e4:	3001      	adds	r0, #1
 80056e6:	f43f ae76 	beq.w	80053d6 <_printf_float+0xb6>
 80056ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b8      	blx	r7
 80056f4:	3001      	adds	r0, #1
 80056f6:	f43f ae6e 	beq.w	80053d6 <_printf_float+0xb6>
 80056fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056fe:	2200      	movs	r2, #0
 8005700:	2300      	movs	r3, #0
 8005702:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005706:	f7fb f94f 	bl	80009a8 <__aeabi_dcmpeq>
 800570a:	b9c0      	cbnz	r0, 800573e <_printf_float+0x41e>
 800570c:	4653      	mov	r3, sl
 800570e:	f108 0201 	add.w	r2, r8, #1
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	d10c      	bne.n	8005736 <_printf_float+0x416>
 800571c:	e65b      	b.n	80053d6 <_printf_float+0xb6>
 800571e:	2301      	movs	r3, #1
 8005720:	465a      	mov	r2, fp
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	f43f ae54 	beq.w	80053d6 <_printf_float+0xb6>
 800572e:	f108 0801 	add.w	r8, r8, #1
 8005732:	45d0      	cmp	r8, sl
 8005734:	dbf3      	blt.n	800571e <_printf_float+0x3fe>
 8005736:	464b      	mov	r3, r9
 8005738:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800573c:	e6e0      	b.n	8005500 <_printf_float+0x1e0>
 800573e:	f04f 0800 	mov.w	r8, #0
 8005742:	f104 0b1a 	add.w	fp, r4, #26
 8005746:	e7f4      	b.n	8005732 <_printf_float+0x412>
 8005748:	2301      	movs	r3, #1
 800574a:	4642      	mov	r2, r8
 800574c:	e7e1      	b.n	8005712 <_printf_float+0x3f2>
 800574e:	2301      	movs	r3, #1
 8005750:	464a      	mov	r2, r9
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	f43f ae3c 	beq.w	80053d6 <_printf_float+0xb6>
 800575e:	f108 0801 	add.w	r8, r8, #1
 8005762:	68e3      	ldr	r3, [r4, #12]
 8005764:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005766:	1a5b      	subs	r3, r3, r1
 8005768:	4543      	cmp	r3, r8
 800576a:	dcf0      	bgt.n	800574e <_printf_float+0x42e>
 800576c:	e6fd      	b.n	800556a <_printf_float+0x24a>
 800576e:	f04f 0800 	mov.w	r8, #0
 8005772:	f104 0919 	add.w	r9, r4, #25
 8005776:	e7f4      	b.n	8005762 <_printf_float+0x442>

08005778 <_printf_common>:
 8005778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800577c:	4616      	mov	r6, r2
 800577e:	4698      	mov	r8, r3
 8005780:	688a      	ldr	r2, [r1, #8]
 8005782:	690b      	ldr	r3, [r1, #16]
 8005784:	4607      	mov	r7, r0
 8005786:	4293      	cmp	r3, r2
 8005788:	bfb8      	it	lt
 800578a:	4613      	movlt	r3, r2
 800578c:	6033      	str	r3, [r6, #0]
 800578e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005792:	460c      	mov	r4, r1
 8005794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005798:	b10a      	cbz	r2, 800579e <_printf_common+0x26>
 800579a:	3301      	adds	r3, #1
 800579c:	6033      	str	r3, [r6, #0]
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	0699      	lsls	r1, r3, #26
 80057a2:	bf42      	ittt	mi
 80057a4:	6833      	ldrmi	r3, [r6, #0]
 80057a6:	3302      	addmi	r3, #2
 80057a8:	6033      	strmi	r3, [r6, #0]
 80057aa:	6825      	ldr	r5, [r4, #0]
 80057ac:	f015 0506 	ands.w	r5, r5, #6
 80057b0:	d106      	bne.n	80057c0 <_printf_common+0x48>
 80057b2:	f104 0a19 	add.w	sl, r4, #25
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	6832      	ldr	r2, [r6, #0]
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	42ab      	cmp	r3, r5
 80057be:	dc2b      	bgt.n	8005818 <_printf_common+0xa0>
 80057c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057c4:	6822      	ldr	r2, [r4, #0]
 80057c6:	3b00      	subs	r3, #0
 80057c8:	bf18      	it	ne
 80057ca:	2301      	movne	r3, #1
 80057cc:	0692      	lsls	r2, r2, #26
 80057ce:	d430      	bmi.n	8005832 <_printf_common+0xba>
 80057d0:	4641      	mov	r1, r8
 80057d2:	4638      	mov	r0, r7
 80057d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057d8:	47c8      	blx	r9
 80057da:	3001      	adds	r0, #1
 80057dc:	d023      	beq.n	8005826 <_printf_common+0xae>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	6922      	ldr	r2, [r4, #16]
 80057e2:	f003 0306 	and.w	r3, r3, #6
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	bf14      	ite	ne
 80057ea:	2500      	movne	r5, #0
 80057ec:	6833      	ldreq	r3, [r6, #0]
 80057ee:	f04f 0600 	mov.w	r6, #0
 80057f2:	bf08      	it	eq
 80057f4:	68e5      	ldreq	r5, [r4, #12]
 80057f6:	f104 041a 	add.w	r4, r4, #26
 80057fa:	bf08      	it	eq
 80057fc:	1aed      	subeq	r5, r5, r3
 80057fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005802:	bf08      	it	eq
 8005804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005808:	4293      	cmp	r3, r2
 800580a:	bfc4      	itt	gt
 800580c:	1a9b      	subgt	r3, r3, r2
 800580e:	18ed      	addgt	r5, r5, r3
 8005810:	42b5      	cmp	r5, r6
 8005812:	d11a      	bne.n	800584a <_printf_common+0xd2>
 8005814:	2000      	movs	r0, #0
 8005816:	e008      	b.n	800582a <_printf_common+0xb2>
 8005818:	2301      	movs	r3, #1
 800581a:	4652      	mov	r2, sl
 800581c:	4641      	mov	r1, r8
 800581e:	4638      	mov	r0, r7
 8005820:	47c8      	blx	r9
 8005822:	3001      	adds	r0, #1
 8005824:	d103      	bne.n	800582e <_printf_common+0xb6>
 8005826:	f04f 30ff 	mov.w	r0, #4294967295
 800582a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582e:	3501      	adds	r5, #1
 8005830:	e7c1      	b.n	80057b6 <_printf_common+0x3e>
 8005832:	2030      	movs	r0, #48	@ 0x30
 8005834:	18e1      	adds	r1, r4, r3
 8005836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005840:	4422      	add	r2, r4
 8005842:	3302      	adds	r3, #2
 8005844:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005848:	e7c2      	b.n	80057d0 <_printf_common+0x58>
 800584a:	2301      	movs	r3, #1
 800584c:	4622      	mov	r2, r4
 800584e:	4641      	mov	r1, r8
 8005850:	4638      	mov	r0, r7
 8005852:	47c8      	blx	r9
 8005854:	3001      	adds	r0, #1
 8005856:	d0e6      	beq.n	8005826 <_printf_common+0xae>
 8005858:	3601      	adds	r6, #1
 800585a:	e7d9      	b.n	8005810 <_printf_common+0x98>

0800585c <_printf_i>:
 800585c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	7e0f      	ldrb	r7, [r1, #24]
 8005862:	4691      	mov	r9, r2
 8005864:	2f78      	cmp	r7, #120	@ 0x78
 8005866:	4680      	mov	r8, r0
 8005868:	460c      	mov	r4, r1
 800586a:	469a      	mov	sl, r3
 800586c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800586e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005872:	d807      	bhi.n	8005884 <_printf_i+0x28>
 8005874:	2f62      	cmp	r7, #98	@ 0x62
 8005876:	d80a      	bhi.n	800588e <_printf_i+0x32>
 8005878:	2f00      	cmp	r7, #0
 800587a:	f000 80d1 	beq.w	8005a20 <_printf_i+0x1c4>
 800587e:	2f58      	cmp	r7, #88	@ 0x58
 8005880:	f000 80b8 	beq.w	80059f4 <_printf_i+0x198>
 8005884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800588c:	e03a      	b.n	8005904 <_printf_i+0xa8>
 800588e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005892:	2b15      	cmp	r3, #21
 8005894:	d8f6      	bhi.n	8005884 <_printf_i+0x28>
 8005896:	a101      	add	r1, pc, #4	@ (adr r1, 800589c <_printf_i+0x40>)
 8005898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800589c:	080058f5 	.word	0x080058f5
 80058a0:	08005909 	.word	0x08005909
 80058a4:	08005885 	.word	0x08005885
 80058a8:	08005885 	.word	0x08005885
 80058ac:	08005885 	.word	0x08005885
 80058b0:	08005885 	.word	0x08005885
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005885 	.word	0x08005885
 80058bc:	08005885 	.word	0x08005885
 80058c0:	08005885 	.word	0x08005885
 80058c4:	08005885 	.word	0x08005885
 80058c8:	08005a07 	.word	0x08005a07
 80058cc:	08005933 	.word	0x08005933
 80058d0:	080059c1 	.word	0x080059c1
 80058d4:	08005885 	.word	0x08005885
 80058d8:	08005885 	.word	0x08005885
 80058dc:	08005a29 	.word	0x08005a29
 80058e0:	08005885 	.word	0x08005885
 80058e4:	08005933 	.word	0x08005933
 80058e8:	08005885 	.word	0x08005885
 80058ec:	08005885 	.word	0x08005885
 80058f0:	080059c9 	.word	0x080059c9
 80058f4:	6833      	ldr	r3, [r6, #0]
 80058f6:	1d1a      	adds	r2, r3, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6032      	str	r2, [r6, #0]
 80058fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005904:	2301      	movs	r3, #1
 8005906:	e09c      	b.n	8005a42 <_printf_i+0x1e6>
 8005908:	6833      	ldr	r3, [r6, #0]
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	1d19      	adds	r1, r3, #4
 800590e:	6031      	str	r1, [r6, #0]
 8005910:	0606      	lsls	r6, r0, #24
 8005912:	d501      	bpl.n	8005918 <_printf_i+0xbc>
 8005914:	681d      	ldr	r5, [r3, #0]
 8005916:	e003      	b.n	8005920 <_printf_i+0xc4>
 8005918:	0645      	lsls	r5, r0, #25
 800591a:	d5fb      	bpl.n	8005914 <_printf_i+0xb8>
 800591c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005920:	2d00      	cmp	r5, #0
 8005922:	da03      	bge.n	800592c <_printf_i+0xd0>
 8005924:	232d      	movs	r3, #45	@ 0x2d
 8005926:	426d      	negs	r5, r5
 8005928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800592c:	230a      	movs	r3, #10
 800592e:	4858      	ldr	r0, [pc, #352]	@ (8005a90 <_printf_i+0x234>)
 8005930:	e011      	b.n	8005956 <_printf_i+0xfa>
 8005932:	6821      	ldr	r1, [r4, #0]
 8005934:	6833      	ldr	r3, [r6, #0]
 8005936:	0608      	lsls	r0, r1, #24
 8005938:	f853 5b04 	ldr.w	r5, [r3], #4
 800593c:	d402      	bmi.n	8005944 <_printf_i+0xe8>
 800593e:	0649      	lsls	r1, r1, #25
 8005940:	bf48      	it	mi
 8005942:	b2ad      	uxthmi	r5, r5
 8005944:	2f6f      	cmp	r7, #111	@ 0x6f
 8005946:	6033      	str	r3, [r6, #0]
 8005948:	bf14      	ite	ne
 800594a:	230a      	movne	r3, #10
 800594c:	2308      	moveq	r3, #8
 800594e:	4850      	ldr	r0, [pc, #320]	@ (8005a90 <_printf_i+0x234>)
 8005950:	2100      	movs	r1, #0
 8005952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005956:	6866      	ldr	r6, [r4, #4]
 8005958:	2e00      	cmp	r6, #0
 800595a:	60a6      	str	r6, [r4, #8]
 800595c:	db05      	blt.n	800596a <_printf_i+0x10e>
 800595e:	6821      	ldr	r1, [r4, #0]
 8005960:	432e      	orrs	r6, r5
 8005962:	f021 0104 	bic.w	r1, r1, #4
 8005966:	6021      	str	r1, [r4, #0]
 8005968:	d04b      	beq.n	8005a02 <_printf_i+0x1a6>
 800596a:	4616      	mov	r6, r2
 800596c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005970:	fb03 5711 	mls	r7, r3, r1, r5
 8005974:	5dc7      	ldrb	r7, [r0, r7]
 8005976:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800597a:	462f      	mov	r7, r5
 800597c:	42bb      	cmp	r3, r7
 800597e:	460d      	mov	r5, r1
 8005980:	d9f4      	bls.n	800596c <_printf_i+0x110>
 8005982:	2b08      	cmp	r3, #8
 8005984:	d10b      	bne.n	800599e <_printf_i+0x142>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	07df      	lsls	r7, r3, #31
 800598a:	d508      	bpl.n	800599e <_printf_i+0x142>
 800598c:	6923      	ldr	r3, [r4, #16]
 800598e:	6861      	ldr	r1, [r4, #4]
 8005990:	4299      	cmp	r1, r3
 8005992:	bfde      	ittt	le
 8005994:	2330      	movle	r3, #48	@ 0x30
 8005996:	f806 3c01 	strble.w	r3, [r6, #-1]
 800599a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800599e:	1b92      	subs	r2, r2, r6
 80059a0:	6122      	str	r2, [r4, #16]
 80059a2:	464b      	mov	r3, r9
 80059a4:	4621      	mov	r1, r4
 80059a6:	4640      	mov	r0, r8
 80059a8:	f8cd a000 	str.w	sl, [sp]
 80059ac:	aa03      	add	r2, sp, #12
 80059ae:	f7ff fee3 	bl	8005778 <_printf_common>
 80059b2:	3001      	adds	r0, #1
 80059b4:	d14a      	bne.n	8005a4c <_printf_i+0x1f0>
 80059b6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ba:	b004      	add	sp, #16
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	f043 0320 	orr.w	r3, r3, #32
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	2778      	movs	r7, #120	@ 0x78
 80059ca:	4832      	ldr	r0, [pc, #200]	@ (8005a94 <_printf_i+0x238>)
 80059cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	6831      	ldr	r1, [r6, #0]
 80059d4:	061f      	lsls	r7, r3, #24
 80059d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80059da:	d402      	bmi.n	80059e2 <_printf_i+0x186>
 80059dc:	065f      	lsls	r7, r3, #25
 80059de:	bf48      	it	mi
 80059e0:	b2ad      	uxthmi	r5, r5
 80059e2:	6031      	str	r1, [r6, #0]
 80059e4:	07d9      	lsls	r1, r3, #31
 80059e6:	bf44      	itt	mi
 80059e8:	f043 0320 	orrmi.w	r3, r3, #32
 80059ec:	6023      	strmi	r3, [r4, #0]
 80059ee:	b11d      	cbz	r5, 80059f8 <_printf_i+0x19c>
 80059f0:	2310      	movs	r3, #16
 80059f2:	e7ad      	b.n	8005950 <_printf_i+0xf4>
 80059f4:	4826      	ldr	r0, [pc, #152]	@ (8005a90 <_printf_i+0x234>)
 80059f6:	e7e9      	b.n	80059cc <_printf_i+0x170>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	f023 0320 	bic.w	r3, r3, #32
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	e7f6      	b.n	80059f0 <_printf_i+0x194>
 8005a02:	4616      	mov	r6, r2
 8005a04:	e7bd      	b.n	8005982 <_printf_i+0x126>
 8005a06:	6833      	ldr	r3, [r6, #0]
 8005a08:	6825      	ldr	r5, [r4, #0]
 8005a0a:	1d18      	adds	r0, r3, #4
 8005a0c:	6961      	ldr	r1, [r4, #20]
 8005a0e:	6030      	str	r0, [r6, #0]
 8005a10:	062e      	lsls	r6, r5, #24
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	d501      	bpl.n	8005a1a <_printf_i+0x1be>
 8005a16:	6019      	str	r1, [r3, #0]
 8005a18:	e002      	b.n	8005a20 <_printf_i+0x1c4>
 8005a1a:	0668      	lsls	r0, r5, #25
 8005a1c:	d5fb      	bpl.n	8005a16 <_printf_i+0x1ba>
 8005a1e:	8019      	strh	r1, [r3, #0]
 8005a20:	2300      	movs	r3, #0
 8005a22:	4616      	mov	r6, r2
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	e7bc      	b.n	80059a2 <_printf_i+0x146>
 8005a28:	6833      	ldr	r3, [r6, #0]
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	1d1a      	adds	r2, r3, #4
 8005a2e:	6032      	str	r2, [r6, #0]
 8005a30:	681e      	ldr	r6, [r3, #0]
 8005a32:	6862      	ldr	r2, [r4, #4]
 8005a34:	4630      	mov	r0, r6
 8005a36:	f000 fb48 	bl	80060ca <memchr>
 8005a3a:	b108      	cbz	r0, 8005a40 <_printf_i+0x1e4>
 8005a3c:	1b80      	subs	r0, r0, r6
 8005a3e:	6060      	str	r0, [r4, #4]
 8005a40:	6863      	ldr	r3, [r4, #4]
 8005a42:	6123      	str	r3, [r4, #16]
 8005a44:	2300      	movs	r3, #0
 8005a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a4a:	e7aa      	b.n	80059a2 <_printf_i+0x146>
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	4649      	mov	r1, r9
 8005a50:	4640      	mov	r0, r8
 8005a52:	6923      	ldr	r3, [r4, #16]
 8005a54:	47d0      	blx	sl
 8005a56:	3001      	adds	r0, #1
 8005a58:	d0ad      	beq.n	80059b6 <_printf_i+0x15a>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	079b      	lsls	r3, r3, #30
 8005a5e:	d413      	bmi.n	8005a88 <_printf_i+0x22c>
 8005a60:	68e0      	ldr	r0, [r4, #12]
 8005a62:	9b03      	ldr	r3, [sp, #12]
 8005a64:	4298      	cmp	r0, r3
 8005a66:	bfb8      	it	lt
 8005a68:	4618      	movlt	r0, r3
 8005a6a:	e7a6      	b.n	80059ba <_printf_i+0x15e>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	4632      	mov	r2, r6
 8005a70:	4649      	mov	r1, r9
 8005a72:	4640      	mov	r0, r8
 8005a74:	47d0      	blx	sl
 8005a76:	3001      	adds	r0, #1
 8005a78:	d09d      	beq.n	80059b6 <_printf_i+0x15a>
 8005a7a:	3501      	adds	r5, #1
 8005a7c:	68e3      	ldr	r3, [r4, #12]
 8005a7e:	9903      	ldr	r1, [sp, #12]
 8005a80:	1a5b      	subs	r3, r3, r1
 8005a82:	42ab      	cmp	r3, r5
 8005a84:	dcf2      	bgt.n	8005a6c <_printf_i+0x210>
 8005a86:	e7eb      	b.n	8005a60 <_printf_i+0x204>
 8005a88:	2500      	movs	r5, #0
 8005a8a:	f104 0619 	add.w	r6, r4, #25
 8005a8e:	e7f5      	b.n	8005a7c <_printf_i+0x220>
 8005a90:	08008749 	.word	0x08008749
 8005a94:	0800875a 	.word	0x0800875a

08005a98 <std>:
 8005a98:	2300      	movs	r3, #0
 8005a9a:	b510      	push	{r4, lr}
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aa6:	6083      	str	r3, [r0, #8]
 8005aa8:	8181      	strh	r1, [r0, #12]
 8005aaa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005aac:	81c2      	strh	r2, [r0, #14]
 8005aae:	6183      	str	r3, [r0, #24]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	2208      	movs	r2, #8
 8005ab4:	305c      	adds	r0, #92	@ 0x5c
 8005ab6:	f000 fa57 	bl	8005f68 <memset>
 8005aba:	4b0d      	ldr	r3, [pc, #52]	@ (8005af0 <std+0x58>)
 8005abc:	6224      	str	r4, [r4, #32]
 8005abe:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8005af4 <std+0x5c>)
 8005ac2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <std+0x60>)
 8005ac6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8005afc <std+0x64>)
 8005aca:	6323      	str	r3, [r4, #48]	@ 0x30
 8005acc:	4b0c      	ldr	r3, [pc, #48]	@ (8005b00 <std+0x68>)
 8005ace:	429c      	cmp	r4, r3
 8005ad0:	d006      	beq.n	8005ae0 <std+0x48>
 8005ad2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ad6:	4294      	cmp	r4, r2
 8005ad8:	d002      	beq.n	8005ae0 <std+0x48>
 8005ada:	33d0      	adds	r3, #208	@ 0xd0
 8005adc:	429c      	cmp	r4, r3
 8005ade:	d105      	bne.n	8005aec <std+0x54>
 8005ae0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae8:	f000 baec 	b.w	80060c4 <__retarget_lock_init_recursive>
 8005aec:	bd10      	pop	{r4, pc}
 8005aee:	bf00      	nop
 8005af0:	08005d41 	.word	0x08005d41
 8005af4:	08005d63 	.word	0x08005d63
 8005af8:	08005d9b 	.word	0x08005d9b
 8005afc:	08005dbf 	.word	0x08005dbf
 8005b00:	20000ba0 	.word	0x20000ba0

08005b04 <stdio_exit_handler>:
 8005b04:	4a02      	ldr	r2, [pc, #8]	@ (8005b10 <stdio_exit_handler+0xc>)
 8005b06:	4903      	ldr	r1, [pc, #12]	@ (8005b14 <stdio_exit_handler+0x10>)
 8005b08:	4803      	ldr	r0, [pc, #12]	@ (8005b18 <stdio_exit_handler+0x14>)
 8005b0a:	f000 b869 	b.w	8005be0 <_fwalk_sglue>
 8005b0e:	bf00      	nop
 8005b10:	2000000c 	.word	0x2000000c
 8005b14:	08007cc1 	.word	0x08007cc1
 8005b18:	2000001c 	.word	0x2000001c

08005b1c <cleanup_stdio>:
 8005b1c:	6841      	ldr	r1, [r0, #4]
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b50 <cleanup_stdio+0x34>)
 8005b20:	b510      	push	{r4, lr}
 8005b22:	4299      	cmp	r1, r3
 8005b24:	4604      	mov	r4, r0
 8005b26:	d001      	beq.n	8005b2c <cleanup_stdio+0x10>
 8005b28:	f002 f8ca 	bl	8007cc0 <_fflush_r>
 8005b2c:	68a1      	ldr	r1, [r4, #8]
 8005b2e:	4b09      	ldr	r3, [pc, #36]	@ (8005b54 <cleanup_stdio+0x38>)
 8005b30:	4299      	cmp	r1, r3
 8005b32:	d002      	beq.n	8005b3a <cleanup_stdio+0x1e>
 8005b34:	4620      	mov	r0, r4
 8005b36:	f002 f8c3 	bl	8007cc0 <_fflush_r>
 8005b3a:	68e1      	ldr	r1, [r4, #12]
 8005b3c:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <cleanup_stdio+0x3c>)
 8005b3e:	4299      	cmp	r1, r3
 8005b40:	d004      	beq.n	8005b4c <cleanup_stdio+0x30>
 8005b42:	4620      	mov	r0, r4
 8005b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b48:	f002 b8ba 	b.w	8007cc0 <_fflush_r>
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000ba0 	.word	0x20000ba0
 8005b54:	20000c08 	.word	0x20000c08
 8005b58:	20000c70 	.word	0x20000c70

08005b5c <global_stdio_init.part.0>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <global_stdio_init.part.0+0x30>)
 8005b60:	4c0b      	ldr	r4, [pc, #44]	@ (8005b90 <global_stdio_init.part.0+0x34>)
 8005b62:	4a0c      	ldr	r2, [pc, #48]	@ (8005b94 <global_stdio_init.part.0+0x38>)
 8005b64:	4620      	mov	r0, r4
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	2104      	movs	r1, #4
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f7ff ff94 	bl	8005a98 <std>
 8005b70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b74:	2201      	movs	r2, #1
 8005b76:	2109      	movs	r1, #9
 8005b78:	f7ff ff8e 	bl	8005a98 <std>
 8005b7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b80:	2202      	movs	r2, #2
 8005b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b86:	2112      	movs	r1, #18
 8005b88:	f7ff bf86 	b.w	8005a98 <std>
 8005b8c:	20000cd8 	.word	0x20000cd8
 8005b90:	20000ba0 	.word	0x20000ba0
 8005b94:	08005b05 	.word	0x08005b05

08005b98 <__sfp_lock_acquire>:
 8005b98:	4801      	ldr	r0, [pc, #4]	@ (8005ba0 <__sfp_lock_acquire+0x8>)
 8005b9a:	f000 ba94 	b.w	80060c6 <__retarget_lock_acquire_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	20000ce1 	.word	0x20000ce1

08005ba4 <__sfp_lock_release>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	@ (8005bac <__sfp_lock_release+0x8>)
 8005ba6:	f000 ba8f 	b.w	80060c8 <__retarget_lock_release_recursive>
 8005baa:	bf00      	nop
 8005bac:	20000ce1 	.word	0x20000ce1

08005bb0 <__sinit>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	f7ff fff0 	bl	8005b98 <__sfp_lock_acquire>
 8005bb8:	6a23      	ldr	r3, [r4, #32]
 8005bba:	b11b      	cbz	r3, 8005bc4 <__sinit+0x14>
 8005bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc0:	f7ff bff0 	b.w	8005ba4 <__sfp_lock_release>
 8005bc4:	4b04      	ldr	r3, [pc, #16]	@ (8005bd8 <__sinit+0x28>)
 8005bc6:	6223      	str	r3, [r4, #32]
 8005bc8:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <__sinit+0x2c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f5      	bne.n	8005bbc <__sinit+0xc>
 8005bd0:	f7ff ffc4 	bl	8005b5c <global_stdio_init.part.0>
 8005bd4:	e7f2      	b.n	8005bbc <__sinit+0xc>
 8005bd6:	bf00      	nop
 8005bd8:	08005b1d 	.word	0x08005b1d
 8005bdc:	20000cd8 	.word	0x20000cd8

08005be0 <_fwalk_sglue>:
 8005be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be4:	4607      	mov	r7, r0
 8005be6:	4688      	mov	r8, r1
 8005be8:	4614      	mov	r4, r2
 8005bea:	2600      	movs	r6, #0
 8005bec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bf0:	f1b9 0901 	subs.w	r9, r9, #1
 8005bf4:	d505      	bpl.n	8005c02 <_fwalk_sglue+0x22>
 8005bf6:	6824      	ldr	r4, [r4, #0]
 8005bf8:	2c00      	cmp	r4, #0
 8005bfa:	d1f7      	bne.n	8005bec <_fwalk_sglue+0xc>
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c02:	89ab      	ldrh	r3, [r5, #12]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d907      	bls.n	8005c18 <_fwalk_sglue+0x38>
 8005c08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	d003      	beq.n	8005c18 <_fwalk_sglue+0x38>
 8005c10:	4629      	mov	r1, r5
 8005c12:	4638      	mov	r0, r7
 8005c14:	47c0      	blx	r8
 8005c16:	4306      	orrs	r6, r0
 8005c18:	3568      	adds	r5, #104	@ 0x68
 8005c1a:	e7e9      	b.n	8005bf0 <_fwalk_sglue+0x10>

08005c1c <iprintf>:
 8005c1c:	b40f      	push	{r0, r1, r2, r3}
 8005c1e:	b507      	push	{r0, r1, r2, lr}
 8005c20:	4906      	ldr	r1, [pc, #24]	@ (8005c3c <iprintf+0x20>)
 8005c22:	ab04      	add	r3, sp, #16
 8005c24:	6808      	ldr	r0, [r1, #0]
 8005c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c2a:	6881      	ldr	r1, [r0, #8]
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	f001 feaf 	bl	8007990 <_vfiprintf_r>
 8005c32:	b003      	add	sp, #12
 8005c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c38:	b004      	add	sp, #16
 8005c3a:	4770      	bx	lr
 8005c3c:	20000018 	.word	0x20000018

08005c40 <_puts_r>:
 8005c40:	6a03      	ldr	r3, [r0, #32]
 8005c42:	b570      	push	{r4, r5, r6, lr}
 8005c44:	4605      	mov	r5, r0
 8005c46:	460e      	mov	r6, r1
 8005c48:	6884      	ldr	r4, [r0, #8]
 8005c4a:	b90b      	cbnz	r3, 8005c50 <_puts_r+0x10>
 8005c4c:	f7ff ffb0 	bl	8005bb0 <__sinit>
 8005c50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c52:	07db      	lsls	r3, r3, #31
 8005c54:	d405      	bmi.n	8005c62 <_puts_r+0x22>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	0598      	lsls	r0, r3, #22
 8005c5a:	d402      	bmi.n	8005c62 <_puts_r+0x22>
 8005c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c5e:	f000 fa32 	bl	80060c6 <__retarget_lock_acquire_recursive>
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	0719      	lsls	r1, r3, #28
 8005c66:	d502      	bpl.n	8005c6e <_puts_r+0x2e>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d135      	bne.n	8005cda <_puts_r+0x9a>
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 f923 	bl	8005ebc <__swsetup_r>
 8005c76:	b380      	cbz	r0, 8005cda <_puts_r+0x9a>
 8005c78:	f04f 35ff 	mov.w	r5, #4294967295
 8005c7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c7e:	07da      	lsls	r2, r3, #31
 8005c80:	d405      	bmi.n	8005c8e <_puts_r+0x4e>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	059b      	lsls	r3, r3, #22
 8005c86:	d402      	bmi.n	8005c8e <_puts_r+0x4e>
 8005c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c8a:	f000 fa1d 	bl	80060c8 <__retarget_lock_release_recursive>
 8005c8e:	4628      	mov	r0, r5
 8005c90:	bd70      	pop	{r4, r5, r6, pc}
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	da04      	bge.n	8005ca0 <_puts_r+0x60>
 8005c96:	69a2      	ldr	r2, [r4, #24]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	dc17      	bgt.n	8005ccc <_puts_r+0x8c>
 8005c9c:	290a      	cmp	r1, #10
 8005c9e:	d015      	beq.n	8005ccc <_puts_r+0x8c>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	7019      	strb	r1, [r3, #0]
 8005ca8:	68a3      	ldr	r3, [r4, #8]
 8005caa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	60a3      	str	r3, [r4, #8]
 8005cb2:	2900      	cmp	r1, #0
 8005cb4:	d1ed      	bne.n	8005c92 <_puts_r+0x52>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	da11      	bge.n	8005cde <_puts_r+0x9e>
 8005cba:	4622      	mov	r2, r4
 8005cbc:	210a      	movs	r1, #10
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 f8be 	bl	8005e40 <__swbuf_r>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d0d7      	beq.n	8005c78 <_puts_r+0x38>
 8005cc8:	250a      	movs	r5, #10
 8005cca:	e7d7      	b.n	8005c7c <_puts_r+0x3c>
 8005ccc:	4622      	mov	r2, r4
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 f8b6 	bl	8005e40 <__swbuf_r>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d1e7      	bne.n	8005ca8 <_puts_r+0x68>
 8005cd8:	e7ce      	b.n	8005c78 <_puts_r+0x38>
 8005cda:	3e01      	subs	r6, #1
 8005cdc:	e7e4      	b.n	8005ca8 <_puts_r+0x68>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	6022      	str	r2, [r4, #0]
 8005ce4:	220a      	movs	r2, #10
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e7ee      	b.n	8005cc8 <_puts_r+0x88>
	...

08005cec <puts>:
 8005cec:	4b02      	ldr	r3, [pc, #8]	@ (8005cf8 <puts+0xc>)
 8005cee:	4601      	mov	r1, r0
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f7ff bfa5 	b.w	8005c40 <_puts_r>
 8005cf6:	bf00      	nop
 8005cf8:	20000018 	.word	0x20000018

08005cfc <siprintf>:
 8005cfc:	b40e      	push	{r1, r2, r3}
 8005cfe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d02:	b510      	push	{r4, lr}
 8005d04:	2400      	movs	r4, #0
 8005d06:	b09d      	sub	sp, #116	@ 0x74
 8005d08:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005d0a:	9002      	str	r0, [sp, #8]
 8005d0c:	9006      	str	r0, [sp, #24]
 8005d0e:	9107      	str	r1, [sp, #28]
 8005d10:	9104      	str	r1, [sp, #16]
 8005d12:	4809      	ldr	r0, [pc, #36]	@ (8005d38 <siprintf+0x3c>)
 8005d14:	4909      	ldr	r1, [pc, #36]	@ (8005d3c <siprintf+0x40>)
 8005d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1a:	9105      	str	r1, [sp, #20]
 8005d1c:	6800      	ldr	r0, [r0, #0]
 8005d1e:	a902      	add	r1, sp, #8
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005d24:	f001 fd10 	bl	8007748 <_svfiprintf_r>
 8005d28:	9b02      	ldr	r3, [sp, #8]
 8005d2a:	701c      	strb	r4, [r3, #0]
 8005d2c:	b01d      	add	sp, #116	@ 0x74
 8005d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d32:	b003      	add	sp, #12
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000018 	.word	0x20000018
 8005d3c:	ffff0208 	.word	0xffff0208

08005d40 <__sread>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	460c      	mov	r4, r1
 8005d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d48:	f000 f96e 	bl	8006028 <_read_r>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	bfab      	itete	ge
 8005d50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d52:	89a3      	ldrhlt	r3, [r4, #12]
 8005d54:	181b      	addge	r3, r3, r0
 8005d56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d5a:	bfac      	ite	ge
 8005d5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d5e:	81a3      	strhlt	r3, [r4, #12]
 8005d60:	bd10      	pop	{r4, pc}

08005d62 <__swrite>:
 8005d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d66:	461f      	mov	r7, r3
 8005d68:	898b      	ldrh	r3, [r1, #12]
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	05db      	lsls	r3, r3, #23
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4616      	mov	r6, r2
 8005d72:	d505      	bpl.n	8005d80 <__swrite+0x1e>
 8005d74:	2302      	movs	r3, #2
 8005d76:	2200      	movs	r2, #0
 8005d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7c:	f000 f942 	bl	8006004 <_lseek_r>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	4632      	mov	r2, r6
 8005d84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d88:	81a3      	strh	r3, [r4, #12]
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d96:	f000 b959 	b.w	800604c <_write_r>

08005d9a <__sseek>:
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da2:	f000 f92f 	bl	8006004 <_lseek_r>
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	bf15      	itete	ne
 8005dac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005db2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005db6:	81a3      	strheq	r3, [r4, #12]
 8005db8:	bf18      	it	ne
 8005dba:	81a3      	strhne	r3, [r4, #12]
 8005dbc:	bd10      	pop	{r4, pc}

08005dbe <__sclose>:
 8005dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc2:	f000 b90f 	b.w	8005fe4 <_close_r>

08005dc6 <_vsniprintf_r>:
 8005dc6:	b530      	push	{r4, r5, lr}
 8005dc8:	4614      	mov	r4, r2
 8005dca:	2c00      	cmp	r4, #0
 8005dcc:	4605      	mov	r5, r0
 8005dce:	461a      	mov	r2, r3
 8005dd0:	b09b      	sub	sp, #108	@ 0x6c
 8005dd2:	da05      	bge.n	8005de0 <_vsniprintf_r+0x1a>
 8005dd4:	238b      	movs	r3, #139	@ 0x8b
 8005dd6:	6003      	str	r3, [r0, #0]
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	b01b      	add	sp, #108	@ 0x6c
 8005dde:	bd30      	pop	{r4, r5, pc}
 8005de0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005de4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	9319      	str	r3, [sp, #100]	@ 0x64
 8005dee:	bf0c      	ite	eq
 8005df0:	4623      	moveq	r3, r4
 8005df2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005df6:	9302      	str	r3, [sp, #8]
 8005df8:	9305      	str	r3, [sp, #20]
 8005dfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005dfe:	9100      	str	r1, [sp, #0]
 8005e00:	9104      	str	r1, [sp, #16]
 8005e02:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005e06:	4669      	mov	r1, sp
 8005e08:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005e0a:	f001 fc9d 	bl	8007748 <_svfiprintf_r>
 8005e0e:	1c43      	adds	r3, r0, #1
 8005e10:	bfbc      	itt	lt
 8005e12:	238b      	movlt	r3, #139	@ 0x8b
 8005e14:	602b      	strlt	r3, [r5, #0]
 8005e16:	2c00      	cmp	r4, #0
 8005e18:	d0e0      	beq.n	8005ddc <_vsniprintf_r+0x16>
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	9b00      	ldr	r3, [sp, #0]
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	e7dc      	b.n	8005ddc <_vsniprintf_r+0x16>
	...

08005e24 <vsniprintf>:
 8005e24:	b507      	push	{r0, r1, r2, lr}
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	460a      	mov	r2, r1
 8005e2c:	4601      	mov	r1, r0
 8005e2e:	4803      	ldr	r0, [pc, #12]	@ (8005e3c <vsniprintf+0x18>)
 8005e30:	6800      	ldr	r0, [r0, #0]
 8005e32:	f7ff ffc8 	bl	8005dc6 <_vsniprintf_r>
 8005e36:	b003      	add	sp, #12
 8005e38:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e3c:	20000018 	.word	0x20000018

08005e40 <__swbuf_r>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	460e      	mov	r6, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	4605      	mov	r5, r0
 8005e48:	b118      	cbz	r0, 8005e52 <__swbuf_r+0x12>
 8005e4a:	6a03      	ldr	r3, [r0, #32]
 8005e4c:	b90b      	cbnz	r3, 8005e52 <__swbuf_r+0x12>
 8005e4e:	f7ff feaf 	bl	8005bb0 <__sinit>
 8005e52:	69a3      	ldr	r3, [r4, #24]
 8005e54:	60a3      	str	r3, [r4, #8]
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	071a      	lsls	r2, r3, #28
 8005e5a:	d501      	bpl.n	8005e60 <__swbuf_r+0x20>
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	b943      	cbnz	r3, 8005e72 <__swbuf_r+0x32>
 8005e60:	4621      	mov	r1, r4
 8005e62:	4628      	mov	r0, r5
 8005e64:	f000 f82a 	bl	8005ebc <__swsetup_r>
 8005e68:	b118      	cbz	r0, 8005e72 <__swbuf_r+0x32>
 8005e6a:	f04f 37ff 	mov.w	r7, #4294967295
 8005e6e:	4638      	mov	r0, r7
 8005e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	6922      	ldr	r2, [r4, #16]
 8005e76:	b2f6      	uxtb	r6, r6
 8005e78:	1a98      	subs	r0, r3, r2
 8005e7a:	6963      	ldr	r3, [r4, #20]
 8005e7c:	4637      	mov	r7, r6
 8005e7e:	4283      	cmp	r3, r0
 8005e80:	dc05      	bgt.n	8005e8e <__swbuf_r+0x4e>
 8005e82:	4621      	mov	r1, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	f001 ff1b 	bl	8007cc0 <_fflush_r>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d1ed      	bne.n	8005e6a <__swbuf_r+0x2a>
 8005e8e:	68a3      	ldr	r3, [r4, #8]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	60a3      	str	r3, [r4, #8]
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	6022      	str	r2, [r4, #0]
 8005e9a:	701e      	strb	r6, [r3, #0]
 8005e9c:	6962      	ldr	r2, [r4, #20]
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d004      	beq.n	8005eae <__swbuf_r+0x6e>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	07db      	lsls	r3, r3, #31
 8005ea8:	d5e1      	bpl.n	8005e6e <__swbuf_r+0x2e>
 8005eaa:	2e0a      	cmp	r6, #10
 8005eac:	d1df      	bne.n	8005e6e <__swbuf_r+0x2e>
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	f001 ff05 	bl	8007cc0 <_fflush_r>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d0d9      	beq.n	8005e6e <__swbuf_r+0x2e>
 8005eba:	e7d6      	b.n	8005e6a <__swbuf_r+0x2a>

08005ebc <__swsetup_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4b29      	ldr	r3, [pc, #164]	@ (8005f64 <__swsetup_r+0xa8>)
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	b118      	cbz	r0, 8005ed0 <__swsetup_r+0x14>
 8005ec8:	6a03      	ldr	r3, [r0, #32]
 8005eca:	b90b      	cbnz	r3, 8005ed0 <__swsetup_r+0x14>
 8005ecc:	f7ff fe70 	bl	8005bb0 <__sinit>
 8005ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ed4:	0719      	lsls	r1, r3, #28
 8005ed6:	d422      	bmi.n	8005f1e <__swsetup_r+0x62>
 8005ed8:	06da      	lsls	r2, r3, #27
 8005eda:	d407      	bmi.n	8005eec <__swsetup_r+0x30>
 8005edc:	2209      	movs	r2, #9
 8005ede:	602a      	str	r2, [r5, #0]
 8005ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee8:	81a3      	strh	r3, [r4, #12]
 8005eea:	e033      	b.n	8005f54 <__swsetup_r+0x98>
 8005eec:	0758      	lsls	r0, r3, #29
 8005eee:	d512      	bpl.n	8005f16 <__swsetup_r+0x5a>
 8005ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ef2:	b141      	cbz	r1, 8005f06 <__swsetup_r+0x4a>
 8005ef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ef8:	4299      	cmp	r1, r3
 8005efa:	d002      	beq.n	8005f02 <__swsetup_r+0x46>
 8005efc:	4628      	mov	r0, r5
 8005efe:	f000 ff4f 	bl	8006da0 <_free_r>
 8005f02:	2300      	movs	r3, #0
 8005f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f0c:	81a3      	strh	r3, [r4, #12]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	6063      	str	r3, [r4, #4]
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	f043 0308 	orr.w	r3, r3, #8
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	b94b      	cbnz	r3, 8005f36 <__swsetup_r+0x7a>
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f2c:	d003      	beq.n	8005f36 <__swsetup_r+0x7a>
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f001 ff12 	bl	8007d5a <__smakebuf_r>
 8005f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f3a:	f013 0201 	ands.w	r2, r3, #1
 8005f3e:	d00a      	beq.n	8005f56 <__swsetup_r+0x9a>
 8005f40:	2200      	movs	r2, #0
 8005f42:	60a2      	str	r2, [r4, #8]
 8005f44:	6962      	ldr	r2, [r4, #20]
 8005f46:	4252      	negs	r2, r2
 8005f48:	61a2      	str	r2, [r4, #24]
 8005f4a:	6922      	ldr	r2, [r4, #16]
 8005f4c:	b942      	cbnz	r2, 8005f60 <__swsetup_r+0xa4>
 8005f4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f52:	d1c5      	bne.n	8005ee0 <__swsetup_r+0x24>
 8005f54:	bd38      	pop	{r3, r4, r5, pc}
 8005f56:	0799      	lsls	r1, r3, #30
 8005f58:	bf58      	it	pl
 8005f5a:	6962      	ldrpl	r2, [r4, #20]
 8005f5c:	60a2      	str	r2, [r4, #8]
 8005f5e:	e7f4      	b.n	8005f4a <__swsetup_r+0x8e>
 8005f60:	2000      	movs	r0, #0
 8005f62:	e7f7      	b.n	8005f54 <__swsetup_r+0x98>
 8005f64:	20000018 	.word	0x20000018

08005f68 <memset>:
 8005f68:	4603      	mov	r3, r0
 8005f6a:	4402      	add	r2, r0
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d100      	bne.n	8005f72 <memset+0xa>
 8005f70:	4770      	bx	lr
 8005f72:	f803 1b01 	strb.w	r1, [r3], #1
 8005f76:	e7f9      	b.n	8005f6c <memset+0x4>

08005f78 <strchr>:
 8005f78:	4603      	mov	r3, r0
 8005f7a:	b2c9      	uxtb	r1, r1
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f82:	b112      	cbz	r2, 8005f8a <strchr+0x12>
 8005f84:	428a      	cmp	r2, r1
 8005f86:	d1f9      	bne.n	8005f7c <strchr+0x4>
 8005f88:	4770      	bx	lr
 8005f8a:	2900      	cmp	r1, #0
 8005f8c:	bf18      	it	ne
 8005f8e:	2000      	movne	r0, #0
 8005f90:	4770      	bx	lr

08005f92 <strncmp>:
 8005f92:	b510      	push	{r4, lr}
 8005f94:	b16a      	cbz	r2, 8005fb2 <strncmp+0x20>
 8005f96:	3901      	subs	r1, #1
 8005f98:	1884      	adds	r4, r0, r2
 8005f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f9e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d103      	bne.n	8005fae <strncmp+0x1c>
 8005fa6:	42a0      	cmp	r0, r4
 8005fa8:	d001      	beq.n	8005fae <strncmp+0x1c>
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	d1f5      	bne.n	8005f9a <strncmp+0x8>
 8005fae:	1ad0      	subs	r0, r2, r3
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	e7fc      	b.n	8005fb0 <strncmp+0x1e>

08005fb6 <strncpy>:
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	3901      	subs	r1, #1
 8005fbc:	b132      	cbz	r2, 8005fcc <strncpy+0x16>
 8005fbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005fc2:	3a01      	subs	r2, #1
 8005fc4:	f803 4b01 	strb.w	r4, [r3], #1
 8005fc8:	2c00      	cmp	r4, #0
 8005fca:	d1f7      	bne.n	8005fbc <strncpy+0x6>
 8005fcc:	2100      	movs	r1, #0
 8005fce:	441a      	add	r2, r3
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d100      	bne.n	8005fd6 <strncpy+0x20>
 8005fd4:	bd10      	pop	{r4, pc}
 8005fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fda:	e7f9      	b.n	8005fd0 <strncpy+0x1a>

08005fdc <_localeconv_r>:
 8005fdc:	4800      	ldr	r0, [pc, #0]	@ (8005fe0 <_localeconv_r+0x4>)
 8005fde:	4770      	bx	lr
 8005fe0:	20000158 	.word	0x20000158

08005fe4 <_close_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	4d05      	ldr	r5, [pc, #20]	@ (8006000 <_close_r+0x1c>)
 8005fea:	4604      	mov	r4, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	602b      	str	r3, [r5, #0]
 8005ff0:	f7fc faa9 	bl	8002546 <_close>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_close_r+0x1a>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_close_r+0x1a>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20000cdc 	.word	0x20000cdc

08006004 <_lseek_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4604      	mov	r4, r0
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	2200      	movs	r2, #0
 800600e:	4d05      	ldr	r5, [pc, #20]	@ (8006024 <_lseek_r+0x20>)
 8006010:	602a      	str	r2, [r5, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	f7fc fabb 	bl	800258e <_lseek>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_lseek_r+0x1e>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_lseek_r+0x1e>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	20000cdc 	.word	0x20000cdc

08006028 <_read_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4604      	mov	r4, r0
 800602c:	4608      	mov	r0, r1
 800602e:	4611      	mov	r1, r2
 8006030:	2200      	movs	r2, #0
 8006032:	4d05      	ldr	r5, [pc, #20]	@ (8006048 <_read_r+0x20>)
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fc fa68 	bl	800250c <_read>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_read_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_read_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20000cdc 	.word	0x20000cdc

0800604c <_write_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4604      	mov	r4, r0
 8006050:	4608      	mov	r0, r1
 8006052:	4611      	mov	r1, r2
 8006054:	2200      	movs	r2, #0
 8006056:	4d05      	ldr	r5, [pc, #20]	@ (800606c <_write_r+0x20>)
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fc fae0 	bl	8002620 <_write>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_write_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_write_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	20000cdc 	.word	0x20000cdc

08006070 <__errno>:
 8006070:	4b01      	ldr	r3, [pc, #4]	@ (8006078 <__errno+0x8>)
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000018 	.word	0x20000018

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	2600      	movs	r6, #0
 8006080:	4d0c      	ldr	r5, [pc, #48]	@ (80060b4 <__libc_init_array+0x38>)
 8006082:	4c0d      	ldr	r4, [pc, #52]	@ (80060b8 <__libc_init_array+0x3c>)
 8006084:	1b64      	subs	r4, r4, r5
 8006086:	10a4      	asrs	r4, r4, #2
 8006088:	42a6      	cmp	r6, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	f001 ffe2 	bl	8008054 <_init>
 8006090:	2600      	movs	r6, #0
 8006092:	4d0a      	ldr	r5, [pc, #40]	@ (80060bc <__libc_init_array+0x40>)
 8006094:	4c0a      	ldr	r4, [pc, #40]	@ (80060c0 <__libc_init_array+0x44>)
 8006096:	1b64      	subs	r4, r4, r5
 8006098:	10a4      	asrs	r4, r4, #2
 800609a:	42a6      	cmp	r6, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a4:	4798      	blx	r3
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ae:	4798      	blx	r3
 80060b0:	3601      	adds	r6, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	080089b0 	.word	0x080089b0
 80060b8:	080089b0 	.word	0x080089b0
 80060bc:	080089b0 	.word	0x080089b0
 80060c0:	080089b4 	.word	0x080089b4

080060c4 <__retarget_lock_init_recursive>:
 80060c4:	4770      	bx	lr

080060c6 <__retarget_lock_acquire_recursive>:
 80060c6:	4770      	bx	lr

080060c8 <__retarget_lock_release_recursive>:
 80060c8:	4770      	bx	lr

080060ca <memchr>:
 80060ca:	4603      	mov	r3, r0
 80060cc:	b510      	push	{r4, lr}
 80060ce:	b2c9      	uxtb	r1, r1
 80060d0:	4402      	add	r2, r0
 80060d2:	4293      	cmp	r3, r2
 80060d4:	4618      	mov	r0, r3
 80060d6:	d101      	bne.n	80060dc <memchr+0x12>
 80060d8:	2000      	movs	r0, #0
 80060da:	e003      	b.n	80060e4 <memchr+0x1a>
 80060dc:	7804      	ldrb	r4, [r0, #0]
 80060de:	3301      	adds	r3, #1
 80060e0:	428c      	cmp	r4, r1
 80060e2:	d1f6      	bne.n	80060d2 <memchr+0x8>
 80060e4:	bd10      	pop	{r4, pc}

080060e6 <quorem>:
 80060e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	6903      	ldr	r3, [r0, #16]
 80060ec:	690c      	ldr	r4, [r1, #16]
 80060ee:	4607      	mov	r7, r0
 80060f0:	42a3      	cmp	r3, r4
 80060f2:	db7e      	blt.n	80061f2 <quorem+0x10c>
 80060f4:	3c01      	subs	r4, #1
 80060f6:	00a3      	lsls	r3, r4, #2
 80060f8:	f100 0514 	add.w	r5, r0, #20
 80060fc:	f101 0814 	add.w	r8, r1, #20
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800610c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006110:	3301      	adds	r3, #1
 8006112:	429a      	cmp	r2, r3
 8006114:	fbb2 f6f3 	udiv	r6, r2, r3
 8006118:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800611c:	d32e      	bcc.n	800617c <quorem+0x96>
 800611e:	f04f 0a00 	mov.w	sl, #0
 8006122:	46c4      	mov	ip, r8
 8006124:	46ae      	mov	lr, r5
 8006126:	46d3      	mov	fp, sl
 8006128:	f85c 3b04 	ldr.w	r3, [ip], #4
 800612c:	b298      	uxth	r0, r3
 800612e:	fb06 a000 	mla	r0, r6, r0, sl
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	0c02      	lsrs	r2, r0, #16
 8006136:	fb06 2303 	mla	r3, r6, r3, r2
 800613a:	f8de 2000 	ldr.w	r2, [lr]
 800613e:	b280      	uxth	r0, r0
 8006140:	b292      	uxth	r2, r2
 8006142:	1a12      	subs	r2, r2, r0
 8006144:	445a      	add	r2, fp
 8006146:	f8de 0000 	ldr.w	r0, [lr]
 800614a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800614e:	b29b      	uxth	r3, r3
 8006150:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006154:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006158:	b292      	uxth	r2, r2
 800615a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800615e:	45e1      	cmp	r9, ip
 8006160:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006164:	f84e 2b04 	str.w	r2, [lr], #4
 8006168:	d2de      	bcs.n	8006128 <quorem+0x42>
 800616a:	9b00      	ldr	r3, [sp, #0]
 800616c:	58eb      	ldr	r3, [r5, r3]
 800616e:	b92b      	cbnz	r3, 800617c <quorem+0x96>
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	3b04      	subs	r3, #4
 8006174:	429d      	cmp	r5, r3
 8006176:	461a      	mov	r2, r3
 8006178:	d32f      	bcc.n	80061da <quorem+0xf4>
 800617a:	613c      	str	r4, [r7, #16]
 800617c:	4638      	mov	r0, r7
 800617e:	f001 f97f 	bl	8007480 <__mcmp>
 8006182:	2800      	cmp	r0, #0
 8006184:	db25      	blt.n	80061d2 <quorem+0xec>
 8006186:	4629      	mov	r1, r5
 8006188:	2000      	movs	r0, #0
 800618a:	f858 2b04 	ldr.w	r2, [r8], #4
 800618e:	f8d1 c000 	ldr.w	ip, [r1]
 8006192:	fa1f fe82 	uxth.w	lr, r2
 8006196:	fa1f f38c 	uxth.w	r3, ip
 800619a:	eba3 030e 	sub.w	r3, r3, lr
 800619e:	4403      	add	r3, r0
 80061a0:	0c12      	lsrs	r2, r2, #16
 80061a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80061a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061b0:	45c1      	cmp	r9, r8
 80061b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061b6:	f841 3b04 	str.w	r3, [r1], #4
 80061ba:	d2e6      	bcs.n	800618a <quorem+0xa4>
 80061bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061c4:	b922      	cbnz	r2, 80061d0 <quorem+0xea>
 80061c6:	3b04      	subs	r3, #4
 80061c8:	429d      	cmp	r5, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	d30b      	bcc.n	80061e6 <quorem+0x100>
 80061ce:	613c      	str	r4, [r7, #16]
 80061d0:	3601      	adds	r6, #1
 80061d2:	4630      	mov	r0, r6
 80061d4:	b003      	add	sp, #12
 80061d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	3b04      	subs	r3, #4
 80061de:	2a00      	cmp	r2, #0
 80061e0:	d1cb      	bne.n	800617a <quorem+0x94>
 80061e2:	3c01      	subs	r4, #1
 80061e4:	e7c6      	b.n	8006174 <quorem+0x8e>
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	3b04      	subs	r3, #4
 80061ea:	2a00      	cmp	r2, #0
 80061ec:	d1ef      	bne.n	80061ce <quorem+0xe8>
 80061ee:	3c01      	subs	r4, #1
 80061f0:	e7ea      	b.n	80061c8 <quorem+0xe2>
 80061f2:	2000      	movs	r0, #0
 80061f4:	e7ee      	b.n	80061d4 <quorem+0xee>
	...

080061f8 <_dtoa_r>:
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	4614      	mov	r4, r2
 80061fe:	461d      	mov	r5, r3
 8006200:	69c7      	ldr	r7, [r0, #28]
 8006202:	b097      	sub	sp, #92	@ 0x5c
 8006204:	4681      	mov	r9, r0
 8006206:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800620a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800620c:	b97f      	cbnz	r7, 800622e <_dtoa_r+0x36>
 800620e:	2010      	movs	r0, #16
 8006210:	f000 fe0e 	bl	8006e30 <malloc>
 8006214:	4602      	mov	r2, r0
 8006216:	f8c9 001c 	str.w	r0, [r9, #28]
 800621a:	b920      	cbnz	r0, 8006226 <_dtoa_r+0x2e>
 800621c:	21ef      	movs	r1, #239	@ 0xef
 800621e:	4bac      	ldr	r3, [pc, #688]	@ (80064d0 <_dtoa_r+0x2d8>)
 8006220:	48ac      	ldr	r0, [pc, #688]	@ (80064d4 <_dtoa_r+0x2dc>)
 8006222:	f001 fe31 	bl	8007e88 <__assert_func>
 8006226:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800622a:	6007      	str	r7, [r0, #0]
 800622c:	60c7      	str	r7, [r0, #12]
 800622e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006232:	6819      	ldr	r1, [r3, #0]
 8006234:	b159      	cbz	r1, 800624e <_dtoa_r+0x56>
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	2301      	movs	r3, #1
 800623a:	4093      	lsls	r3, r2
 800623c:	604a      	str	r2, [r1, #4]
 800623e:	608b      	str	r3, [r1, #8]
 8006240:	4648      	mov	r0, r9
 8006242:	f000 feeb 	bl	800701c <_Bfree>
 8006246:	2200      	movs	r2, #0
 8006248:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	1e2b      	subs	r3, r5, #0
 8006250:	bfaf      	iteee	ge
 8006252:	2300      	movge	r3, #0
 8006254:	2201      	movlt	r2, #1
 8006256:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800625a:	9307      	strlt	r3, [sp, #28]
 800625c:	bfa8      	it	ge
 800625e:	6033      	strge	r3, [r6, #0]
 8006260:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006264:	4b9c      	ldr	r3, [pc, #624]	@ (80064d8 <_dtoa_r+0x2e0>)
 8006266:	bfb8      	it	lt
 8006268:	6032      	strlt	r2, [r6, #0]
 800626a:	ea33 0308 	bics.w	r3, r3, r8
 800626e:	d112      	bne.n	8006296 <_dtoa_r+0x9e>
 8006270:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006274:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800627c:	4323      	orrs	r3, r4
 800627e:	f000 855e 	beq.w	8006d3e <_dtoa_r+0xb46>
 8006282:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006284:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80064dc <_dtoa_r+0x2e4>
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8560 	beq.w	8006d4e <_dtoa_r+0xb56>
 800628e:	f10a 0303 	add.w	r3, sl, #3
 8006292:	f000 bd5a 	b.w	8006d4a <_dtoa_r+0xb52>
 8006296:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800629a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800629e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062a2:	2200      	movs	r2, #0
 80062a4:	2300      	movs	r3, #0
 80062a6:	f7fa fb7f 	bl	80009a8 <__aeabi_dcmpeq>
 80062aa:	4607      	mov	r7, r0
 80062ac:	b158      	cbz	r0, 80062c6 <_dtoa_r+0xce>
 80062ae:	2301      	movs	r3, #1
 80062b0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062b6:	b113      	cbz	r3, 80062be <_dtoa_r+0xc6>
 80062b8:	4b89      	ldr	r3, [pc, #548]	@ (80064e0 <_dtoa_r+0x2e8>)
 80062ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80064e4 <_dtoa_r+0x2ec>
 80062c2:	f000 bd44 	b.w	8006d4e <_dtoa_r+0xb56>
 80062c6:	ab14      	add	r3, sp, #80	@ 0x50
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	ab15      	add	r3, sp, #84	@ 0x54
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	4648      	mov	r0, r9
 80062d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062d4:	f001 f984 	bl	80075e0 <__d2b>
 80062d8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80062dc:	9003      	str	r0, [sp, #12]
 80062de:	2e00      	cmp	r6, #0
 80062e0:	d078      	beq.n	80063d4 <_dtoa_r+0x1dc>
 80062e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062e8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062f4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062f8:	9712      	str	r7, [sp, #72]	@ 0x48
 80062fa:	4619      	mov	r1, r3
 80062fc:	2200      	movs	r2, #0
 80062fe:	4b7a      	ldr	r3, [pc, #488]	@ (80064e8 <_dtoa_r+0x2f0>)
 8006300:	f7f9 ff32 	bl	8000168 <__aeabi_dsub>
 8006304:	a36c      	add	r3, pc, #432	@ (adr r3, 80064b8 <_dtoa_r+0x2c0>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7fa f8e5 	bl	80004d8 <__aeabi_dmul>
 800630e:	a36c      	add	r3, pc, #432	@ (adr r3, 80064c0 <_dtoa_r+0x2c8>)
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f7f9 ff2a 	bl	800016c <__adddf3>
 8006318:	4604      	mov	r4, r0
 800631a:	4630      	mov	r0, r6
 800631c:	460d      	mov	r5, r1
 800631e:	f7fa f871 	bl	8000404 <__aeabi_i2d>
 8006322:	a369      	add	r3, pc, #420	@ (adr r3, 80064c8 <_dtoa_r+0x2d0>)
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f7fa f8d6 	bl	80004d8 <__aeabi_dmul>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4620      	mov	r0, r4
 8006332:	4629      	mov	r1, r5
 8006334:	f7f9 ff1a 	bl	800016c <__adddf3>
 8006338:	4604      	mov	r4, r0
 800633a:	460d      	mov	r5, r1
 800633c:	f7fa fb7c 	bl	8000a38 <__aeabi_d2iz>
 8006340:	2200      	movs	r2, #0
 8006342:	4607      	mov	r7, r0
 8006344:	2300      	movs	r3, #0
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7fa fb37 	bl	80009bc <__aeabi_dcmplt>
 800634e:	b140      	cbz	r0, 8006362 <_dtoa_r+0x16a>
 8006350:	4638      	mov	r0, r7
 8006352:	f7fa f857 	bl	8000404 <__aeabi_i2d>
 8006356:	4622      	mov	r2, r4
 8006358:	462b      	mov	r3, r5
 800635a:	f7fa fb25 	bl	80009a8 <__aeabi_dcmpeq>
 800635e:	b900      	cbnz	r0, 8006362 <_dtoa_r+0x16a>
 8006360:	3f01      	subs	r7, #1
 8006362:	2f16      	cmp	r7, #22
 8006364:	d854      	bhi.n	8006410 <_dtoa_r+0x218>
 8006366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800636a:	4b60      	ldr	r3, [pc, #384]	@ (80064ec <_dtoa_r+0x2f4>)
 800636c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f7fa fb22 	bl	80009bc <__aeabi_dcmplt>
 8006378:	2800      	cmp	r0, #0
 800637a:	d04b      	beq.n	8006414 <_dtoa_r+0x21c>
 800637c:	2300      	movs	r3, #0
 800637e:	3f01      	subs	r7, #1
 8006380:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006382:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006384:	1b9b      	subs	r3, r3, r6
 8006386:	1e5a      	subs	r2, r3, #1
 8006388:	bf49      	itett	mi
 800638a:	f1c3 0301 	rsbmi	r3, r3, #1
 800638e:	2300      	movpl	r3, #0
 8006390:	9304      	strmi	r3, [sp, #16]
 8006392:	2300      	movmi	r3, #0
 8006394:	9209      	str	r2, [sp, #36]	@ 0x24
 8006396:	bf54      	ite	pl
 8006398:	9304      	strpl	r3, [sp, #16]
 800639a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800639c:	2f00      	cmp	r7, #0
 800639e:	db3b      	blt.n	8006418 <_dtoa_r+0x220>
 80063a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a2:	970e      	str	r7, [sp, #56]	@ 0x38
 80063a4:	443b      	add	r3, r7
 80063a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80063a8:	2300      	movs	r3, #0
 80063aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80063ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063ae:	2b09      	cmp	r3, #9
 80063b0:	d865      	bhi.n	800647e <_dtoa_r+0x286>
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	bfc4      	itt	gt
 80063b6:	3b04      	subgt	r3, #4
 80063b8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80063ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063bc:	bfc8      	it	gt
 80063be:	2400      	movgt	r4, #0
 80063c0:	f1a3 0302 	sub.w	r3, r3, #2
 80063c4:	bfd8      	it	le
 80063c6:	2401      	movle	r4, #1
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d864      	bhi.n	8006496 <_dtoa_r+0x29e>
 80063cc:	e8df f003 	tbb	[pc, r3]
 80063d0:	2c385553 	.word	0x2c385553
 80063d4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80063d8:	441e      	add	r6, r3
 80063da:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063de:	2b20      	cmp	r3, #32
 80063e0:	bfc1      	itttt	gt
 80063e2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063e6:	fa08 f803 	lslgt.w	r8, r8, r3
 80063ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063f2:	bfd6      	itet	le
 80063f4:	f1c3 0320 	rsble	r3, r3, #32
 80063f8:	ea48 0003 	orrgt.w	r0, r8, r3
 80063fc:	fa04 f003 	lslle.w	r0, r4, r3
 8006400:	f7f9 fff0 	bl	80003e4 <__aeabi_ui2d>
 8006404:	2201      	movs	r2, #1
 8006406:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800640a:	3e01      	subs	r6, #1
 800640c:	9212      	str	r2, [sp, #72]	@ 0x48
 800640e:	e774      	b.n	80062fa <_dtoa_r+0x102>
 8006410:	2301      	movs	r3, #1
 8006412:	e7b5      	b.n	8006380 <_dtoa_r+0x188>
 8006414:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006416:	e7b4      	b.n	8006382 <_dtoa_r+0x18a>
 8006418:	9b04      	ldr	r3, [sp, #16]
 800641a:	1bdb      	subs	r3, r3, r7
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	427b      	negs	r3, r7
 8006420:	930a      	str	r3, [sp, #40]	@ 0x28
 8006422:	2300      	movs	r3, #0
 8006424:	930e      	str	r3, [sp, #56]	@ 0x38
 8006426:	e7c1      	b.n	80063ac <_dtoa_r+0x1b4>
 8006428:	2301      	movs	r3, #1
 800642a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800642c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800642e:	eb07 0b03 	add.w	fp, r7, r3
 8006432:	f10b 0301 	add.w	r3, fp, #1
 8006436:	2b01      	cmp	r3, #1
 8006438:	9308      	str	r3, [sp, #32]
 800643a:	bfb8      	it	lt
 800643c:	2301      	movlt	r3, #1
 800643e:	e006      	b.n	800644e <_dtoa_r+0x256>
 8006440:	2301      	movs	r3, #1
 8006442:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006444:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006446:	2b00      	cmp	r3, #0
 8006448:	dd28      	ble.n	800649c <_dtoa_r+0x2a4>
 800644a:	469b      	mov	fp, r3
 800644c:	9308      	str	r3, [sp, #32]
 800644e:	2100      	movs	r1, #0
 8006450:	2204      	movs	r2, #4
 8006452:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006456:	f102 0514 	add.w	r5, r2, #20
 800645a:	429d      	cmp	r5, r3
 800645c:	d926      	bls.n	80064ac <_dtoa_r+0x2b4>
 800645e:	6041      	str	r1, [r0, #4]
 8006460:	4648      	mov	r0, r9
 8006462:	f000 fd9b 	bl	8006f9c <_Balloc>
 8006466:	4682      	mov	sl, r0
 8006468:	2800      	cmp	r0, #0
 800646a:	d143      	bne.n	80064f4 <_dtoa_r+0x2fc>
 800646c:	4602      	mov	r2, r0
 800646e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006472:	4b1f      	ldr	r3, [pc, #124]	@ (80064f0 <_dtoa_r+0x2f8>)
 8006474:	e6d4      	b.n	8006220 <_dtoa_r+0x28>
 8006476:	2300      	movs	r3, #0
 8006478:	e7e3      	b.n	8006442 <_dtoa_r+0x24a>
 800647a:	2300      	movs	r3, #0
 800647c:	e7d5      	b.n	800642a <_dtoa_r+0x232>
 800647e:	2401      	movs	r4, #1
 8006480:	2300      	movs	r3, #0
 8006482:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006484:	9320      	str	r3, [sp, #128]	@ 0x80
 8006486:	f04f 3bff 	mov.w	fp, #4294967295
 800648a:	2200      	movs	r2, #0
 800648c:	2312      	movs	r3, #18
 800648e:	f8cd b020 	str.w	fp, [sp, #32]
 8006492:	9221      	str	r2, [sp, #132]	@ 0x84
 8006494:	e7db      	b.n	800644e <_dtoa_r+0x256>
 8006496:	2301      	movs	r3, #1
 8006498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800649a:	e7f4      	b.n	8006486 <_dtoa_r+0x28e>
 800649c:	f04f 0b01 	mov.w	fp, #1
 80064a0:	465b      	mov	r3, fp
 80064a2:	f8cd b020 	str.w	fp, [sp, #32]
 80064a6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80064aa:	e7d0      	b.n	800644e <_dtoa_r+0x256>
 80064ac:	3101      	adds	r1, #1
 80064ae:	0052      	lsls	r2, r2, #1
 80064b0:	e7d1      	b.n	8006456 <_dtoa_r+0x25e>
 80064b2:	bf00      	nop
 80064b4:	f3af 8000 	nop.w
 80064b8:	636f4361 	.word	0x636f4361
 80064bc:	3fd287a7 	.word	0x3fd287a7
 80064c0:	8b60c8b3 	.word	0x8b60c8b3
 80064c4:	3fc68a28 	.word	0x3fc68a28
 80064c8:	509f79fb 	.word	0x509f79fb
 80064cc:	3fd34413 	.word	0x3fd34413
 80064d0:	08008778 	.word	0x08008778
 80064d4:	0800878f 	.word	0x0800878f
 80064d8:	7ff00000 	.word	0x7ff00000
 80064dc:	08008774 	.word	0x08008774
 80064e0:	08008748 	.word	0x08008748
 80064e4:	08008747 	.word	0x08008747
 80064e8:	3ff80000 	.word	0x3ff80000
 80064ec:	080088e0 	.word	0x080088e0
 80064f0:	080087e7 	.word	0x080087e7
 80064f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064f8:	6018      	str	r0, [r3, #0]
 80064fa:	9b08      	ldr	r3, [sp, #32]
 80064fc:	2b0e      	cmp	r3, #14
 80064fe:	f200 80a1 	bhi.w	8006644 <_dtoa_r+0x44c>
 8006502:	2c00      	cmp	r4, #0
 8006504:	f000 809e 	beq.w	8006644 <_dtoa_r+0x44c>
 8006508:	2f00      	cmp	r7, #0
 800650a:	dd33      	ble.n	8006574 <_dtoa_r+0x37c>
 800650c:	4b9c      	ldr	r3, [pc, #624]	@ (8006780 <_dtoa_r+0x588>)
 800650e:	f007 020f 	and.w	r2, r7, #15
 8006512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006516:	05f8      	lsls	r0, r7, #23
 8006518:	e9d3 3400 	ldrd	r3, r4, [r3]
 800651c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006520:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006524:	d516      	bpl.n	8006554 <_dtoa_r+0x35c>
 8006526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800652a:	4b96      	ldr	r3, [pc, #600]	@ (8006784 <_dtoa_r+0x58c>)
 800652c:	2603      	movs	r6, #3
 800652e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006532:	f7fa f8fb 	bl	800072c <__aeabi_ddiv>
 8006536:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800653a:	f004 040f 	and.w	r4, r4, #15
 800653e:	4d91      	ldr	r5, [pc, #580]	@ (8006784 <_dtoa_r+0x58c>)
 8006540:	b954      	cbnz	r4, 8006558 <_dtoa_r+0x360>
 8006542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800654a:	f7fa f8ef 	bl	800072c <__aeabi_ddiv>
 800654e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006552:	e028      	b.n	80065a6 <_dtoa_r+0x3ae>
 8006554:	2602      	movs	r6, #2
 8006556:	e7f2      	b.n	800653e <_dtoa_r+0x346>
 8006558:	07e1      	lsls	r1, r4, #31
 800655a:	d508      	bpl.n	800656e <_dtoa_r+0x376>
 800655c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006560:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006564:	f7f9 ffb8 	bl	80004d8 <__aeabi_dmul>
 8006568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800656c:	3601      	adds	r6, #1
 800656e:	1064      	asrs	r4, r4, #1
 8006570:	3508      	adds	r5, #8
 8006572:	e7e5      	b.n	8006540 <_dtoa_r+0x348>
 8006574:	f000 80af 	beq.w	80066d6 <_dtoa_r+0x4de>
 8006578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800657c:	427c      	negs	r4, r7
 800657e:	4b80      	ldr	r3, [pc, #512]	@ (8006780 <_dtoa_r+0x588>)
 8006580:	f004 020f 	and.w	r2, r4, #15
 8006584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f7f9 ffa4 	bl	80004d8 <__aeabi_dmul>
 8006590:	2602      	movs	r6, #2
 8006592:	2300      	movs	r3, #0
 8006594:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006598:	4d7a      	ldr	r5, [pc, #488]	@ (8006784 <_dtoa_r+0x58c>)
 800659a:	1124      	asrs	r4, r4, #4
 800659c:	2c00      	cmp	r4, #0
 800659e:	f040 808f 	bne.w	80066c0 <_dtoa_r+0x4c8>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1d3      	bne.n	800654e <_dtoa_r+0x356>
 80065a6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80065aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8094 	beq.w	80066da <_dtoa_r+0x4e2>
 80065b2:	2200      	movs	r2, #0
 80065b4:	4620      	mov	r0, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	4b73      	ldr	r3, [pc, #460]	@ (8006788 <_dtoa_r+0x590>)
 80065ba:	f7fa f9ff 	bl	80009bc <__aeabi_dcmplt>
 80065be:	2800      	cmp	r0, #0
 80065c0:	f000 808b 	beq.w	80066da <_dtoa_r+0x4e2>
 80065c4:	9b08      	ldr	r3, [sp, #32]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8087 	beq.w	80066da <_dtoa_r+0x4e2>
 80065cc:	f1bb 0f00 	cmp.w	fp, #0
 80065d0:	dd34      	ble.n	800663c <_dtoa_r+0x444>
 80065d2:	4620      	mov	r0, r4
 80065d4:	2200      	movs	r2, #0
 80065d6:	4629      	mov	r1, r5
 80065d8:	4b6c      	ldr	r3, [pc, #432]	@ (800678c <_dtoa_r+0x594>)
 80065da:	f7f9 ff7d 	bl	80004d8 <__aeabi_dmul>
 80065de:	465c      	mov	r4, fp
 80065e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065e4:	f107 38ff 	add.w	r8, r7, #4294967295
 80065e8:	3601      	adds	r6, #1
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7f9 ff0a 	bl	8000404 <__aeabi_i2d>
 80065f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065f4:	f7f9 ff70 	bl	80004d8 <__aeabi_dmul>
 80065f8:	2200      	movs	r2, #0
 80065fa:	4b65      	ldr	r3, [pc, #404]	@ (8006790 <_dtoa_r+0x598>)
 80065fc:	f7f9 fdb6 	bl	800016c <__adddf3>
 8006600:	4605      	mov	r5, r0
 8006602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006606:	2c00      	cmp	r4, #0
 8006608:	d16a      	bne.n	80066e0 <_dtoa_r+0x4e8>
 800660a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800660e:	2200      	movs	r2, #0
 8006610:	4b60      	ldr	r3, [pc, #384]	@ (8006794 <_dtoa_r+0x59c>)
 8006612:	f7f9 fda9 	bl	8000168 <__aeabi_dsub>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800661e:	462a      	mov	r2, r5
 8006620:	4633      	mov	r3, r6
 8006622:	f7fa f9e9 	bl	80009f8 <__aeabi_dcmpgt>
 8006626:	2800      	cmp	r0, #0
 8006628:	f040 8298 	bne.w	8006b5c <_dtoa_r+0x964>
 800662c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006630:	462a      	mov	r2, r5
 8006632:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006636:	f7fa f9c1 	bl	80009bc <__aeabi_dcmplt>
 800663a:	bb38      	cbnz	r0, 800668c <_dtoa_r+0x494>
 800663c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006640:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006644:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006646:	2b00      	cmp	r3, #0
 8006648:	f2c0 8157 	blt.w	80068fa <_dtoa_r+0x702>
 800664c:	2f0e      	cmp	r7, #14
 800664e:	f300 8154 	bgt.w	80068fa <_dtoa_r+0x702>
 8006652:	4b4b      	ldr	r3, [pc, #300]	@ (8006780 <_dtoa_r+0x588>)
 8006654:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006658:	e9d3 3400 	ldrd	r3, r4, [r3]
 800665c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006660:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006662:	2b00      	cmp	r3, #0
 8006664:	f280 80e5 	bge.w	8006832 <_dtoa_r+0x63a>
 8006668:	9b08      	ldr	r3, [sp, #32]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f300 80e1 	bgt.w	8006832 <_dtoa_r+0x63a>
 8006670:	d10c      	bne.n	800668c <_dtoa_r+0x494>
 8006672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006676:	2200      	movs	r2, #0
 8006678:	4b46      	ldr	r3, [pc, #280]	@ (8006794 <_dtoa_r+0x59c>)
 800667a:	f7f9 ff2d 	bl	80004d8 <__aeabi_dmul>
 800667e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006682:	f7fa f9af 	bl	80009e4 <__aeabi_dcmpge>
 8006686:	2800      	cmp	r0, #0
 8006688:	f000 8266 	beq.w	8006b58 <_dtoa_r+0x960>
 800668c:	2400      	movs	r4, #0
 800668e:	4625      	mov	r5, r4
 8006690:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006692:	4656      	mov	r6, sl
 8006694:	ea6f 0803 	mvn.w	r8, r3
 8006698:	2700      	movs	r7, #0
 800669a:	4621      	mov	r1, r4
 800669c:	4648      	mov	r0, r9
 800669e:	f000 fcbd 	bl	800701c <_Bfree>
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	f000 80bd 	beq.w	8006822 <_dtoa_r+0x62a>
 80066a8:	b12f      	cbz	r7, 80066b6 <_dtoa_r+0x4be>
 80066aa:	42af      	cmp	r7, r5
 80066ac:	d003      	beq.n	80066b6 <_dtoa_r+0x4be>
 80066ae:	4639      	mov	r1, r7
 80066b0:	4648      	mov	r0, r9
 80066b2:	f000 fcb3 	bl	800701c <_Bfree>
 80066b6:	4629      	mov	r1, r5
 80066b8:	4648      	mov	r0, r9
 80066ba:	f000 fcaf 	bl	800701c <_Bfree>
 80066be:	e0b0      	b.n	8006822 <_dtoa_r+0x62a>
 80066c0:	07e2      	lsls	r2, r4, #31
 80066c2:	d505      	bpl.n	80066d0 <_dtoa_r+0x4d8>
 80066c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066c8:	f7f9 ff06 	bl	80004d8 <__aeabi_dmul>
 80066cc:	2301      	movs	r3, #1
 80066ce:	3601      	adds	r6, #1
 80066d0:	1064      	asrs	r4, r4, #1
 80066d2:	3508      	adds	r5, #8
 80066d4:	e762      	b.n	800659c <_dtoa_r+0x3a4>
 80066d6:	2602      	movs	r6, #2
 80066d8:	e765      	b.n	80065a6 <_dtoa_r+0x3ae>
 80066da:	46b8      	mov	r8, r7
 80066dc:	9c08      	ldr	r4, [sp, #32]
 80066de:	e784      	b.n	80065ea <_dtoa_r+0x3f2>
 80066e0:	4b27      	ldr	r3, [pc, #156]	@ (8006780 <_dtoa_r+0x588>)
 80066e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066ec:	4454      	add	r4, sl
 80066ee:	2900      	cmp	r1, #0
 80066f0:	d054      	beq.n	800679c <_dtoa_r+0x5a4>
 80066f2:	2000      	movs	r0, #0
 80066f4:	4928      	ldr	r1, [pc, #160]	@ (8006798 <_dtoa_r+0x5a0>)
 80066f6:	f7fa f819 	bl	800072c <__aeabi_ddiv>
 80066fa:	4633      	mov	r3, r6
 80066fc:	462a      	mov	r2, r5
 80066fe:	f7f9 fd33 	bl	8000168 <__aeabi_dsub>
 8006702:	4656      	mov	r6, sl
 8006704:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800670c:	f7fa f994 	bl	8000a38 <__aeabi_d2iz>
 8006710:	4605      	mov	r5, r0
 8006712:	f7f9 fe77 	bl	8000404 <__aeabi_i2d>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800671e:	f7f9 fd23 	bl	8000168 <__aeabi_dsub>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	3530      	adds	r5, #48	@ 0x30
 8006728:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800672c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006730:	f806 5b01 	strb.w	r5, [r6], #1
 8006734:	f7fa f942 	bl	80009bc <__aeabi_dcmplt>
 8006738:	2800      	cmp	r0, #0
 800673a:	d172      	bne.n	8006822 <_dtoa_r+0x62a>
 800673c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006740:	2000      	movs	r0, #0
 8006742:	4911      	ldr	r1, [pc, #68]	@ (8006788 <_dtoa_r+0x590>)
 8006744:	f7f9 fd10 	bl	8000168 <__aeabi_dsub>
 8006748:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800674c:	f7fa f936 	bl	80009bc <__aeabi_dcmplt>
 8006750:	2800      	cmp	r0, #0
 8006752:	f040 80b4 	bne.w	80068be <_dtoa_r+0x6c6>
 8006756:	42a6      	cmp	r6, r4
 8006758:	f43f af70 	beq.w	800663c <_dtoa_r+0x444>
 800675c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006760:	2200      	movs	r2, #0
 8006762:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <_dtoa_r+0x594>)
 8006764:	f7f9 feb8 	bl	80004d8 <__aeabi_dmul>
 8006768:	2200      	movs	r2, #0
 800676a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800676e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006772:	4b06      	ldr	r3, [pc, #24]	@ (800678c <_dtoa_r+0x594>)
 8006774:	f7f9 feb0 	bl	80004d8 <__aeabi_dmul>
 8006778:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800677c:	e7c4      	b.n	8006708 <_dtoa_r+0x510>
 800677e:	bf00      	nop
 8006780:	080088e0 	.word	0x080088e0
 8006784:	080088b8 	.word	0x080088b8
 8006788:	3ff00000 	.word	0x3ff00000
 800678c:	40240000 	.word	0x40240000
 8006790:	401c0000 	.word	0x401c0000
 8006794:	40140000 	.word	0x40140000
 8006798:	3fe00000 	.word	0x3fe00000
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	f7f9 fe9a 	bl	80004d8 <__aeabi_dmul>
 80067a4:	4656      	mov	r6, sl
 80067a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067aa:	9413      	str	r4, [sp, #76]	@ 0x4c
 80067ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067b0:	f7fa f942 	bl	8000a38 <__aeabi_d2iz>
 80067b4:	4605      	mov	r5, r0
 80067b6:	f7f9 fe25 	bl	8000404 <__aeabi_i2d>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067c2:	f7f9 fcd1 	bl	8000168 <__aeabi_dsub>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	3530      	adds	r5, #48	@ 0x30
 80067cc:	f806 5b01 	strb.w	r5, [r6], #1
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	d124      	bne.n	8006826 <_dtoa_r+0x62e>
 80067dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067e0:	4bae      	ldr	r3, [pc, #696]	@ (8006a9c <_dtoa_r+0x8a4>)
 80067e2:	f7f9 fcc3 	bl	800016c <__adddf3>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ee:	f7fa f903 	bl	80009f8 <__aeabi_dcmpgt>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d163      	bne.n	80068be <_dtoa_r+0x6c6>
 80067f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067fa:	2000      	movs	r0, #0
 80067fc:	49a7      	ldr	r1, [pc, #668]	@ (8006a9c <_dtoa_r+0x8a4>)
 80067fe:	f7f9 fcb3 	bl	8000168 <__aeabi_dsub>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800680a:	f7fa f8d7 	bl	80009bc <__aeabi_dcmplt>
 800680e:	2800      	cmp	r0, #0
 8006810:	f43f af14 	beq.w	800663c <_dtoa_r+0x444>
 8006814:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006816:	1e73      	subs	r3, r6, #1
 8006818:	9313      	str	r3, [sp, #76]	@ 0x4c
 800681a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800681e:	2b30      	cmp	r3, #48	@ 0x30
 8006820:	d0f8      	beq.n	8006814 <_dtoa_r+0x61c>
 8006822:	4647      	mov	r7, r8
 8006824:	e03b      	b.n	800689e <_dtoa_r+0x6a6>
 8006826:	4b9e      	ldr	r3, [pc, #632]	@ (8006aa0 <_dtoa_r+0x8a8>)
 8006828:	f7f9 fe56 	bl	80004d8 <__aeabi_dmul>
 800682c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006830:	e7bc      	b.n	80067ac <_dtoa_r+0x5b4>
 8006832:	4656      	mov	r6, sl
 8006834:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800683c:	4620      	mov	r0, r4
 800683e:	4629      	mov	r1, r5
 8006840:	f7f9 ff74 	bl	800072c <__aeabi_ddiv>
 8006844:	f7fa f8f8 	bl	8000a38 <__aeabi_d2iz>
 8006848:	4680      	mov	r8, r0
 800684a:	f7f9 fddb 	bl	8000404 <__aeabi_i2d>
 800684e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006852:	f7f9 fe41 	bl	80004d8 <__aeabi_dmul>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4620      	mov	r0, r4
 800685c:	4629      	mov	r1, r5
 800685e:	f7f9 fc83 	bl	8000168 <__aeabi_dsub>
 8006862:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006866:	9d08      	ldr	r5, [sp, #32]
 8006868:	f806 4b01 	strb.w	r4, [r6], #1
 800686c:	eba6 040a 	sub.w	r4, r6, sl
 8006870:	42a5      	cmp	r5, r4
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	d133      	bne.n	80068e0 <_dtoa_r+0x6e8>
 8006878:	f7f9 fc78 	bl	800016c <__adddf3>
 800687c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006880:	4604      	mov	r4, r0
 8006882:	460d      	mov	r5, r1
 8006884:	f7fa f8b8 	bl	80009f8 <__aeabi_dcmpgt>
 8006888:	b9c0      	cbnz	r0, 80068bc <_dtoa_r+0x6c4>
 800688a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	f7fa f889 	bl	80009a8 <__aeabi_dcmpeq>
 8006896:	b110      	cbz	r0, 800689e <_dtoa_r+0x6a6>
 8006898:	f018 0f01 	tst.w	r8, #1
 800689c:	d10e      	bne.n	80068bc <_dtoa_r+0x6c4>
 800689e:	4648      	mov	r0, r9
 80068a0:	9903      	ldr	r1, [sp, #12]
 80068a2:	f000 fbbb 	bl	800701c <_Bfree>
 80068a6:	2300      	movs	r3, #0
 80068a8:	7033      	strb	r3, [r6, #0]
 80068aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80068ac:	3701      	adds	r7, #1
 80068ae:	601f      	str	r7, [r3, #0]
 80068b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 824b 	beq.w	8006d4e <_dtoa_r+0xb56>
 80068b8:	601e      	str	r6, [r3, #0]
 80068ba:	e248      	b.n	8006d4e <_dtoa_r+0xb56>
 80068bc:	46b8      	mov	r8, r7
 80068be:	4633      	mov	r3, r6
 80068c0:	461e      	mov	r6, r3
 80068c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068c6:	2a39      	cmp	r2, #57	@ 0x39
 80068c8:	d106      	bne.n	80068d8 <_dtoa_r+0x6e0>
 80068ca:	459a      	cmp	sl, r3
 80068cc:	d1f8      	bne.n	80068c0 <_dtoa_r+0x6c8>
 80068ce:	2230      	movs	r2, #48	@ 0x30
 80068d0:	f108 0801 	add.w	r8, r8, #1
 80068d4:	f88a 2000 	strb.w	r2, [sl]
 80068d8:	781a      	ldrb	r2, [r3, #0]
 80068da:	3201      	adds	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	e7a0      	b.n	8006822 <_dtoa_r+0x62a>
 80068e0:	2200      	movs	r2, #0
 80068e2:	4b6f      	ldr	r3, [pc, #444]	@ (8006aa0 <_dtoa_r+0x8a8>)
 80068e4:	f7f9 fdf8 	bl	80004d8 <__aeabi_dmul>
 80068e8:	2200      	movs	r2, #0
 80068ea:	2300      	movs	r3, #0
 80068ec:	4604      	mov	r4, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	f7fa f85a 	bl	80009a8 <__aeabi_dcmpeq>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d09f      	beq.n	8006838 <_dtoa_r+0x640>
 80068f8:	e7d1      	b.n	800689e <_dtoa_r+0x6a6>
 80068fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068fc:	2a00      	cmp	r2, #0
 80068fe:	f000 80ea 	beq.w	8006ad6 <_dtoa_r+0x8de>
 8006902:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006904:	2a01      	cmp	r2, #1
 8006906:	f300 80cd 	bgt.w	8006aa4 <_dtoa_r+0x8ac>
 800690a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800690c:	2a00      	cmp	r2, #0
 800690e:	f000 80c1 	beq.w	8006a94 <_dtoa_r+0x89c>
 8006912:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006916:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006918:	9e04      	ldr	r6, [sp, #16]
 800691a:	9a04      	ldr	r2, [sp, #16]
 800691c:	2101      	movs	r1, #1
 800691e:	441a      	add	r2, r3
 8006920:	9204      	str	r2, [sp, #16]
 8006922:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006924:	4648      	mov	r0, r9
 8006926:	441a      	add	r2, r3
 8006928:	9209      	str	r2, [sp, #36]	@ 0x24
 800692a:	f000 fc2b 	bl	8007184 <__i2b>
 800692e:	4605      	mov	r5, r0
 8006930:	b166      	cbz	r6, 800694c <_dtoa_r+0x754>
 8006932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	dd09      	ble.n	800694c <_dtoa_r+0x754>
 8006938:	42b3      	cmp	r3, r6
 800693a:	bfa8      	it	ge
 800693c:	4633      	movge	r3, r6
 800693e:	9a04      	ldr	r2, [sp, #16]
 8006940:	1af6      	subs	r6, r6, r3
 8006942:	1ad2      	subs	r2, r2, r3
 8006944:	9204      	str	r2, [sp, #16]
 8006946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	9309      	str	r3, [sp, #36]	@ 0x24
 800694c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800694e:	b30b      	cbz	r3, 8006994 <_dtoa_r+0x79c>
 8006950:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 80c6 	beq.w	8006ae4 <_dtoa_r+0x8ec>
 8006958:	2c00      	cmp	r4, #0
 800695a:	f000 80c0 	beq.w	8006ade <_dtoa_r+0x8e6>
 800695e:	4629      	mov	r1, r5
 8006960:	4622      	mov	r2, r4
 8006962:	4648      	mov	r0, r9
 8006964:	f000 fcc6 	bl	80072f4 <__pow5mult>
 8006968:	9a03      	ldr	r2, [sp, #12]
 800696a:	4601      	mov	r1, r0
 800696c:	4605      	mov	r5, r0
 800696e:	4648      	mov	r0, r9
 8006970:	f000 fc1e 	bl	80071b0 <__multiply>
 8006974:	9903      	ldr	r1, [sp, #12]
 8006976:	4680      	mov	r8, r0
 8006978:	4648      	mov	r0, r9
 800697a:	f000 fb4f 	bl	800701c <_Bfree>
 800697e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006980:	1b1b      	subs	r3, r3, r4
 8006982:	930a      	str	r3, [sp, #40]	@ 0x28
 8006984:	f000 80b1 	beq.w	8006aea <_dtoa_r+0x8f2>
 8006988:	4641      	mov	r1, r8
 800698a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800698c:	4648      	mov	r0, r9
 800698e:	f000 fcb1 	bl	80072f4 <__pow5mult>
 8006992:	9003      	str	r0, [sp, #12]
 8006994:	2101      	movs	r1, #1
 8006996:	4648      	mov	r0, r9
 8006998:	f000 fbf4 	bl	8007184 <__i2b>
 800699c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800699e:	4604      	mov	r4, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 81d8 	beq.w	8006d56 <_dtoa_r+0xb5e>
 80069a6:	461a      	mov	r2, r3
 80069a8:	4601      	mov	r1, r0
 80069aa:	4648      	mov	r0, r9
 80069ac:	f000 fca2 	bl	80072f4 <__pow5mult>
 80069b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069b2:	4604      	mov	r4, r0
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	f300 809f 	bgt.w	8006af8 <_dtoa_r+0x900>
 80069ba:	9b06      	ldr	r3, [sp, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 8097 	bne.w	8006af0 <_dtoa_r+0x8f8>
 80069c2:	9b07      	ldr	r3, [sp, #28]
 80069c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 8093 	bne.w	8006af4 <_dtoa_r+0x8fc>
 80069ce:	9b07      	ldr	r3, [sp, #28]
 80069d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069d4:	0d1b      	lsrs	r3, r3, #20
 80069d6:	051b      	lsls	r3, r3, #20
 80069d8:	b133      	cbz	r3, 80069e8 <_dtoa_r+0x7f0>
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	3301      	adds	r3, #1
 80069de:	9304      	str	r3, [sp, #16]
 80069e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e2:	3301      	adds	r3, #1
 80069e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069e6:	2301      	movs	r3, #1
 80069e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 81b8 	beq.w	8006d62 <_dtoa_r+0xb6a>
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069f8:	6918      	ldr	r0, [r3, #16]
 80069fa:	f000 fb77 	bl	80070ec <__hi0bits>
 80069fe:	f1c0 0020 	rsb	r0, r0, #32
 8006a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a04:	4418      	add	r0, r3
 8006a06:	f010 001f 	ands.w	r0, r0, #31
 8006a0a:	f000 8082 	beq.w	8006b12 <_dtoa_r+0x91a>
 8006a0e:	f1c0 0320 	rsb	r3, r0, #32
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	dd73      	ble.n	8006afe <_dtoa_r+0x906>
 8006a16:	9b04      	ldr	r3, [sp, #16]
 8006a18:	f1c0 001c 	rsb	r0, r0, #28
 8006a1c:	4403      	add	r3, r0
 8006a1e:	9304      	str	r3, [sp, #16]
 8006a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a22:	4406      	add	r6, r0
 8006a24:	4403      	add	r3, r0
 8006a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a28:	9b04      	ldr	r3, [sp, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	dd05      	ble.n	8006a3a <_dtoa_r+0x842>
 8006a2e:	461a      	mov	r2, r3
 8006a30:	4648      	mov	r0, r9
 8006a32:	9903      	ldr	r1, [sp, #12]
 8006a34:	f000 fcb8 	bl	80073a8 <__lshift>
 8006a38:	9003      	str	r0, [sp, #12]
 8006a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	dd05      	ble.n	8006a4c <_dtoa_r+0x854>
 8006a40:	4621      	mov	r1, r4
 8006a42:	461a      	mov	r2, r3
 8006a44:	4648      	mov	r0, r9
 8006a46:	f000 fcaf 	bl	80073a8 <__lshift>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d061      	beq.n	8006b16 <_dtoa_r+0x91e>
 8006a52:	4621      	mov	r1, r4
 8006a54:	9803      	ldr	r0, [sp, #12]
 8006a56:	f000 fd13 	bl	8007480 <__mcmp>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	da5b      	bge.n	8006b16 <_dtoa_r+0x91e>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	220a      	movs	r2, #10
 8006a62:	4648      	mov	r0, r9
 8006a64:	9903      	ldr	r1, [sp, #12]
 8006a66:	f000 fafb 	bl	8007060 <__multadd>
 8006a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a6c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006a70:	9003      	str	r0, [sp, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8177 	beq.w	8006d66 <_dtoa_r+0xb6e>
 8006a78:	4629      	mov	r1, r5
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	220a      	movs	r2, #10
 8006a7e:	4648      	mov	r0, r9
 8006a80:	f000 faee 	bl	8007060 <__multadd>
 8006a84:	f1bb 0f00 	cmp.w	fp, #0
 8006a88:	4605      	mov	r5, r0
 8006a8a:	dc6f      	bgt.n	8006b6c <_dtoa_r+0x974>
 8006a8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	dc49      	bgt.n	8006b26 <_dtoa_r+0x92e>
 8006a92:	e06b      	b.n	8006b6c <_dtoa_r+0x974>
 8006a94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a9a:	e73c      	b.n	8006916 <_dtoa_r+0x71e>
 8006a9c:	3fe00000 	.word	0x3fe00000
 8006aa0:	40240000 	.word	0x40240000
 8006aa4:	9b08      	ldr	r3, [sp, #32]
 8006aa6:	1e5c      	subs	r4, r3, #1
 8006aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	db09      	blt.n	8006ac2 <_dtoa_r+0x8ca>
 8006aae:	1b1c      	subs	r4, r3, r4
 8006ab0:	9b08      	ldr	r3, [sp, #32]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f6bf af30 	bge.w	8006918 <_dtoa_r+0x720>
 8006ab8:	9b04      	ldr	r3, [sp, #16]
 8006aba:	9a08      	ldr	r2, [sp, #32]
 8006abc:	1a9e      	subs	r6, r3, r2
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e72b      	b.n	800691a <_dtoa_r+0x722>
 8006ac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ac6:	1ae3      	subs	r3, r4, r3
 8006ac8:	441a      	add	r2, r3
 8006aca:	940a      	str	r4, [sp, #40]	@ 0x28
 8006acc:	9e04      	ldr	r6, [sp, #16]
 8006ace:	2400      	movs	r4, #0
 8006ad0:	9b08      	ldr	r3, [sp, #32]
 8006ad2:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ad4:	e721      	b.n	800691a <_dtoa_r+0x722>
 8006ad6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ad8:	9e04      	ldr	r6, [sp, #16]
 8006ada:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006adc:	e728      	b.n	8006930 <_dtoa_r+0x738>
 8006ade:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006ae2:	e751      	b.n	8006988 <_dtoa_r+0x790>
 8006ae4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ae6:	9903      	ldr	r1, [sp, #12]
 8006ae8:	e750      	b.n	800698c <_dtoa_r+0x794>
 8006aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aee:	e751      	b.n	8006994 <_dtoa_r+0x79c>
 8006af0:	2300      	movs	r3, #0
 8006af2:	e779      	b.n	80069e8 <_dtoa_r+0x7f0>
 8006af4:	9b06      	ldr	r3, [sp, #24]
 8006af6:	e777      	b.n	80069e8 <_dtoa_r+0x7f0>
 8006af8:	2300      	movs	r3, #0
 8006afa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006afc:	e779      	b.n	80069f2 <_dtoa_r+0x7fa>
 8006afe:	d093      	beq.n	8006a28 <_dtoa_r+0x830>
 8006b00:	9a04      	ldr	r2, [sp, #16]
 8006b02:	331c      	adds	r3, #28
 8006b04:	441a      	add	r2, r3
 8006b06:	9204      	str	r2, [sp, #16]
 8006b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b0a:	441e      	add	r6, r3
 8006b0c:	441a      	add	r2, r3
 8006b0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b10:	e78a      	b.n	8006a28 <_dtoa_r+0x830>
 8006b12:	4603      	mov	r3, r0
 8006b14:	e7f4      	b.n	8006b00 <_dtoa_r+0x908>
 8006b16:	9b08      	ldr	r3, [sp, #32]
 8006b18:	46b8      	mov	r8, r7
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dc20      	bgt.n	8006b60 <_dtoa_r+0x968>
 8006b1e:	469b      	mov	fp, r3
 8006b20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	dd1e      	ble.n	8006b64 <_dtoa_r+0x96c>
 8006b26:	f1bb 0f00 	cmp.w	fp, #0
 8006b2a:	f47f adb1 	bne.w	8006690 <_dtoa_r+0x498>
 8006b2e:	4621      	mov	r1, r4
 8006b30:	465b      	mov	r3, fp
 8006b32:	2205      	movs	r2, #5
 8006b34:	4648      	mov	r0, r9
 8006b36:	f000 fa93 	bl	8007060 <__multadd>
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	9803      	ldr	r0, [sp, #12]
 8006b40:	f000 fc9e 	bl	8007480 <__mcmp>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f77f ada3 	ble.w	8006690 <_dtoa_r+0x498>
 8006b4a:	4656      	mov	r6, sl
 8006b4c:	2331      	movs	r3, #49	@ 0x31
 8006b4e:	f108 0801 	add.w	r8, r8, #1
 8006b52:	f806 3b01 	strb.w	r3, [r6], #1
 8006b56:	e59f      	b.n	8006698 <_dtoa_r+0x4a0>
 8006b58:	46b8      	mov	r8, r7
 8006b5a:	9c08      	ldr	r4, [sp, #32]
 8006b5c:	4625      	mov	r5, r4
 8006b5e:	e7f4      	b.n	8006b4a <_dtoa_r+0x952>
 8006b60:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006b64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8101 	beq.w	8006d6e <_dtoa_r+0xb76>
 8006b6c:	2e00      	cmp	r6, #0
 8006b6e:	dd05      	ble.n	8006b7c <_dtoa_r+0x984>
 8006b70:	4629      	mov	r1, r5
 8006b72:	4632      	mov	r2, r6
 8006b74:	4648      	mov	r0, r9
 8006b76:	f000 fc17 	bl	80073a8 <__lshift>
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d05c      	beq.n	8006c3c <_dtoa_r+0xa44>
 8006b82:	4648      	mov	r0, r9
 8006b84:	6869      	ldr	r1, [r5, #4]
 8006b86:	f000 fa09 	bl	8006f9c <_Balloc>
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	b928      	cbnz	r0, 8006b9a <_dtoa_r+0x9a2>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b94:	4b80      	ldr	r3, [pc, #512]	@ (8006d98 <_dtoa_r+0xba0>)
 8006b96:	f7ff bb43 	b.w	8006220 <_dtoa_r+0x28>
 8006b9a:	692a      	ldr	r2, [r5, #16]
 8006b9c:	f105 010c 	add.w	r1, r5, #12
 8006ba0:	3202      	adds	r2, #2
 8006ba2:	0092      	lsls	r2, r2, #2
 8006ba4:	300c      	adds	r0, #12
 8006ba6:	f001 f961 	bl	8007e6c <memcpy>
 8006baa:	2201      	movs	r2, #1
 8006bac:	4631      	mov	r1, r6
 8006bae:	4648      	mov	r0, r9
 8006bb0:	f000 fbfa 	bl	80073a8 <__lshift>
 8006bb4:	462f      	mov	r7, r5
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	f10a 0301 	add.w	r3, sl, #1
 8006bbc:	9304      	str	r3, [sp, #16]
 8006bbe:	eb0a 030b 	add.w	r3, sl, fp
 8006bc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bc4:	9b06      	ldr	r3, [sp, #24]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bcc:	9b04      	ldr	r3, [sp, #16]
 8006bce:	4621      	mov	r1, r4
 8006bd0:	9803      	ldr	r0, [sp, #12]
 8006bd2:	f103 3bff 	add.w	fp, r3, #4294967295
 8006bd6:	f7ff fa86 	bl	80060e6 <quorem>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4639      	mov	r1, r7
 8006bde:	3330      	adds	r3, #48	@ 0x30
 8006be0:	9006      	str	r0, [sp, #24]
 8006be2:	9803      	ldr	r0, [sp, #12]
 8006be4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006be6:	f000 fc4b 	bl	8007480 <__mcmp>
 8006bea:	462a      	mov	r2, r5
 8006bec:	9008      	str	r0, [sp, #32]
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4648      	mov	r0, r9
 8006bf2:	f000 fc61 	bl	80074b8 <__mdiff>
 8006bf6:	68c2      	ldr	r2, [r0, #12]
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bfc:	bb02      	cbnz	r2, 8006c40 <_dtoa_r+0xa48>
 8006bfe:	4601      	mov	r1, r0
 8006c00:	9803      	ldr	r0, [sp, #12]
 8006c02:	f000 fc3d 	bl	8007480 <__mcmp>
 8006c06:	4602      	mov	r2, r0
 8006c08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4648      	mov	r0, r9
 8006c0e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006c12:	f000 fa03 	bl	800701c <_Bfree>
 8006c16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c1a:	9e04      	ldr	r6, [sp, #16]
 8006c1c:	ea42 0103 	orr.w	r1, r2, r3
 8006c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c22:	4319      	orrs	r1, r3
 8006c24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c26:	d10d      	bne.n	8006c44 <_dtoa_r+0xa4c>
 8006c28:	2b39      	cmp	r3, #57	@ 0x39
 8006c2a:	d027      	beq.n	8006c7c <_dtoa_r+0xa84>
 8006c2c:	9a08      	ldr	r2, [sp, #32]
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	dd01      	ble.n	8006c36 <_dtoa_r+0xa3e>
 8006c32:	9b06      	ldr	r3, [sp, #24]
 8006c34:	3331      	adds	r3, #49	@ 0x31
 8006c36:	f88b 3000 	strb.w	r3, [fp]
 8006c3a:	e52e      	b.n	800669a <_dtoa_r+0x4a2>
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	e7b9      	b.n	8006bb4 <_dtoa_r+0x9bc>
 8006c40:	2201      	movs	r2, #1
 8006c42:	e7e2      	b.n	8006c0a <_dtoa_r+0xa12>
 8006c44:	9908      	ldr	r1, [sp, #32]
 8006c46:	2900      	cmp	r1, #0
 8006c48:	db04      	blt.n	8006c54 <_dtoa_r+0xa5c>
 8006c4a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006c4c:	4301      	orrs	r1, r0
 8006c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c50:	4301      	orrs	r1, r0
 8006c52:	d120      	bne.n	8006c96 <_dtoa_r+0xa9e>
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	ddee      	ble.n	8006c36 <_dtoa_r+0xa3e>
 8006c58:	2201      	movs	r2, #1
 8006c5a:	9903      	ldr	r1, [sp, #12]
 8006c5c:	4648      	mov	r0, r9
 8006c5e:	9304      	str	r3, [sp, #16]
 8006c60:	f000 fba2 	bl	80073a8 <__lshift>
 8006c64:	4621      	mov	r1, r4
 8006c66:	9003      	str	r0, [sp, #12]
 8006c68:	f000 fc0a 	bl	8007480 <__mcmp>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	9b04      	ldr	r3, [sp, #16]
 8006c70:	dc02      	bgt.n	8006c78 <_dtoa_r+0xa80>
 8006c72:	d1e0      	bne.n	8006c36 <_dtoa_r+0xa3e>
 8006c74:	07da      	lsls	r2, r3, #31
 8006c76:	d5de      	bpl.n	8006c36 <_dtoa_r+0xa3e>
 8006c78:	2b39      	cmp	r3, #57	@ 0x39
 8006c7a:	d1da      	bne.n	8006c32 <_dtoa_r+0xa3a>
 8006c7c:	2339      	movs	r3, #57	@ 0x39
 8006c7e:	f88b 3000 	strb.w	r3, [fp]
 8006c82:	4633      	mov	r3, r6
 8006c84:	461e      	mov	r6, r3
 8006c86:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	2a39      	cmp	r2, #57	@ 0x39
 8006c8e:	d04e      	beq.n	8006d2e <_dtoa_r+0xb36>
 8006c90:	3201      	adds	r2, #1
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	e501      	b.n	800669a <_dtoa_r+0x4a2>
 8006c96:	2a00      	cmp	r2, #0
 8006c98:	dd03      	ble.n	8006ca2 <_dtoa_r+0xaaa>
 8006c9a:	2b39      	cmp	r3, #57	@ 0x39
 8006c9c:	d0ee      	beq.n	8006c7c <_dtoa_r+0xa84>
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	e7c9      	b.n	8006c36 <_dtoa_r+0xa3e>
 8006ca2:	9a04      	ldr	r2, [sp, #16]
 8006ca4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ca6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006caa:	428a      	cmp	r2, r1
 8006cac:	d028      	beq.n	8006d00 <_dtoa_r+0xb08>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	9903      	ldr	r1, [sp, #12]
 8006cb4:	4648      	mov	r0, r9
 8006cb6:	f000 f9d3 	bl	8007060 <__multadd>
 8006cba:	42af      	cmp	r7, r5
 8006cbc:	9003      	str	r0, [sp, #12]
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	f04f 020a 	mov.w	r2, #10
 8006cc6:	4639      	mov	r1, r7
 8006cc8:	4648      	mov	r0, r9
 8006cca:	d107      	bne.n	8006cdc <_dtoa_r+0xae4>
 8006ccc:	f000 f9c8 	bl	8007060 <__multadd>
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	9304      	str	r3, [sp, #16]
 8006cda:	e777      	b.n	8006bcc <_dtoa_r+0x9d4>
 8006cdc:	f000 f9c0 	bl	8007060 <__multadd>
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	220a      	movs	r2, #10
 8006ce8:	4648      	mov	r0, r9
 8006cea:	f000 f9b9 	bl	8007060 <__multadd>
 8006cee:	4605      	mov	r5, r0
 8006cf0:	e7f0      	b.n	8006cd4 <_dtoa_r+0xadc>
 8006cf2:	f1bb 0f00 	cmp.w	fp, #0
 8006cf6:	bfcc      	ite	gt
 8006cf8:	465e      	movgt	r6, fp
 8006cfa:	2601      	movle	r6, #1
 8006cfc:	2700      	movs	r7, #0
 8006cfe:	4456      	add	r6, sl
 8006d00:	2201      	movs	r2, #1
 8006d02:	9903      	ldr	r1, [sp, #12]
 8006d04:	4648      	mov	r0, r9
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	f000 fb4e 	bl	80073a8 <__lshift>
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	9003      	str	r0, [sp, #12]
 8006d10:	f000 fbb6 	bl	8007480 <__mcmp>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	dcb4      	bgt.n	8006c82 <_dtoa_r+0xa8a>
 8006d18:	d102      	bne.n	8006d20 <_dtoa_r+0xb28>
 8006d1a:	9b04      	ldr	r3, [sp, #16]
 8006d1c:	07db      	lsls	r3, r3, #31
 8006d1e:	d4b0      	bmi.n	8006c82 <_dtoa_r+0xa8a>
 8006d20:	4633      	mov	r3, r6
 8006d22:	461e      	mov	r6, r3
 8006d24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d28:	2a30      	cmp	r2, #48	@ 0x30
 8006d2a:	d0fa      	beq.n	8006d22 <_dtoa_r+0xb2a>
 8006d2c:	e4b5      	b.n	800669a <_dtoa_r+0x4a2>
 8006d2e:	459a      	cmp	sl, r3
 8006d30:	d1a8      	bne.n	8006c84 <_dtoa_r+0xa8c>
 8006d32:	2331      	movs	r3, #49	@ 0x31
 8006d34:	f108 0801 	add.w	r8, r8, #1
 8006d38:	f88a 3000 	strb.w	r3, [sl]
 8006d3c:	e4ad      	b.n	800669a <_dtoa_r+0x4a2>
 8006d3e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006d9c <_dtoa_r+0xba4>
 8006d44:	b11b      	cbz	r3, 8006d4e <_dtoa_r+0xb56>
 8006d46:	f10a 0308 	add.w	r3, sl, #8
 8006d4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	4650      	mov	r0, sl
 8006d50:	b017      	add	sp, #92	@ 0x5c
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	f77f ae2e 	ble.w	80069ba <_dtoa_r+0x7c2>
 8006d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d60:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d62:	2001      	movs	r0, #1
 8006d64:	e64d      	b.n	8006a02 <_dtoa_r+0x80a>
 8006d66:	f1bb 0f00 	cmp.w	fp, #0
 8006d6a:	f77f aed9 	ble.w	8006b20 <_dtoa_r+0x928>
 8006d6e:	4656      	mov	r6, sl
 8006d70:	4621      	mov	r1, r4
 8006d72:	9803      	ldr	r0, [sp, #12]
 8006d74:	f7ff f9b7 	bl	80060e6 <quorem>
 8006d78:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006d7c:	f806 3b01 	strb.w	r3, [r6], #1
 8006d80:	eba6 020a 	sub.w	r2, r6, sl
 8006d84:	4593      	cmp	fp, r2
 8006d86:	ddb4      	ble.n	8006cf2 <_dtoa_r+0xafa>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	220a      	movs	r2, #10
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	9903      	ldr	r1, [sp, #12]
 8006d90:	f000 f966 	bl	8007060 <__multadd>
 8006d94:	9003      	str	r0, [sp, #12]
 8006d96:	e7eb      	b.n	8006d70 <_dtoa_r+0xb78>
 8006d98:	080087e7 	.word	0x080087e7
 8006d9c:	0800876b 	.word	0x0800876b

08006da0 <_free_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4605      	mov	r5, r0
 8006da4:	2900      	cmp	r1, #0
 8006da6:	d040      	beq.n	8006e2a <_free_r+0x8a>
 8006da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dac:	1f0c      	subs	r4, r1, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bfb8      	it	lt
 8006db2:	18e4      	addlt	r4, r4, r3
 8006db4:	f000 f8e6 	bl	8006f84 <__malloc_lock>
 8006db8:	4a1c      	ldr	r2, [pc, #112]	@ (8006e2c <_free_r+0x8c>)
 8006dba:	6813      	ldr	r3, [r2, #0]
 8006dbc:	b933      	cbnz	r3, 8006dcc <_free_r+0x2c>
 8006dbe:	6063      	str	r3, [r4, #4]
 8006dc0:	6014      	str	r4, [r2, #0]
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc8:	f000 b8e2 	b.w	8006f90 <__malloc_unlock>
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	d908      	bls.n	8006de2 <_free_r+0x42>
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	1821      	adds	r1, r4, r0
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	bf01      	itttt	eq
 8006dd8:	6819      	ldreq	r1, [r3, #0]
 8006dda:	685b      	ldreq	r3, [r3, #4]
 8006ddc:	1809      	addeq	r1, r1, r0
 8006dde:	6021      	streq	r1, [r4, #0]
 8006de0:	e7ed      	b.n	8006dbe <_free_r+0x1e>
 8006de2:	461a      	mov	r2, r3
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	b10b      	cbz	r3, 8006dec <_free_r+0x4c>
 8006de8:	42a3      	cmp	r3, r4
 8006dea:	d9fa      	bls.n	8006de2 <_free_r+0x42>
 8006dec:	6811      	ldr	r1, [r2, #0]
 8006dee:	1850      	adds	r0, r2, r1
 8006df0:	42a0      	cmp	r0, r4
 8006df2:	d10b      	bne.n	8006e0c <_free_r+0x6c>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	4401      	add	r1, r0
 8006df8:	1850      	adds	r0, r2, r1
 8006dfa:	4283      	cmp	r3, r0
 8006dfc:	6011      	str	r1, [r2, #0]
 8006dfe:	d1e0      	bne.n	8006dc2 <_free_r+0x22>
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4408      	add	r0, r1
 8006e06:	6010      	str	r0, [r2, #0]
 8006e08:	6053      	str	r3, [r2, #4]
 8006e0a:	e7da      	b.n	8006dc2 <_free_r+0x22>
 8006e0c:	d902      	bls.n	8006e14 <_free_r+0x74>
 8006e0e:	230c      	movs	r3, #12
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	e7d6      	b.n	8006dc2 <_free_r+0x22>
 8006e14:	6820      	ldr	r0, [r4, #0]
 8006e16:	1821      	adds	r1, r4, r0
 8006e18:	428b      	cmp	r3, r1
 8006e1a:	bf01      	itttt	eq
 8006e1c:	6819      	ldreq	r1, [r3, #0]
 8006e1e:	685b      	ldreq	r3, [r3, #4]
 8006e20:	1809      	addeq	r1, r1, r0
 8006e22:	6021      	streq	r1, [r4, #0]
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	6054      	str	r4, [r2, #4]
 8006e28:	e7cb      	b.n	8006dc2 <_free_r+0x22>
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	20000ce8 	.word	0x20000ce8

08006e30 <malloc>:
 8006e30:	4b02      	ldr	r3, [pc, #8]	@ (8006e3c <malloc+0xc>)
 8006e32:	4601      	mov	r1, r0
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	f000 b825 	b.w	8006e84 <_malloc_r>
 8006e3a:	bf00      	nop
 8006e3c:	20000018 	.word	0x20000018

08006e40 <sbrk_aligned>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4e0f      	ldr	r6, [pc, #60]	@ (8006e80 <sbrk_aligned+0x40>)
 8006e44:	460c      	mov	r4, r1
 8006e46:	6831      	ldr	r1, [r6, #0]
 8006e48:	4605      	mov	r5, r0
 8006e4a:	b911      	cbnz	r1, 8006e52 <sbrk_aligned+0x12>
 8006e4c:	f000 fffe 	bl	8007e4c <_sbrk_r>
 8006e50:	6030      	str	r0, [r6, #0]
 8006e52:	4621      	mov	r1, r4
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 fff9 	bl	8007e4c <_sbrk_r>
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	d103      	bne.n	8006e66 <sbrk_aligned+0x26>
 8006e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8006e62:	4620      	mov	r0, r4
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
 8006e66:	1cc4      	adds	r4, r0, #3
 8006e68:	f024 0403 	bic.w	r4, r4, #3
 8006e6c:	42a0      	cmp	r0, r4
 8006e6e:	d0f8      	beq.n	8006e62 <sbrk_aligned+0x22>
 8006e70:	1a21      	subs	r1, r4, r0
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 ffea 	bl	8007e4c <_sbrk_r>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d1f2      	bne.n	8006e62 <sbrk_aligned+0x22>
 8006e7c:	e7ef      	b.n	8006e5e <sbrk_aligned+0x1e>
 8006e7e:	bf00      	nop
 8006e80:	20000ce4 	.word	0x20000ce4

08006e84 <_malloc_r>:
 8006e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e88:	1ccd      	adds	r5, r1, #3
 8006e8a:	f025 0503 	bic.w	r5, r5, #3
 8006e8e:	3508      	adds	r5, #8
 8006e90:	2d0c      	cmp	r5, #12
 8006e92:	bf38      	it	cc
 8006e94:	250c      	movcc	r5, #12
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	4606      	mov	r6, r0
 8006e9a:	db01      	blt.n	8006ea0 <_malloc_r+0x1c>
 8006e9c:	42a9      	cmp	r1, r5
 8006e9e:	d904      	bls.n	8006eaa <_malloc_r+0x26>
 8006ea0:	230c      	movs	r3, #12
 8006ea2:	6033      	str	r3, [r6, #0]
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f80 <_malloc_r+0xfc>
 8006eae:	f000 f869 	bl	8006f84 <__malloc_lock>
 8006eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb6:	461c      	mov	r4, r3
 8006eb8:	bb44      	cbnz	r4, 8006f0c <_malloc_r+0x88>
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f7ff ffbf 	bl	8006e40 <sbrk_aligned>
 8006ec2:	1c43      	adds	r3, r0, #1
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	d158      	bne.n	8006f7a <_malloc_r+0xf6>
 8006ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8006ecc:	4627      	mov	r7, r4
 8006ece:	2f00      	cmp	r7, #0
 8006ed0:	d143      	bne.n	8006f5a <_malloc_r+0xd6>
 8006ed2:	2c00      	cmp	r4, #0
 8006ed4:	d04b      	beq.n	8006f6e <_malloc_r+0xea>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	4639      	mov	r1, r7
 8006eda:	4630      	mov	r0, r6
 8006edc:	eb04 0903 	add.w	r9, r4, r3
 8006ee0:	f000 ffb4 	bl	8007e4c <_sbrk_r>
 8006ee4:	4581      	cmp	r9, r0
 8006ee6:	d142      	bne.n	8006f6e <_malloc_r+0xea>
 8006ee8:	6821      	ldr	r1, [r4, #0]
 8006eea:	4630      	mov	r0, r6
 8006eec:	1a6d      	subs	r5, r5, r1
 8006eee:	4629      	mov	r1, r5
 8006ef0:	f7ff ffa6 	bl	8006e40 <sbrk_aligned>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d03a      	beq.n	8006f6e <_malloc_r+0xea>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	442b      	add	r3, r5
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	f8d8 3000 	ldr.w	r3, [r8]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	bb62      	cbnz	r2, 8006f60 <_malloc_r+0xdc>
 8006f06:	f8c8 7000 	str.w	r7, [r8]
 8006f0a:	e00f      	b.n	8006f2c <_malloc_r+0xa8>
 8006f0c:	6822      	ldr	r2, [r4, #0]
 8006f0e:	1b52      	subs	r2, r2, r5
 8006f10:	d420      	bmi.n	8006f54 <_malloc_r+0xd0>
 8006f12:	2a0b      	cmp	r2, #11
 8006f14:	d917      	bls.n	8006f46 <_malloc_r+0xc2>
 8006f16:	1961      	adds	r1, r4, r5
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	6025      	str	r5, [r4, #0]
 8006f1c:	bf18      	it	ne
 8006f1e:	6059      	strne	r1, [r3, #4]
 8006f20:	6863      	ldr	r3, [r4, #4]
 8006f22:	bf08      	it	eq
 8006f24:	f8c8 1000 	streq.w	r1, [r8]
 8006f28:	5162      	str	r2, [r4, r5]
 8006f2a:	604b      	str	r3, [r1, #4]
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f000 f82f 	bl	8006f90 <__malloc_unlock>
 8006f32:	f104 000b 	add.w	r0, r4, #11
 8006f36:	1d23      	adds	r3, r4, #4
 8006f38:	f020 0007 	bic.w	r0, r0, #7
 8006f3c:	1ac2      	subs	r2, r0, r3
 8006f3e:	bf1c      	itt	ne
 8006f40:	1a1b      	subne	r3, r3, r0
 8006f42:	50a3      	strne	r3, [r4, r2]
 8006f44:	e7af      	b.n	8006ea6 <_malloc_r+0x22>
 8006f46:	6862      	ldr	r2, [r4, #4]
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	bf0c      	ite	eq
 8006f4c:	f8c8 2000 	streq.w	r2, [r8]
 8006f50:	605a      	strne	r2, [r3, #4]
 8006f52:	e7eb      	b.n	8006f2c <_malloc_r+0xa8>
 8006f54:	4623      	mov	r3, r4
 8006f56:	6864      	ldr	r4, [r4, #4]
 8006f58:	e7ae      	b.n	8006eb8 <_malloc_r+0x34>
 8006f5a:	463c      	mov	r4, r7
 8006f5c:	687f      	ldr	r7, [r7, #4]
 8006f5e:	e7b6      	b.n	8006ece <_malloc_r+0x4a>
 8006f60:	461a      	mov	r2, r3
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d1fb      	bne.n	8006f60 <_malloc_r+0xdc>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	6053      	str	r3, [r2, #4]
 8006f6c:	e7de      	b.n	8006f2c <_malloc_r+0xa8>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	4630      	mov	r0, r6
 8006f72:	6033      	str	r3, [r6, #0]
 8006f74:	f000 f80c 	bl	8006f90 <__malloc_unlock>
 8006f78:	e794      	b.n	8006ea4 <_malloc_r+0x20>
 8006f7a:	6005      	str	r5, [r0, #0]
 8006f7c:	e7d6      	b.n	8006f2c <_malloc_r+0xa8>
 8006f7e:	bf00      	nop
 8006f80:	20000ce8 	.word	0x20000ce8

08006f84 <__malloc_lock>:
 8006f84:	4801      	ldr	r0, [pc, #4]	@ (8006f8c <__malloc_lock+0x8>)
 8006f86:	f7ff b89e 	b.w	80060c6 <__retarget_lock_acquire_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	20000ce0 	.word	0x20000ce0

08006f90 <__malloc_unlock>:
 8006f90:	4801      	ldr	r0, [pc, #4]	@ (8006f98 <__malloc_unlock+0x8>)
 8006f92:	f7ff b899 	b.w	80060c8 <__retarget_lock_release_recursive>
 8006f96:	bf00      	nop
 8006f98:	20000ce0 	.word	0x20000ce0

08006f9c <_Balloc>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	69c6      	ldr	r6, [r0, #28]
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	b976      	cbnz	r6, 8006fc4 <_Balloc+0x28>
 8006fa6:	2010      	movs	r0, #16
 8006fa8:	f7ff ff42 	bl	8006e30 <malloc>
 8006fac:	4602      	mov	r2, r0
 8006fae:	61e0      	str	r0, [r4, #28]
 8006fb0:	b920      	cbnz	r0, 8006fbc <_Balloc+0x20>
 8006fb2:	216b      	movs	r1, #107	@ 0x6b
 8006fb4:	4b17      	ldr	r3, [pc, #92]	@ (8007014 <_Balloc+0x78>)
 8006fb6:	4818      	ldr	r0, [pc, #96]	@ (8007018 <_Balloc+0x7c>)
 8006fb8:	f000 ff66 	bl	8007e88 <__assert_func>
 8006fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fc0:	6006      	str	r6, [r0, #0]
 8006fc2:	60c6      	str	r6, [r0, #12]
 8006fc4:	69e6      	ldr	r6, [r4, #28]
 8006fc6:	68f3      	ldr	r3, [r6, #12]
 8006fc8:	b183      	cbz	r3, 8006fec <_Balloc+0x50>
 8006fca:	69e3      	ldr	r3, [r4, #28]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fd2:	b9b8      	cbnz	r0, 8007004 <_Balloc+0x68>
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	fa01 f605 	lsl.w	r6, r1, r5
 8006fda:	1d72      	adds	r2, r6, #5
 8006fdc:	4620      	mov	r0, r4
 8006fde:	0092      	lsls	r2, r2, #2
 8006fe0:	f000 ff70 	bl	8007ec4 <_calloc_r>
 8006fe4:	b160      	cbz	r0, 8007000 <_Balloc+0x64>
 8006fe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fea:	e00e      	b.n	800700a <_Balloc+0x6e>
 8006fec:	2221      	movs	r2, #33	@ 0x21
 8006fee:	2104      	movs	r1, #4
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 ff67 	bl	8007ec4 <_calloc_r>
 8006ff6:	69e3      	ldr	r3, [r4, #28]
 8006ff8:	60f0      	str	r0, [r6, #12]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e4      	bne.n	8006fca <_Balloc+0x2e>
 8007000:	2000      	movs	r0, #0
 8007002:	bd70      	pop	{r4, r5, r6, pc}
 8007004:	6802      	ldr	r2, [r0, #0]
 8007006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800700a:	2300      	movs	r3, #0
 800700c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007010:	e7f7      	b.n	8007002 <_Balloc+0x66>
 8007012:	bf00      	nop
 8007014:	08008778 	.word	0x08008778
 8007018:	080087f8 	.word	0x080087f8

0800701c <_Bfree>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	69c6      	ldr	r6, [r0, #28]
 8007020:	4605      	mov	r5, r0
 8007022:	460c      	mov	r4, r1
 8007024:	b976      	cbnz	r6, 8007044 <_Bfree+0x28>
 8007026:	2010      	movs	r0, #16
 8007028:	f7ff ff02 	bl	8006e30 <malloc>
 800702c:	4602      	mov	r2, r0
 800702e:	61e8      	str	r0, [r5, #28]
 8007030:	b920      	cbnz	r0, 800703c <_Bfree+0x20>
 8007032:	218f      	movs	r1, #143	@ 0x8f
 8007034:	4b08      	ldr	r3, [pc, #32]	@ (8007058 <_Bfree+0x3c>)
 8007036:	4809      	ldr	r0, [pc, #36]	@ (800705c <_Bfree+0x40>)
 8007038:	f000 ff26 	bl	8007e88 <__assert_func>
 800703c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007040:	6006      	str	r6, [r0, #0]
 8007042:	60c6      	str	r6, [r0, #12]
 8007044:	b13c      	cbz	r4, 8007056 <_Bfree+0x3a>
 8007046:	69eb      	ldr	r3, [r5, #28]
 8007048:	6862      	ldr	r2, [r4, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007050:	6021      	str	r1, [r4, #0]
 8007052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	08008778 	.word	0x08008778
 800705c:	080087f8 	.word	0x080087f8

08007060 <__multadd>:
 8007060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007064:	4607      	mov	r7, r0
 8007066:	460c      	mov	r4, r1
 8007068:	461e      	mov	r6, r3
 800706a:	2000      	movs	r0, #0
 800706c:	690d      	ldr	r5, [r1, #16]
 800706e:	f101 0c14 	add.w	ip, r1, #20
 8007072:	f8dc 3000 	ldr.w	r3, [ip]
 8007076:	3001      	adds	r0, #1
 8007078:	b299      	uxth	r1, r3
 800707a:	fb02 6101 	mla	r1, r2, r1, r6
 800707e:	0c1e      	lsrs	r6, r3, #16
 8007080:	0c0b      	lsrs	r3, r1, #16
 8007082:	fb02 3306 	mla	r3, r2, r6, r3
 8007086:	b289      	uxth	r1, r1
 8007088:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800708c:	4285      	cmp	r5, r0
 800708e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007092:	f84c 1b04 	str.w	r1, [ip], #4
 8007096:	dcec      	bgt.n	8007072 <__multadd+0x12>
 8007098:	b30e      	cbz	r6, 80070de <__multadd+0x7e>
 800709a:	68a3      	ldr	r3, [r4, #8]
 800709c:	42ab      	cmp	r3, r5
 800709e:	dc19      	bgt.n	80070d4 <__multadd+0x74>
 80070a0:	6861      	ldr	r1, [r4, #4]
 80070a2:	4638      	mov	r0, r7
 80070a4:	3101      	adds	r1, #1
 80070a6:	f7ff ff79 	bl	8006f9c <_Balloc>
 80070aa:	4680      	mov	r8, r0
 80070ac:	b928      	cbnz	r0, 80070ba <__multadd+0x5a>
 80070ae:	4602      	mov	r2, r0
 80070b0:	21ba      	movs	r1, #186	@ 0xba
 80070b2:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <__multadd+0x84>)
 80070b4:	480c      	ldr	r0, [pc, #48]	@ (80070e8 <__multadd+0x88>)
 80070b6:	f000 fee7 	bl	8007e88 <__assert_func>
 80070ba:	6922      	ldr	r2, [r4, #16]
 80070bc:	f104 010c 	add.w	r1, r4, #12
 80070c0:	3202      	adds	r2, #2
 80070c2:	0092      	lsls	r2, r2, #2
 80070c4:	300c      	adds	r0, #12
 80070c6:	f000 fed1 	bl	8007e6c <memcpy>
 80070ca:	4621      	mov	r1, r4
 80070cc:	4638      	mov	r0, r7
 80070ce:	f7ff ffa5 	bl	800701c <_Bfree>
 80070d2:	4644      	mov	r4, r8
 80070d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070d8:	3501      	adds	r5, #1
 80070da:	615e      	str	r6, [r3, #20]
 80070dc:	6125      	str	r5, [r4, #16]
 80070de:	4620      	mov	r0, r4
 80070e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e4:	080087e7 	.word	0x080087e7
 80070e8:	080087f8 	.word	0x080087f8

080070ec <__hi0bits>:
 80070ec:	4603      	mov	r3, r0
 80070ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070f2:	bf3a      	itte	cc
 80070f4:	0403      	lslcc	r3, r0, #16
 80070f6:	2010      	movcc	r0, #16
 80070f8:	2000      	movcs	r0, #0
 80070fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070fe:	bf3c      	itt	cc
 8007100:	021b      	lslcc	r3, r3, #8
 8007102:	3008      	addcc	r0, #8
 8007104:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007108:	bf3c      	itt	cc
 800710a:	011b      	lslcc	r3, r3, #4
 800710c:	3004      	addcc	r0, #4
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007112:	bf3c      	itt	cc
 8007114:	009b      	lslcc	r3, r3, #2
 8007116:	3002      	addcc	r0, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	db05      	blt.n	8007128 <__hi0bits+0x3c>
 800711c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007120:	f100 0001 	add.w	r0, r0, #1
 8007124:	bf08      	it	eq
 8007126:	2020      	moveq	r0, #32
 8007128:	4770      	bx	lr

0800712a <__lo0bits>:
 800712a:	6803      	ldr	r3, [r0, #0]
 800712c:	4602      	mov	r2, r0
 800712e:	f013 0007 	ands.w	r0, r3, #7
 8007132:	d00b      	beq.n	800714c <__lo0bits+0x22>
 8007134:	07d9      	lsls	r1, r3, #31
 8007136:	d421      	bmi.n	800717c <__lo0bits+0x52>
 8007138:	0798      	lsls	r0, r3, #30
 800713a:	bf49      	itett	mi
 800713c:	085b      	lsrmi	r3, r3, #1
 800713e:	089b      	lsrpl	r3, r3, #2
 8007140:	2001      	movmi	r0, #1
 8007142:	6013      	strmi	r3, [r2, #0]
 8007144:	bf5c      	itt	pl
 8007146:	2002      	movpl	r0, #2
 8007148:	6013      	strpl	r3, [r2, #0]
 800714a:	4770      	bx	lr
 800714c:	b299      	uxth	r1, r3
 800714e:	b909      	cbnz	r1, 8007154 <__lo0bits+0x2a>
 8007150:	2010      	movs	r0, #16
 8007152:	0c1b      	lsrs	r3, r3, #16
 8007154:	b2d9      	uxtb	r1, r3
 8007156:	b909      	cbnz	r1, 800715c <__lo0bits+0x32>
 8007158:	3008      	adds	r0, #8
 800715a:	0a1b      	lsrs	r3, r3, #8
 800715c:	0719      	lsls	r1, r3, #28
 800715e:	bf04      	itt	eq
 8007160:	091b      	lsreq	r3, r3, #4
 8007162:	3004      	addeq	r0, #4
 8007164:	0799      	lsls	r1, r3, #30
 8007166:	bf04      	itt	eq
 8007168:	089b      	lsreq	r3, r3, #2
 800716a:	3002      	addeq	r0, #2
 800716c:	07d9      	lsls	r1, r3, #31
 800716e:	d403      	bmi.n	8007178 <__lo0bits+0x4e>
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	f100 0001 	add.w	r0, r0, #1
 8007176:	d003      	beq.n	8007180 <__lo0bits+0x56>
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	4770      	bx	lr
 800717c:	2000      	movs	r0, #0
 800717e:	4770      	bx	lr
 8007180:	2020      	movs	r0, #32
 8007182:	4770      	bx	lr

08007184 <__i2b>:
 8007184:	b510      	push	{r4, lr}
 8007186:	460c      	mov	r4, r1
 8007188:	2101      	movs	r1, #1
 800718a:	f7ff ff07 	bl	8006f9c <_Balloc>
 800718e:	4602      	mov	r2, r0
 8007190:	b928      	cbnz	r0, 800719e <__i2b+0x1a>
 8007192:	f240 1145 	movw	r1, #325	@ 0x145
 8007196:	4b04      	ldr	r3, [pc, #16]	@ (80071a8 <__i2b+0x24>)
 8007198:	4804      	ldr	r0, [pc, #16]	@ (80071ac <__i2b+0x28>)
 800719a:	f000 fe75 	bl	8007e88 <__assert_func>
 800719e:	2301      	movs	r3, #1
 80071a0:	6144      	str	r4, [r0, #20]
 80071a2:	6103      	str	r3, [r0, #16]
 80071a4:	bd10      	pop	{r4, pc}
 80071a6:	bf00      	nop
 80071a8:	080087e7 	.word	0x080087e7
 80071ac:	080087f8 	.word	0x080087f8

080071b0 <__multiply>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	4617      	mov	r7, r2
 80071b6:	690a      	ldr	r2, [r1, #16]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	4689      	mov	r9, r1
 80071bc:	429a      	cmp	r2, r3
 80071be:	bfa2      	ittt	ge
 80071c0:	463b      	movge	r3, r7
 80071c2:	460f      	movge	r7, r1
 80071c4:	4699      	movge	r9, r3
 80071c6:	693d      	ldr	r5, [r7, #16]
 80071c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	eb05 060a 	add.w	r6, r5, sl
 80071d4:	42b3      	cmp	r3, r6
 80071d6:	b085      	sub	sp, #20
 80071d8:	bfb8      	it	lt
 80071da:	3101      	addlt	r1, #1
 80071dc:	f7ff fede 	bl	8006f9c <_Balloc>
 80071e0:	b930      	cbnz	r0, 80071f0 <__multiply+0x40>
 80071e2:	4602      	mov	r2, r0
 80071e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071e8:	4b40      	ldr	r3, [pc, #256]	@ (80072ec <__multiply+0x13c>)
 80071ea:	4841      	ldr	r0, [pc, #260]	@ (80072f0 <__multiply+0x140>)
 80071ec:	f000 fe4c 	bl	8007e88 <__assert_func>
 80071f0:	f100 0414 	add.w	r4, r0, #20
 80071f4:	4623      	mov	r3, r4
 80071f6:	2200      	movs	r2, #0
 80071f8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80071fc:	4573      	cmp	r3, lr
 80071fe:	d320      	bcc.n	8007242 <__multiply+0x92>
 8007200:	f107 0814 	add.w	r8, r7, #20
 8007204:	f109 0114 	add.w	r1, r9, #20
 8007208:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800720c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007210:	9302      	str	r3, [sp, #8]
 8007212:	1beb      	subs	r3, r5, r7
 8007214:	3b15      	subs	r3, #21
 8007216:	f023 0303 	bic.w	r3, r3, #3
 800721a:	3304      	adds	r3, #4
 800721c:	3715      	adds	r7, #21
 800721e:	42bd      	cmp	r5, r7
 8007220:	bf38      	it	cc
 8007222:	2304      	movcc	r3, #4
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	9b02      	ldr	r3, [sp, #8]
 8007228:	9103      	str	r1, [sp, #12]
 800722a:	428b      	cmp	r3, r1
 800722c:	d80c      	bhi.n	8007248 <__multiply+0x98>
 800722e:	2e00      	cmp	r6, #0
 8007230:	dd03      	ble.n	800723a <__multiply+0x8a>
 8007232:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007236:	2b00      	cmp	r3, #0
 8007238:	d055      	beq.n	80072e6 <__multiply+0x136>
 800723a:	6106      	str	r6, [r0, #16]
 800723c:	b005      	add	sp, #20
 800723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007242:	f843 2b04 	str.w	r2, [r3], #4
 8007246:	e7d9      	b.n	80071fc <__multiply+0x4c>
 8007248:	f8b1 a000 	ldrh.w	sl, [r1]
 800724c:	f1ba 0f00 	cmp.w	sl, #0
 8007250:	d01f      	beq.n	8007292 <__multiply+0xe2>
 8007252:	46c4      	mov	ip, r8
 8007254:	46a1      	mov	r9, r4
 8007256:	2700      	movs	r7, #0
 8007258:	f85c 2b04 	ldr.w	r2, [ip], #4
 800725c:	f8d9 3000 	ldr.w	r3, [r9]
 8007260:	fa1f fb82 	uxth.w	fp, r2
 8007264:	b29b      	uxth	r3, r3
 8007266:	fb0a 330b 	mla	r3, sl, fp, r3
 800726a:	443b      	add	r3, r7
 800726c:	f8d9 7000 	ldr.w	r7, [r9]
 8007270:	0c12      	lsrs	r2, r2, #16
 8007272:	0c3f      	lsrs	r7, r7, #16
 8007274:	fb0a 7202 	mla	r2, sl, r2, r7
 8007278:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800727c:	b29b      	uxth	r3, r3
 800727e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007282:	4565      	cmp	r5, ip
 8007284:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007288:	f849 3b04 	str.w	r3, [r9], #4
 800728c:	d8e4      	bhi.n	8007258 <__multiply+0xa8>
 800728e:	9b01      	ldr	r3, [sp, #4]
 8007290:	50e7      	str	r7, [r4, r3]
 8007292:	9b03      	ldr	r3, [sp, #12]
 8007294:	3104      	adds	r1, #4
 8007296:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800729a:	f1b9 0f00 	cmp.w	r9, #0
 800729e:	d020      	beq.n	80072e2 <__multiply+0x132>
 80072a0:	4647      	mov	r7, r8
 80072a2:	46a4      	mov	ip, r4
 80072a4:	f04f 0a00 	mov.w	sl, #0
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	f8b7 b000 	ldrh.w	fp, [r7]
 80072ae:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	fb09 220b 	mla	r2, r9, fp, r2
 80072b8:	4452      	add	r2, sl
 80072ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072be:	f84c 3b04 	str.w	r3, [ip], #4
 80072c2:	f857 3b04 	ldr.w	r3, [r7], #4
 80072c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072ca:	f8bc 3000 	ldrh.w	r3, [ip]
 80072ce:	42bd      	cmp	r5, r7
 80072d0:	fb09 330a 	mla	r3, r9, sl, r3
 80072d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80072d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072dc:	d8e5      	bhi.n	80072aa <__multiply+0xfa>
 80072de:	9a01      	ldr	r2, [sp, #4]
 80072e0:	50a3      	str	r3, [r4, r2]
 80072e2:	3404      	adds	r4, #4
 80072e4:	e79f      	b.n	8007226 <__multiply+0x76>
 80072e6:	3e01      	subs	r6, #1
 80072e8:	e7a1      	b.n	800722e <__multiply+0x7e>
 80072ea:	bf00      	nop
 80072ec:	080087e7 	.word	0x080087e7
 80072f0:	080087f8 	.word	0x080087f8

080072f4 <__pow5mult>:
 80072f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f8:	4615      	mov	r5, r2
 80072fa:	f012 0203 	ands.w	r2, r2, #3
 80072fe:	4607      	mov	r7, r0
 8007300:	460e      	mov	r6, r1
 8007302:	d007      	beq.n	8007314 <__pow5mult+0x20>
 8007304:	4c25      	ldr	r4, [pc, #148]	@ (800739c <__pow5mult+0xa8>)
 8007306:	3a01      	subs	r2, #1
 8007308:	2300      	movs	r3, #0
 800730a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800730e:	f7ff fea7 	bl	8007060 <__multadd>
 8007312:	4606      	mov	r6, r0
 8007314:	10ad      	asrs	r5, r5, #2
 8007316:	d03d      	beq.n	8007394 <__pow5mult+0xa0>
 8007318:	69fc      	ldr	r4, [r7, #28]
 800731a:	b97c      	cbnz	r4, 800733c <__pow5mult+0x48>
 800731c:	2010      	movs	r0, #16
 800731e:	f7ff fd87 	bl	8006e30 <malloc>
 8007322:	4602      	mov	r2, r0
 8007324:	61f8      	str	r0, [r7, #28]
 8007326:	b928      	cbnz	r0, 8007334 <__pow5mult+0x40>
 8007328:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800732c:	4b1c      	ldr	r3, [pc, #112]	@ (80073a0 <__pow5mult+0xac>)
 800732e:	481d      	ldr	r0, [pc, #116]	@ (80073a4 <__pow5mult+0xb0>)
 8007330:	f000 fdaa 	bl	8007e88 <__assert_func>
 8007334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007338:	6004      	str	r4, [r0, #0]
 800733a:	60c4      	str	r4, [r0, #12]
 800733c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007344:	b94c      	cbnz	r4, 800735a <__pow5mult+0x66>
 8007346:	f240 2171 	movw	r1, #625	@ 0x271
 800734a:	4638      	mov	r0, r7
 800734c:	f7ff ff1a 	bl	8007184 <__i2b>
 8007350:	2300      	movs	r3, #0
 8007352:	4604      	mov	r4, r0
 8007354:	f8c8 0008 	str.w	r0, [r8, #8]
 8007358:	6003      	str	r3, [r0, #0]
 800735a:	f04f 0900 	mov.w	r9, #0
 800735e:	07eb      	lsls	r3, r5, #31
 8007360:	d50a      	bpl.n	8007378 <__pow5mult+0x84>
 8007362:	4631      	mov	r1, r6
 8007364:	4622      	mov	r2, r4
 8007366:	4638      	mov	r0, r7
 8007368:	f7ff ff22 	bl	80071b0 <__multiply>
 800736c:	4680      	mov	r8, r0
 800736e:	4631      	mov	r1, r6
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff fe53 	bl	800701c <_Bfree>
 8007376:	4646      	mov	r6, r8
 8007378:	106d      	asrs	r5, r5, #1
 800737a:	d00b      	beq.n	8007394 <__pow5mult+0xa0>
 800737c:	6820      	ldr	r0, [r4, #0]
 800737e:	b938      	cbnz	r0, 8007390 <__pow5mult+0x9c>
 8007380:	4622      	mov	r2, r4
 8007382:	4621      	mov	r1, r4
 8007384:	4638      	mov	r0, r7
 8007386:	f7ff ff13 	bl	80071b0 <__multiply>
 800738a:	6020      	str	r0, [r4, #0]
 800738c:	f8c0 9000 	str.w	r9, [r0]
 8007390:	4604      	mov	r4, r0
 8007392:	e7e4      	b.n	800735e <__pow5mult+0x6a>
 8007394:	4630      	mov	r0, r6
 8007396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800739a:	bf00      	nop
 800739c:	080088a8 	.word	0x080088a8
 80073a0:	08008778 	.word	0x08008778
 80073a4:	080087f8 	.word	0x080087f8

080073a8 <__lshift>:
 80073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	460c      	mov	r4, r1
 80073ae:	4607      	mov	r7, r0
 80073b0:	4691      	mov	r9, r2
 80073b2:	6923      	ldr	r3, [r4, #16]
 80073b4:	6849      	ldr	r1, [r1, #4]
 80073b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073ba:	68a3      	ldr	r3, [r4, #8]
 80073bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073c0:	f108 0601 	add.w	r6, r8, #1
 80073c4:	42b3      	cmp	r3, r6
 80073c6:	db0b      	blt.n	80073e0 <__lshift+0x38>
 80073c8:	4638      	mov	r0, r7
 80073ca:	f7ff fde7 	bl	8006f9c <_Balloc>
 80073ce:	4605      	mov	r5, r0
 80073d0:	b948      	cbnz	r0, 80073e6 <__lshift+0x3e>
 80073d2:	4602      	mov	r2, r0
 80073d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073d8:	4b27      	ldr	r3, [pc, #156]	@ (8007478 <__lshift+0xd0>)
 80073da:	4828      	ldr	r0, [pc, #160]	@ (800747c <__lshift+0xd4>)
 80073dc:	f000 fd54 	bl	8007e88 <__assert_func>
 80073e0:	3101      	adds	r1, #1
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	e7ee      	b.n	80073c4 <__lshift+0x1c>
 80073e6:	2300      	movs	r3, #0
 80073e8:	f100 0114 	add.w	r1, r0, #20
 80073ec:	f100 0210 	add.w	r2, r0, #16
 80073f0:	4618      	mov	r0, r3
 80073f2:	4553      	cmp	r3, sl
 80073f4:	db33      	blt.n	800745e <__lshift+0xb6>
 80073f6:	6920      	ldr	r0, [r4, #16]
 80073f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073fc:	f104 0314 	add.w	r3, r4, #20
 8007400:	f019 091f 	ands.w	r9, r9, #31
 8007404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007408:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800740c:	d02b      	beq.n	8007466 <__lshift+0xbe>
 800740e:	468a      	mov	sl, r1
 8007410:	2200      	movs	r2, #0
 8007412:	f1c9 0e20 	rsb	lr, r9, #32
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	fa00 f009 	lsl.w	r0, r0, r9
 800741c:	4310      	orrs	r0, r2
 800741e:	f84a 0b04 	str.w	r0, [sl], #4
 8007422:	f853 2b04 	ldr.w	r2, [r3], #4
 8007426:	459c      	cmp	ip, r3
 8007428:	fa22 f20e 	lsr.w	r2, r2, lr
 800742c:	d8f3      	bhi.n	8007416 <__lshift+0x6e>
 800742e:	ebac 0304 	sub.w	r3, ip, r4
 8007432:	3b15      	subs	r3, #21
 8007434:	f023 0303 	bic.w	r3, r3, #3
 8007438:	3304      	adds	r3, #4
 800743a:	f104 0015 	add.w	r0, r4, #21
 800743e:	4560      	cmp	r0, ip
 8007440:	bf88      	it	hi
 8007442:	2304      	movhi	r3, #4
 8007444:	50ca      	str	r2, [r1, r3]
 8007446:	b10a      	cbz	r2, 800744c <__lshift+0xa4>
 8007448:	f108 0602 	add.w	r6, r8, #2
 800744c:	3e01      	subs	r6, #1
 800744e:	4638      	mov	r0, r7
 8007450:	4621      	mov	r1, r4
 8007452:	612e      	str	r6, [r5, #16]
 8007454:	f7ff fde2 	bl	800701c <_Bfree>
 8007458:	4628      	mov	r0, r5
 800745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007462:	3301      	adds	r3, #1
 8007464:	e7c5      	b.n	80073f2 <__lshift+0x4a>
 8007466:	3904      	subs	r1, #4
 8007468:	f853 2b04 	ldr.w	r2, [r3], #4
 800746c:	459c      	cmp	ip, r3
 800746e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007472:	d8f9      	bhi.n	8007468 <__lshift+0xc0>
 8007474:	e7ea      	b.n	800744c <__lshift+0xa4>
 8007476:	bf00      	nop
 8007478:	080087e7 	.word	0x080087e7
 800747c:	080087f8 	.word	0x080087f8

08007480 <__mcmp>:
 8007480:	4603      	mov	r3, r0
 8007482:	690a      	ldr	r2, [r1, #16]
 8007484:	6900      	ldr	r0, [r0, #16]
 8007486:	b530      	push	{r4, r5, lr}
 8007488:	1a80      	subs	r0, r0, r2
 800748a:	d10e      	bne.n	80074aa <__mcmp+0x2a>
 800748c:	3314      	adds	r3, #20
 800748e:	3114      	adds	r1, #20
 8007490:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007494:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007498:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800749c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074a0:	4295      	cmp	r5, r2
 80074a2:	d003      	beq.n	80074ac <__mcmp+0x2c>
 80074a4:	d205      	bcs.n	80074b2 <__mcmp+0x32>
 80074a6:	f04f 30ff 	mov.w	r0, #4294967295
 80074aa:	bd30      	pop	{r4, r5, pc}
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d3f3      	bcc.n	8007498 <__mcmp+0x18>
 80074b0:	e7fb      	b.n	80074aa <__mcmp+0x2a>
 80074b2:	2001      	movs	r0, #1
 80074b4:	e7f9      	b.n	80074aa <__mcmp+0x2a>
	...

080074b8 <__mdiff>:
 80074b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	4689      	mov	r9, r1
 80074be:	4606      	mov	r6, r0
 80074c0:	4611      	mov	r1, r2
 80074c2:	4648      	mov	r0, r9
 80074c4:	4614      	mov	r4, r2
 80074c6:	f7ff ffdb 	bl	8007480 <__mcmp>
 80074ca:	1e05      	subs	r5, r0, #0
 80074cc:	d112      	bne.n	80074f4 <__mdiff+0x3c>
 80074ce:	4629      	mov	r1, r5
 80074d0:	4630      	mov	r0, r6
 80074d2:	f7ff fd63 	bl	8006f9c <_Balloc>
 80074d6:	4602      	mov	r2, r0
 80074d8:	b928      	cbnz	r0, 80074e6 <__mdiff+0x2e>
 80074da:	f240 2137 	movw	r1, #567	@ 0x237
 80074de:	4b3e      	ldr	r3, [pc, #248]	@ (80075d8 <__mdiff+0x120>)
 80074e0:	483e      	ldr	r0, [pc, #248]	@ (80075dc <__mdiff+0x124>)
 80074e2:	f000 fcd1 	bl	8007e88 <__assert_func>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074ec:	4610      	mov	r0, r2
 80074ee:	b003      	add	sp, #12
 80074f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f4:	bfbc      	itt	lt
 80074f6:	464b      	movlt	r3, r9
 80074f8:	46a1      	movlt	r9, r4
 80074fa:	4630      	mov	r0, r6
 80074fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007500:	bfba      	itte	lt
 8007502:	461c      	movlt	r4, r3
 8007504:	2501      	movlt	r5, #1
 8007506:	2500      	movge	r5, #0
 8007508:	f7ff fd48 	bl	8006f9c <_Balloc>
 800750c:	4602      	mov	r2, r0
 800750e:	b918      	cbnz	r0, 8007518 <__mdiff+0x60>
 8007510:	f240 2145 	movw	r1, #581	@ 0x245
 8007514:	4b30      	ldr	r3, [pc, #192]	@ (80075d8 <__mdiff+0x120>)
 8007516:	e7e3      	b.n	80074e0 <__mdiff+0x28>
 8007518:	f100 0b14 	add.w	fp, r0, #20
 800751c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007520:	f109 0310 	add.w	r3, r9, #16
 8007524:	60c5      	str	r5, [r0, #12]
 8007526:	f04f 0c00 	mov.w	ip, #0
 800752a:	f109 0514 	add.w	r5, r9, #20
 800752e:	46d9      	mov	r9, fp
 8007530:	6926      	ldr	r6, [r4, #16]
 8007532:	f104 0e14 	add.w	lr, r4, #20
 8007536:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800753a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800753e:	9301      	str	r3, [sp, #4]
 8007540:	9b01      	ldr	r3, [sp, #4]
 8007542:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007546:	f853 af04 	ldr.w	sl, [r3, #4]!
 800754a:	b281      	uxth	r1, r0
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	fa1f f38a 	uxth.w	r3, sl
 8007552:	1a5b      	subs	r3, r3, r1
 8007554:	0c00      	lsrs	r0, r0, #16
 8007556:	4463      	add	r3, ip
 8007558:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800755c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007560:	b29b      	uxth	r3, r3
 8007562:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007566:	4576      	cmp	r6, lr
 8007568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800756c:	f849 3b04 	str.w	r3, [r9], #4
 8007570:	d8e6      	bhi.n	8007540 <__mdiff+0x88>
 8007572:	1b33      	subs	r3, r6, r4
 8007574:	3b15      	subs	r3, #21
 8007576:	f023 0303 	bic.w	r3, r3, #3
 800757a:	3415      	adds	r4, #21
 800757c:	3304      	adds	r3, #4
 800757e:	42a6      	cmp	r6, r4
 8007580:	bf38      	it	cc
 8007582:	2304      	movcc	r3, #4
 8007584:	441d      	add	r5, r3
 8007586:	445b      	add	r3, fp
 8007588:	461e      	mov	r6, r3
 800758a:	462c      	mov	r4, r5
 800758c:	4544      	cmp	r4, r8
 800758e:	d30e      	bcc.n	80075ae <__mdiff+0xf6>
 8007590:	f108 0103 	add.w	r1, r8, #3
 8007594:	1b49      	subs	r1, r1, r5
 8007596:	f021 0103 	bic.w	r1, r1, #3
 800759a:	3d03      	subs	r5, #3
 800759c:	45a8      	cmp	r8, r5
 800759e:	bf38      	it	cc
 80075a0:	2100      	movcc	r1, #0
 80075a2:	440b      	add	r3, r1
 80075a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075a8:	b199      	cbz	r1, 80075d2 <__mdiff+0x11a>
 80075aa:	6117      	str	r7, [r2, #16]
 80075ac:	e79e      	b.n	80074ec <__mdiff+0x34>
 80075ae:	46e6      	mov	lr, ip
 80075b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80075b4:	fa1f fc81 	uxth.w	ip, r1
 80075b8:	44f4      	add	ip, lr
 80075ba:	0c08      	lsrs	r0, r1, #16
 80075bc:	4471      	add	r1, lr
 80075be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80075c2:	b289      	uxth	r1, r1
 80075c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075cc:	f846 1b04 	str.w	r1, [r6], #4
 80075d0:	e7dc      	b.n	800758c <__mdiff+0xd4>
 80075d2:	3f01      	subs	r7, #1
 80075d4:	e7e6      	b.n	80075a4 <__mdiff+0xec>
 80075d6:	bf00      	nop
 80075d8:	080087e7 	.word	0x080087e7
 80075dc:	080087f8 	.word	0x080087f8

080075e0 <__d2b>:
 80075e0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80075e4:	2101      	movs	r1, #1
 80075e6:	4690      	mov	r8, r2
 80075e8:	4699      	mov	r9, r3
 80075ea:	9e08      	ldr	r6, [sp, #32]
 80075ec:	f7ff fcd6 	bl	8006f9c <_Balloc>
 80075f0:	4604      	mov	r4, r0
 80075f2:	b930      	cbnz	r0, 8007602 <__d2b+0x22>
 80075f4:	4602      	mov	r2, r0
 80075f6:	f240 310f 	movw	r1, #783	@ 0x30f
 80075fa:	4b23      	ldr	r3, [pc, #140]	@ (8007688 <__d2b+0xa8>)
 80075fc:	4823      	ldr	r0, [pc, #140]	@ (800768c <__d2b+0xac>)
 80075fe:	f000 fc43 	bl	8007e88 <__assert_func>
 8007602:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007606:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800760a:	b10d      	cbz	r5, 8007610 <__d2b+0x30>
 800760c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	f1b8 0300 	subs.w	r3, r8, #0
 8007616:	d024      	beq.n	8007662 <__d2b+0x82>
 8007618:	4668      	mov	r0, sp
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	f7ff fd85 	bl	800712a <__lo0bits>
 8007620:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007624:	b1d8      	cbz	r0, 800765e <__d2b+0x7e>
 8007626:	f1c0 0320 	rsb	r3, r0, #32
 800762a:	fa02 f303 	lsl.w	r3, r2, r3
 800762e:	430b      	orrs	r3, r1
 8007630:	40c2      	lsrs	r2, r0
 8007632:	6163      	str	r3, [r4, #20]
 8007634:	9201      	str	r2, [sp, #4]
 8007636:	9b01      	ldr	r3, [sp, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	bf0c      	ite	eq
 800763c:	2201      	moveq	r2, #1
 800763e:	2202      	movne	r2, #2
 8007640:	61a3      	str	r3, [r4, #24]
 8007642:	6122      	str	r2, [r4, #16]
 8007644:	b1ad      	cbz	r5, 8007672 <__d2b+0x92>
 8007646:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800764a:	4405      	add	r5, r0
 800764c:	6035      	str	r5, [r6, #0]
 800764e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007654:	6018      	str	r0, [r3, #0]
 8007656:	4620      	mov	r0, r4
 8007658:	b002      	add	sp, #8
 800765a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800765e:	6161      	str	r1, [r4, #20]
 8007660:	e7e9      	b.n	8007636 <__d2b+0x56>
 8007662:	a801      	add	r0, sp, #4
 8007664:	f7ff fd61 	bl	800712a <__lo0bits>
 8007668:	9b01      	ldr	r3, [sp, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	6163      	str	r3, [r4, #20]
 800766e:	3020      	adds	r0, #32
 8007670:	e7e7      	b.n	8007642 <__d2b+0x62>
 8007672:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007676:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800767a:	6030      	str	r0, [r6, #0]
 800767c:	6918      	ldr	r0, [r3, #16]
 800767e:	f7ff fd35 	bl	80070ec <__hi0bits>
 8007682:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007686:	e7e4      	b.n	8007652 <__d2b+0x72>
 8007688:	080087e7 	.word	0x080087e7
 800768c:	080087f8 	.word	0x080087f8

08007690 <__ssputs_r>:
 8007690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007694:	461f      	mov	r7, r3
 8007696:	688e      	ldr	r6, [r1, #8]
 8007698:	4682      	mov	sl, r0
 800769a:	42be      	cmp	r6, r7
 800769c:	460c      	mov	r4, r1
 800769e:	4690      	mov	r8, r2
 80076a0:	680b      	ldr	r3, [r1, #0]
 80076a2:	d82d      	bhi.n	8007700 <__ssputs_r+0x70>
 80076a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80076ac:	d026      	beq.n	80076fc <__ssputs_r+0x6c>
 80076ae:	6965      	ldr	r5, [r4, #20]
 80076b0:	6909      	ldr	r1, [r1, #16]
 80076b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076b6:	eba3 0901 	sub.w	r9, r3, r1
 80076ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076be:	1c7b      	adds	r3, r7, #1
 80076c0:	444b      	add	r3, r9
 80076c2:	106d      	asrs	r5, r5, #1
 80076c4:	429d      	cmp	r5, r3
 80076c6:	bf38      	it	cc
 80076c8:	461d      	movcc	r5, r3
 80076ca:	0553      	lsls	r3, r2, #21
 80076cc:	d527      	bpl.n	800771e <__ssputs_r+0x8e>
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7ff fbd8 	bl	8006e84 <_malloc_r>
 80076d4:	4606      	mov	r6, r0
 80076d6:	b360      	cbz	r0, 8007732 <__ssputs_r+0xa2>
 80076d8:	464a      	mov	r2, r9
 80076da:	6921      	ldr	r1, [r4, #16]
 80076dc:	f000 fbc6 	bl	8007e6c <memcpy>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	6126      	str	r6, [r4, #16]
 80076ee:	444e      	add	r6, r9
 80076f0:	6026      	str	r6, [r4, #0]
 80076f2:	463e      	mov	r6, r7
 80076f4:	6165      	str	r5, [r4, #20]
 80076f6:	eba5 0509 	sub.w	r5, r5, r9
 80076fa:	60a5      	str	r5, [r4, #8]
 80076fc:	42be      	cmp	r6, r7
 80076fe:	d900      	bls.n	8007702 <__ssputs_r+0x72>
 8007700:	463e      	mov	r6, r7
 8007702:	4632      	mov	r2, r6
 8007704:	4641      	mov	r1, r8
 8007706:	6820      	ldr	r0, [r4, #0]
 8007708:	f000 fb63 	bl	8007dd2 <memmove>
 800770c:	2000      	movs	r0, #0
 800770e:	68a3      	ldr	r3, [r4, #8]
 8007710:	1b9b      	subs	r3, r3, r6
 8007712:	60a3      	str	r3, [r4, #8]
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	4433      	add	r3, r6
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771e:	462a      	mov	r2, r5
 8007720:	f000 fbf6 	bl	8007f10 <_realloc_r>
 8007724:	4606      	mov	r6, r0
 8007726:	2800      	cmp	r0, #0
 8007728:	d1e0      	bne.n	80076ec <__ssputs_r+0x5c>
 800772a:	4650      	mov	r0, sl
 800772c:	6921      	ldr	r1, [r4, #16]
 800772e:	f7ff fb37 	bl	8006da0 <_free_r>
 8007732:	230c      	movs	r3, #12
 8007734:	f8ca 3000 	str.w	r3, [sl]
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f04f 30ff 	mov.w	r0, #4294967295
 800773e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	e7e9      	b.n	800771a <__ssputs_r+0x8a>
	...

08007748 <_svfiprintf_r>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	4698      	mov	r8, r3
 800774e:	898b      	ldrh	r3, [r1, #12]
 8007750:	4607      	mov	r7, r0
 8007752:	061b      	lsls	r3, r3, #24
 8007754:	460d      	mov	r5, r1
 8007756:	4614      	mov	r4, r2
 8007758:	b09d      	sub	sp, #116	@ 0x74
 800775a:	d510      	bpl.n	800777e <_svfiprintf_r+0x36>
 800775c:	690b      	ldr	r3, [r1, #16]
 800775e:	b973      	cbnz	r3, 800777e <_svfiprintf_r+0x36>
 8007760:	2140      	movs	r1, #64	@ 0x40
 8007762:	f7ff fb8f 	bl	8006e84 <_malloc_r>
 8007766:	6028      	str	r0, [r5, #0]
 8007768:	6128      	str	r0, [r5, #16]
 800776a:	b930      	cbnz	r0, 800777a <_svfiprintf_r+0x32>
 800776c:	230c      	movs	r3, #12
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	f04f 30ff 	mov.w	r0, #4294967295
 8007774:	b01d      	add	sp, #116	@ 0x74
 8007776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777a:	2340      	movs	r3, #64	@ 0x40
 800777c:	616b      	str	r3, [r5, #20]
 800777e:	2300      	movs	r3, #0
 8007780:	9309      	str	r3, [sp, #36]	@ 0x24
 8007782:	2320      	movs	r3, #32
 8007784:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007788:	2330      	movs	r3, #48	@ 0x30
 800778a:	f04f 0901 	mov.w	r9, #1
 800778e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007792:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800792c <_svfiprintf_r+0x1e4>
 8007796:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800779a:	4623      	mov	r3, r4
 800779c:	469a      	mov	sl, r3
 800779e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a2:	b10a      	cbz	r2, 80077a8 <_svfiprintf_r+0x60>
 80077a4:	2a25      	cmp	r2, #37	@ 0x25
 80077a6:	d1f9      	bne.n	800779c <_svfiprintf_r+0x54>
 80077a8:	ebba 0b04 	subs.w	fp, sl, r4
 80077ac:	d00b      	beq.n	80077c6 <_svfiprintf_r+0x7e>
 80077ae:	465b      	mov	r3, fp
 80077b0:	4622      	mov	r2, r4
 80077b2:	4629      	mov	r1, r5
 80077b4:	4638      	mov	r0, r7
 80077b6:	f7ff ff6b 	bl	8007690 <__ssputs_r>
 80077ba:	3001      	adds	r0, #1
 80077bc:	f000 80a7 	beq.w	800790e <_svfiprintf_r+0x1c6>
 80077c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077c2:	445a      	add	r2, fp
 80077c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80077c6:	f89a 3000 	ldrb.w	r3, [sl]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 809f 	beq.w	800790e <_svfiprintf_r+0x1c6>
 80077d0:	2300      	movs	r3, #0
 80077d2:	f04f 32ff 	mov.w	r2, #4294967295
 80077d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077da:	f10a 0a01 	add.w	sl, sl, #1
 80077de:	9304      	str	r3, [sp, #16]
 80077e0:	9307      	str	r3, [sp, #28]
 80077e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80077e8:	4654      	mov	r4, sl
 80077ea:	2205      	movs	r2, #5
 80077ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f0:	484e      	ldr	r0, [pc, #312]	@ (800792c <_svfiprintf_r+0x1e4>)
 80077f2:	f7fe fc6a 	bl	80060ca <memchr>
 80077f6:	9a04      	ldr	r2, [sp, #16]
 80077f8:	b9d8      	cbnz	r0, 8007832 <_svfiprintf_r+0xea>
 80077fa:	06d0      	lsls	r0, r2, #27
 80077fc:	bf44      	itt	mi
 80077fe:	2320      	movmi	r3, #32
 8007800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007804:	0711      	lsls	r1, r2, #28
 8007806:	bf44      	itt	mi
 8007808:	232b      	movmi	r3, #43	@ 0x2b
 800780a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800780e:	f89a 3000 	ldrb.w	r3, [sl]
 8007812:	2b2a      	cmp	r3, #42	@ 0x2a
 8007814:	d015      	beq.n	8007842 <_svfiprintf_r+0xfa>
 8007816:	4654      	mov	r4, sl
 8007818:	2000      	movs	r0, #0
 800781a:	f04f 0c0a 	mov.w	ip, #10
 800781e:	9a07      	ldr	r2, [sp, #28]
 8007820:	4621      	mov	r1, r4
 8007822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007826:	3b30      	subs	r3, #48	@ 0x30
 8007828:	2b09      	cmp	r3, #9
 800782a:	d94b      	bls.n	80078c4 <_svfiprintf_r+0x17c>
 800782c:	b1b0      	cbz	r0, 800785c <_svfiprintf_r+0x114>
 800782e:	9207      	str	r2, [sp, #28]
 8007830:	e014      	b.n	800785c <_svfiprintf_r+0x114>
 8007832:	eba0 0308 	sub.w	r3, r0, r8
 8007836:	fa09 f303 	lsl.w	r3, r9, r3
 800783a:	4313      	orrs	r3, r2
 800783c:	46a2      	mov	sl, r4
 800783e:	9304      	str	r3, [sp, #16]
 8007840:	e7d2      	b.n	80077e8 <_svfiprintf_r+0xa0>
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	1d19      	adds	r1, r3, #4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	9103      	str	r1, [sp, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	bfbb      	ittet	lt
 800784e:	425b      	neglt	r3, r3
 8007850:	f042 0202 	orrlt.w	r2, r2, #2
 8007854:	9307      	strge	r3, [sp, #28]
 8007856:	9307      	strlt	r3, [sp, #28]
 8007858:	bfb8      	it	lt
 800785a:	9204      	strlt	r2, [sp, #16]
 800785c:	7823      	ldrb	r3, [r4, #0]
 800785e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007860:	d10a      	bne.n	8007878 <_svfiprintf_r+0x130>
 8007862:	7863      	ldrb	r3, [r4, #1]
 8007864:	2b2a      	cmp	r3, #42	@ 0x2a
 8007866:	d132      	bne.n	80078ce <_svfiprintf_r+0x186>
 8007868:	9b03      	ldr	r3, [sp, #12]
 800786a:	3402      	adds	r4, #2
 800786c:	1d1a      	adds	r2, r3, #4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	9203      	str	r2, [sp, #12]
 8007872:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007876:	9305      	str	r3, [sp, #20]
 8007878:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007930 <_svfiprintf_r+0x1e8>
 800787c:	2203      	movs	r2, #3
 800787e:	4650      	mov	r0, sl
 8007880:	7821      	ldrb	r1, [r4, #0]
 8007882:	f7fe fc22 	bl	80060ca <memchr>
 8007886:	b138      	cbz	r0, 8007898 <_svfiprintf_r+0x150>
 8007888:	2240      	movs	r2, #64	@ 0x40
 800788a:	9b04      	ldr	r3, [sp, #16]
 800788c:	eba0 000a 	sub.w	r0, r0, sl
 8007890:	4082      	lsls	r2, r0
 8007892:	4313      	orrs	r3, r2
 8007894:	3401      	adds	r4, #1
 8007896:	9304      	str	r3, [sp, #16]
 8007898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789c:	2206      	movs	r2, #6
 800789e:	4825      	ldr	r0, [pc, #148]	@ (8007934 <_svfiprintf_r+0x1ec>)
 80078a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078a4:	f7fe fc11 	bl	80060ca <memchr>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d036      	beq.n	800791a <_svfiprintf_r+0x1d2>
 80078ac:	4b22      	ldr	r3, [pc, #136]	@ (8007938 <_svfiprintf_r+0x1f0>)
 80078ae:	bb1b      	cbnz	r3, 80078f8 <_svfiprintf_r+0x1b0>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	3307      	adds	r3, #7
 80078b4:	f023 0307 	bic.w	r3, r3, #7
 80078b8:	3308      	adds	r3, #8
 80078ba:	9303      	str	r3, [sp, #12]
 80078bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078be:	4433      	add	r3, r6
 80078c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c2:	e76a      	b.n	800779a <_svfiprintf_r+0x52>
 80078c4:	460c      	mov	r4, r1
 80078c6:	2001      	movs	r0, #1
 80078c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078cc:	e7a8      	b.n	8007820 <_svfiprintf_r+0xd8>
 80078ce:	2300      	movs	r3, #0
 80078d0:	f04f 0c0a 	mov.w	ip, #10
 80078d4:	4619      	mov	r1, r3
 80078d6:	3401      	adds	r4, #1
 80078d8:	9305      	str	r3, [sp, #20]
 80078da:	4620      	mov	r0, r4
 80078dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e0:	3a30      	subs	r2, #48	@ 0x30
 80078e2:	2a09      	cmp	r2, #9
 80078e4:	d903      	bls.n	80078ee <_svfiprintf_r+0x1a6>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0c6      	beq.n	8007878 <_svfiprintf_r+0x130>
 80078ea:	9105      	str	r1, [sp, #20]
 80078ec:	e7c4      	b.n	8007878 <_svfiprintf_r+0x130>
 80078ee:	4604      	mov	r4, r0
 80078f0:	2301      	movs	r3, #1
 80078f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078f6:	e7f0      	b.n	80078da <_svfiprintf_r+0x192>
 80078f8:	ab03      	add	r3, sp, #12
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	462a      	mov	r2, r5
 80078fe:	4638      	mov	r0, r7
 8007900:	4b0e      	ldr	r3, [pc, #56]	@ (800793c <_svfiprintf_r+0x1f4>)
 8007902:	a904      	add	r1, sp, #16
 8007904:	f7fd fd0c 	bl	8005320 <_printf_float>
 8007908:	1c42      	adds	r2, r0, #1
 800790a:	4606      	mov	r6, r0
 800790c:	d1d6      	bne.n	80078bc <_svfiprintf_r+0x174>
 800790e:	89ab      	ldrh	r3, [r5, #12]
 8007910:	065b      	lsls	r3, r3, #25
 8007912:	f53f af2d 	bmi.w	8007770 <_svfiprintf_r+0x28>
 8007916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007918:	e72c      	b.n	8007774 <_svfiprintf_r+0x2c>
 800791a:	ab03      	add	r3, sp, #12
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	462a      	mov	r2, r5
 8007920:	4638      	mov	r0, r7
 8007922:	4b06      	ldr	r3, [pc, #24]	@ (800793c <_svfiprintf_r+0x1f4>)
 8007924:	a904      	add	r1, sp, #16
 8007926:	f7fd ff99 	bl	800585c <_printf_i>
 800792a:	e7ed      	b.n	8007908 <_svfiprintf_r+0x1c0>
 800792c:	08008851 	.word	0x08008851
 8007930:	08008857 	.word	0x08008857
 8007934:	0800885b 	.word	0x0800885b
 8007938:	08005321 	.word	0x08005321
 800793c:	08007691 	.word	0x08007691

08007940 <__sfputc_r>:
 8007940:	6893      	ldr	r3, [r2, #8]
 8007942:	b410      	push	{r4}
 8007944:	3b01      	subs	r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	6093      	str	r3, [r2, #8]
 800794a:	da07      	bge.n	800795c <__sfputc_r+0x1c>
 800794c:	6994      	ldr	r4, [r2, #24]
 800794e:	42a3      	cmp	r3, r4
 8007950:	db01      	blt.n	8007956 <__sfputc_r+0x16>
 8007952:	290a      	cmp	r1, #10
 8007954:	d102      	bne.n	800795c <__sfputc_r+0x1c>
 8007956:	bc10      	pop	{r4}
 8007958:	f7fe ba72 	b.w	8005e40 <__swbuf_r>
 800795c:	6813      	ldr	r3, [r2, #0]
 800795e:	1c58      	adds	r0, r3, #1
 8007960:	6010      	str	r0, [r2, #0]
 8007962:	7019      	strb	r1, [r3, #0]
 8007964:	4608      	mov	r0, r1
 8007966:	bc10      	pop	{r4}
 8007968:	4770      	bx	lr

0800796a <__sfputs_r>:
 800796a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796c:	4606      	mov	r6, r0
 800796e:	460f      	mov	r7, r1
 8007970:	4614      	mov	r4, r2
 8007972:	18d5      	adds	r5, r2, r3
 8007974:	42ac      	cmp	r4, r5
 8007976:	d101      	bne.n	800797c <__sfputs_r+0x12>
 8007978:	2000      	movs	r0, #0
 800797a:	e007      	b.n	800798c <__sfputs_r+0x22>
 800797c:	463a      	mov	r2, r7
 800797e:	4630      	mov	r0, r6
 8007980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007984:	f7ff ffdc 	bl	8007940 <__sfputc_r>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d1f3      	bne.n	8007974 <__sfputs_r+0xa>
 800798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007990 <_vfiprintf_r>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	460d      	mov	r5, r1
 8007996:	4614      	mov	r4, r2
 8007998:	4698      	mov	r8, r3
 800799a:	4606      	mov	r6, r0
 800799c:	b09d      	sub	sp, #116	@ 0x74
 800799e:	b118      	cbz	r0, 80079a8 <_vfiprintf_r+0x18>
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	b90b      	cbnz	r3, 80079a8 <_vfiprintf_r+0x18>
 80079a4:	f7fe f904 	bl	8005bb0 <__sinit>
 80079a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079aa:	07d9      	lsls	r1, r3, #31
 80079ac:	d405      	bmi.n	80079ba <_vfiprintf_r+0x2a>
 80079ae:	89ab      	ldrh	r3, [r5, #12]
 80079b0:	059a      	lsls	r2, r3, #22
 80079b2:	d402      	bmi.n	80079ba <_vfiprintf_r+0x2a>
 80079b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079b6:	f7fe fb86 	bl	80060c6 <__retarget_lock_acquire_recursive>
 80079ba:	89ab      	ldrh	r3, [r5, #12]
 80079bc:	071b      	lsls	r3, r3, #28
 80079be:	d501      	bpl.n	80079c4 <_vfiprintf_r+0x34>
 80079c0:	692b      	ldr	r3, [r5, #16]
 80079c2:	b99b      	cbnz	r3, 80079ec <_vfiprintf_r+0x5c>
 80079c4:	4629      	mov	r1, r5
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7fe fa78 	bl	8005ebc <__swsetup_r>
 80079cc:	b170      	cbz	r0, 80079ec <_vfiprintf_r+0x5c>
 80079ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079d0:	07dc      	lsls	r4, r3, #31
 80079d2:	d504      	bpl.n	80079de <_vfiprintf_r+0x4e>
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	b01d      	add	sp, #116	@ 0x74
 80079da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079de:	89ab      	ldrh	r3, [r5, #12]
 80079e0:	0598      	lsls	r0, r3, #22
 80079e2:	d4f7      	bmi.n	80079d4 <_vfiprintf_r+0x44>
 80079e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079e6:	f7fe fb6f 	bl	80060c8 <__retarget_lock_release_recursive>
 80079ea:	e7f3      	b.n	80079d4 <_vfiprintf_r+0x44>
 80079ec:	2300      	movs	r3, #0
 80079ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80079f0:	2320      	movs	r3, #32
 80079f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079f6:	2330      	movs	r3, #48	@ 0x30
 80079f8:	f04f 0901 	mov.w	r9, #1
 80079fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a00:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007bac <_vfiprintf_r+0x21c>
 8007a04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a08:	4623      	mov	r3, r4
 8007a0a:	469a      	mov	sl, r3
 8007a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a10:	b10a      	cbz	r2, 8007a16 <_vfiprintf_r+0x86>
 8007a12:	2a25      	cmp	r2, #37	@ 0x25
 8007a14:	d1f9      	bne.n	8007a0a <_vfiprintf_r+0x7a>
 8007a16:	ebba 0b04 	subs.w	fp, sl, r4
 8007a1a:	d00b      	beq.n	8007a34 <_vfiprintf_r+0xa4>
 8007a1c:	465b      	mov	r3, fp
 8007a1e:	4622      	mov	r2, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7ff ffa1 	bl	800796a <__sfputs_r>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f000 80a7 	beq.w	8007b7c <_vfiprintf_r+0x1ec>
 8007a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a30:	445a      	add	r2, fp
 8007a32:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a34:	f89a 3000 	ldrb.w	r3, [sl]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 809f 	beq.w	8007b7c <_vfiprintf_r+0x1ec>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f04f 32ff 	mov.w	r2, #4294967295
 8007a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a48:	f10a 0a01 	add.w	sl, sl, #1
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	9307      	str	r3, [sp, #28]
 8007a50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a54:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a56:	4654      	mov	r4, sl
 8007a58:	2205      	movs	r2, #5
 8007a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5e:	4853      	ldr	r0, [pc, #332]	@ (8007bac <_vfiprintf_r+0x21c>)
 8007a60:	f7fe fb33 	bl	80060ca <memchr>
 8007a64:	9a04      	ldr	r2, [sp, #16]
 8007a66:	b9d8      	cbnz	r0, 8007aa0 <_vfiprintf_r+0x110>
 8007a68:	06d1      	lsls	r1, r2, #27
 8007a6a:	bf44      	itt	mi
 8007a6c:	2320      	movmi	r3, #32
 8007a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a72:	0713      	lsls	r3, r2, #28
 8007a74:	bf44      	itt	mi
 8007a76:	232b      	movmi	r3, #43	@ 0x2b
 8007a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a82:	d015      	beq.n	8007ab0 <_vfiprintf_r+0x120>
 8007a84:	4654      	mov	r4, sl
 8007a86:	2000      	movs	r0, #0
 8007a88:	f04f 0c0a 	mov.w	ip, #10
 8007a8c:	9a07      	ldr	r2, [sp, #28]
 8007a8e:	4621      	mov	r1, r4
 8007a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a94:	3b30      	subs	r3, #48	@ 0x30
 8007a96:	2b09      	cmp	r3, #9
 8007a98:	d94b      	bls.n	8007b32 <_vfiprintf_r+0x1a2>
 8007a9a:	b1b0      	cbz	r0, 8007aca <_vfiprintf_r+0x13a>
 8007a9c:	9207      	str	r2, [sp, #28]
 8007a9e:	e014      	b.n	8007aca <_vfiprintf_r+0x13a>
 8007aa0:	eba0 0308 	sub.w	r3, r0, r8
 8007aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	46a2      	mov	sl, r4
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	e7d2      	b.n	8007a56 <_vfiprintf_r+0xc6>
 8007ab0:	9b03      	ldr	r3, [sp, #12]
 8007ab2:	1d19      	adds	r1, r3, #4
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	9103      	str	r1, [sp, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bfbb      	ittet	lt
 8007abc:	425b      	neglt	r3, r3
 8007abe:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac2:	9307      	strge	r3, [sp, #28]
 8007ac4:	9307      	strlt	r3, [sp, #28]
 8007ac6:	bfb8      	it	lt
 8007ac8:	9204      	strlt	r2, [sp, #16]
 8007aca:	7823      	ldrb	r3, [r4, #0]
 8007acc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ace:	d10a      	bne.n	8007ae6 <_vfiprintf_r+0x156>
 8007ad0:	7863      	ldrb	r3, [r4, #1]
 8007ad2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ad4:	d132      	bne.n	8007b3c <_vfiprintf_r+0x1ac>
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	3402      	adds	r4, #2
 8007ada:	1d1a      	adds	r2, r3, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	9203      	str	r2, [sp, #12]
 8007ae0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007bb0 <_vfiprintf_r+0x220>
 8007aea:	2203      	movs	r2, #3
 8007aec:	4650      	mov	r0, sl
 8007aee:	7821      	ldrb	r1, [r4, #0]
 8007af0:	f7fe faeb 	bl	80060ca <memchr>
 8007af4:	b138      	cbz	r0, 8007b06 <_vfiprintf_r+0x176>
 8007af6:	2240      	movs	r2, #64	@ 0x40
 8007af8:	9b04      	ldr	r3, [sp, #16]
 8007afa:	eba0 000a 	sub.w	r0, r0, sl
 8007afe:	4082      	lsls	r2, r0
 8007b00:	4313      	orrs	r3, r2
 8007b02:	3401      	adds	r4, #1
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0a:	2206      	movs	r2, #6
 8007b0c:	4829      	ldr	r0, [pc, #164]	@ (8007bb4 <_vfiprintf_r+0x224>)
 8007b0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b12:	f7fe fada 	bl	80060ca <memchr>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d03f      	beq.n	8007b9a <_vfiprintf_r+0x20a>
 8007b1a:	4b27      	ldr	r3, [pc, #156]	@ (8007bb8 <_vfiprintf_r+0x228>)
 8007b1c:	bb1b      	cbnz	r3, 8007b66 <_vfiprintf_r+0x1d6>
 8007b1e:	9b03      	ldr	r3, [sp, #12]
 8007b20:	3307      	adds	r3, #7
 8007b22:	f023 0307 	bic.w	r3, r3, #7
 8007b26:	3308      	adds	r3, #8
 8007b28:	9303      	str	r3, [sp, #12]
 8007b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b2c:	443b      	add	r3, r7
 8007b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b30:	e76a      	b.n	8007a08 <_vfiprintf_r+0x78>
 8007b32:	460c      	mov	r4, r1
 8007b34:	2001      	movs	r0, #1
 8007b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b3a:	e7a8      	b.n	8007a8e <_vfiprintf_r+0xfe>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f04f 0c0a 	mov.w	ip, #10
 8007b42:	4619      	mov	r1, r3
 8007b44:	3401      	adds	r4, #1
 8007b46:	9305      	str	r3, [sp, #20]
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b4e:	3a30      	subs	r2, #48	@ 0x30
 8007b50:	2a09      	cmp	r2, #9
 8007b52:	d903      	bls.n	8007b5c <_vfiprintf_r+0x1cc>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0c6      	beq.n	8007ae6 <_vfiprintf_r+0x156>
 8007b58:	9105      	str	r1, [sp, #20]
 8007b5a:	e7c4      	b.n	8007ae6 <_vfiprintf_r+0x156>
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	2301      	movs	r3, #1
 8007b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b64:	e7f0      	b.n	8007b48 <_vfiprintf_r+0x1b8>
 8007b66:	ab03      	add	r3, sp, #12
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4b13      	ldr	r3, [pc, #76]	@ (8007bbc <_vfiprintf_r+0x22c>)
 8007b70:	a904      	add	r1, sp, #16
 8007b72:	f7fd fbd5 	bl	8005320 <_printf_float>
 8007b76:	4607      	mov	r7, r0
 8007b78:	1c78      	adds	r0, r7, #1
 8007b7a:	d1d6      	bne.n	8007b2a <_vfiprintf_r+0x19a>
 8007b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b7e:	07d9      	lsls	r1, r3, #31
 8007b80:	d405      	bmi.n	8007b8e <_vfiprintf_r+0x1fe>
 8007b82:	89ab      	ldrh	r3, [r5, #12]
 8007b84:	059a      	lsls	r2, r3, #22
 8007b86:	d402      	bmi.n	8007b8e <_vfiprintf_r+0x1fe>
 8007b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b8a:	f7fe fa9d 	bl	80060c8 <__retarget_lock_release_recursive>
 8007b8e:	89ab      	ldrh	r3, [r5, #12]
 8007b90:	065b      	lsls	r3, r3, #25
 8007b92:	f53f af1f 	bmi.w	80079d4 <_vfiprintf_r+0x44>
 8007b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b98:	e71e      	b.n	80079d8 <_vfiprintf_r+0x48>
 8007b9a:	ab03      	add	r3, sp, #12
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	4b06      	ldr	r3, [pc, #24]	@ (8007bbc <_vfiprintf_r+0x22c>)
 8007ba4:	a904      	add	r1, sp, #16
 8007ba6:	f7fd fe59 	bl	800585c <_printf_i>
 8007baa:	e7e4      	b.n	8007b76 <_vfiprintf_r+0x1e6>
 8007bac:	08008851 	.word	0x08008851
 8007bb0:	08008857 	.word	0x08008857
 8007bb4:	0800885b 	.word	0x0800885b
 8007bb8:	08005321 	.word	0x08005321
 8007bbc:	0800796b 	.word	0x0800796b

08007bc0 <__sflush_r>:
 8007bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	0716      	lsls	r6, r2, #28
 8007bc8:	4605      	mov	r5, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	d454      	bmi.n	8007c78 <__sflush_r+0xb8>
 8007bce:	684b      	ldr	r3, [r1, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	dc02      	bgt.n	8007bda <__sflush_r+0x1a>
 8007bd4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dd48      	ble.n	8007c6c <__sflush_r+0xac>
 8007bda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bdc:	2e00      	cmp	r6, #0
 8007bde:	d045      	beq.n	8007c6c <__sflush_r+0xac>
 8007be0:	2300      	movs	r3, #0
 8007be2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007be6:	682f      	ldr	r7, [r5, #0]
 8007be8:	6a21      	ldr	r1, [r4, #32]
 8007bea:	602b      	str	r3, [r5, #0]
 8007bec:	d030      	beq.n	8007c50 <__sflush_r+0x90>
 8007bee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	0759      	lsls	r1, r3, #29
 8007bf4:	d505      	bpl.n	8007c02 <__sflush_r+0x42>
 8007bf6:	6863      	ldr	r3, [r4, #4]
 8007bf8:	1ad2      	subs	r2, r2, r3
 8007bfa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bfc:	b10b      	cbz	r3, 8007c02 <__sflush_r+0x42>
 8007bfe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c00:	1ad2      	subs	r2, r2, r3
 8007c02:	2300      	movs	r3, #0
 8007c04:	4628      	mov	r0, r5
 8007c06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c08:	6a21      	ldr	r1, [r4, #32]
 8007c0a:	47b0      	blx	r6
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	d106      	bne.n	8007c20 <__sflush_r+0x60>
 8007c12:	6829      	ldr	r1, [r5, #0]
 8007c14:	291d      	cmp	r1, #29
 8007c16:	d82b      	bhi.n	8007c70 <__sflush_r+0xb0>
 8007c18:	4a28      	ldr	r2, [pc, #160]	@ (8007cbc <__sflush_r+0xfc>)
 8007c1a:	40ca      	lsrs	r2, r1
 8007c1c:	07d6      	lsls	r6, r2, #31
 8007c1e:	d527      	bpl.n	8007c70 <__sflush_r+0xb0>
 8007c20:	2200      	movs	r2, #0
 8007c22:	6062      	str	r2, [r4, #4]
 8007c24:	6922      	ldr	r2, [r4, #16]
 8007c26:	04d9      	lsls	r1, r3, #19
 8007c28:	6022      	str	r2, [r4, #0]
 8007c2a:	d504      	bpl.n	8007c36 <__sflush_r+0x76>
 8007c2c:	1c42      	adds	r2, r0, #1
 8007c2e:	d101      	bne.n	8007c34 <__sflush_r+0x74>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b903      	cbnz	r3, 8007c36 <__sflush_r+0x76>
 8007c34:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c38:	602f      	str	r7, [r5, #0]
 8007c3a:	b1b9      	cbz	r1, 8007c6c <__sflush_r+0xac>
 8007c3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c40:	4299      	cmp	r1, r3
 8007c42:	d002      	beq.n	8007c4a <__sflush_r+0x8a>
 8007c44:	4628      	mov	r0, r5
 8007c46:	f7ff f8ab 	bl	8006da0 <_free_r>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c4e:	e00d      	b.n	8007c6c <__sflush_r+0xac>
 8007c50:	2301      	movs	r3, #1
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b0      	blx	r6
 8007c56:	4602      	mov	r2, r0
 8007c58:	1c50      	adds	r0, r2, #1
 8007c5a:	d1c9      	bne.n	8007bf0 <__sflush_r+0x30>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0c6      	beq.n	8007bf0 <__sflush_r+0x30>
 8007c62:	2b1d      	cmp	r3, #29
 8007c64:	d001      	beq.n	8007c6a <__sflush_r+0xaa>
 8007c66:	2b16      	cmp	r3, #22
 8007c68:	d11d      	bne.n	8007ca6 <__sflush_r+0xe6>
 8007c6a:	602f      	str	r7, [r5, #0]
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e021      	b.n	8007cb4 <__sflush_r+0xf4>
 8007c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c74:	b21b      	sxth	r3, r3
 8007c76:	e01a      	b.n	8007cae <__sflush_r+0xee>
 8007c78:	690f      	ldr	r7, [r1, #16]
 8007c7a:	2f00      	cmp	r7, #0
 8007c7c:	d0f6      	beq.n	8007c6c <__sflush_r+0xac>
 8007c7e:	0793      	lsls	r3, r2, #30
 8007c80:	bf18      	it	ne
 8007c82:	2300      	movne	r3, #0
 8007c84:	680e      	ldr	r6, [r1, #0]
 8007c86:	bf08      	it	eq
 8007c88:	694b      	ldreq	r3, [r1, #20]
 8007c8a:	1bf6      	subs	r6, r6, r7
 8007c8c:	600f      	str	r7, [r1, #0]
 8007c8e:	608b      	str	r3, [r1, #8]
 8007c90:	2e00      	cmp	r6, #0
 8007c92:	ddeb      	ble.n	8007c6c <__sflush_r+0xac>
 8007c94:	4633      	mov	r3, r6
 8007c96:	463a      	mov	r2, r7
 8007c98:	4628      	mov	r0, r5
 8007c9a:	6a21      	ldr	r1, [r4, #32]
 8007c9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007ca0:	47e0      	blx	ip
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	dc07      	bgt.n	8007cb6 <__sflush_r+0xf6>
 8007ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cae:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cb6:	4407      	add	r7, r0
 8007cb8:	1a36      	subs	r6, r6, r0
 8007cba:	e7e9      	b.n	8007c90 <__sflush_r+0xd0>
 8007cbc:	20400001 	.word	0x20400001

08007cc0 <_fflush_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	690b      	ldr	r3, [r1, #16]
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	b913      	cbnz	r3, 8007cd0 <_fflush_r+0x10>
 8007cca:	2500      	movs	r5, #0
 8007ccc:	4628      	mov	r0, r5
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	b118      	cbz	r0, 8007cda <_fflush_r+0x1a>
 8007cd2:	6a03      	ldr	r3, [r0, #32]
 8007cd4:	b90b      	cbnz	r3, 8007cda <_fflush_r+0x1a>
 8007cd6:	f7fd ff6b 	bl	8005bb0 <__sinit>
 8007cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0f3      	beq.n	8007cca <_fflush_r+0xa>
 8007ce2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ce4:	07d0      	lsls	r0, r2, #31
 8007ce6:	d404      	bmi.n	8007cf2 <_fflush_r+0x32>
 8007ce8:	0599      	lsls	r1, r3, #22
 8007cea:	d402      	bmi.n	8007cf2 <_fflush_r+0x32>
 8007cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cee:	f7fe f9ea 	bl	80060c6 <__retarget_lock_acquire_recursive>
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	f7ff ff63 	bl	8007bc0 <__sflush_r>
 8007cfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	07da      	lsls	r2, r3, #31
 8007d00:	d4e4      	bmi.n	8007ccc <_fflush_r+0xc>
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	059b      	lsls	r3, r3, #22
 8007d06:	d4e1      	bmi.n	8007ccc <_fflush_r+0xc>
 8007d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d0a:	f7fe f9dd 	bl	80060c8 <__retarget_lock_release_recursive>
 8007d0e:	e7dd      	b.n	8007ccc <_fflush_r+0xc>

08007d10 <__swhatbuf_r>:
 8007d10:	b570      	push	{r4, r5, r6, lr}
 8007d12:	460c      	mov	r4, r1
 8007d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d18:	4615      	mov	r5, r2
 8007d1a:	2900      	cmp	r1, #0
 8007d1c:	461e      	mov	r6, r3
 8007d1e:	b096      	sub	sp, #88	@ 0x58
 8007d20:	da0c      	bge.n	8007d3c <__swhatbuf_r+0x2c>
 8007d22:	89a3      	ldrh	r3, [r4, #12]
 8007d24:	2100      	movs	r1, #0
 8007d26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d2a:	bf14      	ite	ne
 8007d2c:	2340      	movne	r3, #64	@ 0x40
 8007d2e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d32:	2000      	movs	r0, #0
 8007d34:	6031      	str	r1, [r6, #0]
 8007d36:	602b      	str	r3, [r5, #0]
 8007d38:	b016      	add	sp, #88	@ 0x58
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	466a      	mov	r2, sp
 8007d3e:	f000 f863 	bl	8007e08 <_fstat_r>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	dbed      	blt.n	8007d22 <__swhatbuf_r+0x12>
 8007d46:	9901      	ldr	r1, [sp, #4]
 8007d48:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d4c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d50:	4259      	negs	r1, r3
 8007d52:	4159      	adcs	r1, r3
 8007d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d58:	e7eb      	b.n	8007d32 <__swhatbuf_r+0x22>

08007d5a <__smakebuf_r>:
 8007d5a:	898b      	ldrh	r3, [r1, #12]
 8007d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d5e:	079d      	lsls	r5, r3, #30
 8007d60:	4606      	mov	r6, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	d507      	bpl.n	8007d76 <__smakebuf_r+0x1c>
 8007d66:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d6a:	6023      	str	r3, [r4, #0]
 8007d6c:	6123      	str	r3, [r4, #16]
 8007d6e:	2301      	movs	r3, #1
 8007d70:	6163      	str	r3, [r4, #20]
 8007d72:	b003      	add	sp, #12
 8007d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d76:	466a      	mov	r2, sp
 8007d78:	ab01      	add	r3, sp, #4
 8007d7a:	f7ff ffc9 	bl	8007d10 <__swhatbuf_r>
 8007d7e:	9f00      	ldr	r7, [sp, #0]
 8007d80:	4605      	mov	r5, r0
 8007d82:	4639      	mov	r1, r7
 8007d84:	4630      	mov	r0, r6
 8007d86:	f7ff f87d 	bl	8006e84 <_malloc_r>
 8007d8a:	b948      	cbnz	r0, 8007da0 <__smakebuf_r+0x46>
 8007d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d90:	059a      	lsls	r2, r3, #22
 8007d92:	d4ee      	bmi.n	8007d72 <__smakebuf_r+0x18>
 8007d94:	f023 0303 	bic.w	r3, r3, #3
 8007d98:	f043 0302 	orr.w	r3, r3, #2
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	e7e2      	b.n	8007d66 <__smakebuf_r+0xc>
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007daa:	81a3      	strh	r3, [r4, #12]
 8007dac:	9b01      	ldr	r3, [sp, #4]
 8007dae:	6020      	str	r0, [r4, #0]
 8007db0:	b15b      	cbz	r3, 8007dca <__smakebuf_r+0x70>
 8007db2:	4630      	mov	r0, r6
 8007db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db8:	f000 f838 	bl	8007e2c <_isatty_r>
 8007dbc:	b128      	cbz	r0, 8007dca <__smakebuf_r+0x70>
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f023 0303 	bic.w	r3, r3, #3
 8007dc4:	f043 0301 	orr.w	r3, r3, #1
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	431d      	orrs	r5, r3
 8007dce:	81a5      	strh	r5, [r4, #12]
 8007dd0:	e7cf      	b.n	8007d72 <__smakebuf_r+0x18>

08007dd2 <memmove>:
 8007dd2:	4288      	cmp	r0, r1
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	eb01 0402 	add.w	r4, r1, r2
 8007dda:	d902      	bls.n	8007de2 <memmove+0x10>
 8007ddc:	4284      	cmp	r4, r0
 8007dde:	4623      	mov	r3, r4
 8007de0:	d807      	bhi.n	8007df2 <memmove+0x20>
 8007de2:	1e43      	subs	r3, r0, #1
 8007de4:	42a1      	cmp	r1, r4
 8007de6:	d008      	beq.n	8007dfa <memmove+0x28>
 8007de8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007df0:	e7f8      	b.n	8007de4 <memmove+0x12>
 8007df2:	4601      	mov	r1, r0
 8007df4:	4402      	add	r2, r0
 8007df6:	428a      	cmp	r2, r1
 8007df8:	d100      	bne.n	8007dfc <memmove+0x2a>
 8007dfa:	bd10      	pop	{r4, pc}
 8007dfc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e00:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e04:	e7f7      	b.n	8007df6 <memmove+0x24>
	...

08007e08 <_fstat_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4d06      	ldr	r5, [pc, #24]	@ (8007e28 <_fstat_r+0x20>)
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	4611      	mov	r1, r2
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	f7fa fba1 	bl	800255c <_fstat>
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	d102      	bne.n	8007e24 <_fstat_r+0x1c>
 8007e1e:	682b      	ldr	r3, [r5, #0]
 8007e20:	b103      	cbz	r3, 8007e24 <_fstat_r+0x1c>
 8007e22:	6023      	str	r3, [r4, #0]
 8007e24:	bd38      	pop	{r3, r4, r5, pc}
 8007e26:	bf00      	nop
 8007e28:	20000cdc 	.word	0x20000cdc

08007e2c <_isatty_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	2300      	movs	r3, #0
 8007e30:	4d05      	ldr	r5, [pc, #20]	@ (8007e48 <_isatty_r+0x1c>)
 8007e32:	4604      	mov	r4, r0
 8007e34:	4608      	mov	r0, r1
 8007e36:	602b      	str	r3, [r5, #0]
 8007e38:	f7fa fb9f 	bl	800257a <_isatty>
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	d102      	bne.n	8007e46 <_isatty_r+0x1a>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	b103      	cbz	r3, 8007e46 <_isatty_r+0x1a>
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
 8007e48:	20000cdc 	.word	0x20000cdc

08007e4c <_sbrk_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4d05      	ldr	r5, [pc, #20]	@ (8007e68 <_sbrk_r+0x1c>)
 8007e52:	4604      	mov	r4, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	602b      	str	r3, [r5, #0]
 8007e58:	f7fa fba6 	bl	80025a8 <_sbrk>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_sbrk_r+0x1a>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_sbrk_r+0x1a>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20000cdc 	.word	0x20000cdc

08007e6c <memcpy>:
 8007e6c:	440a      	add	r2, r1
 8007e6e:	4291      	cmp	r1, r2
 8007e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e74:	d100      	bne.n	8007e78 <memcpy+0xc>
 8007e76:	4770      	bx	lr
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e7e:	4291      	cmp	r1, r2
 8007e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e84:	d1f9      	bne.n	8007e7a <memcpy+0xe>
 8007e86:	bd10      	pop	{r4, pc}

08007e88 <__assert_func>:
 8007e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e8a:	4614      	mov	r4, r2
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	4b09      	ldr	r3, [pc, #36]	@ (8007eb4 <__assert_func+0x2c>)
 8007e90:	4605      	mov	r5, r0
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68d8      	ldr	r0, [r3, #12]
 8007e96:	b14c      	cbz	r4, 8007eac <__assert_func+0x24>
 8007e98:	4b07      	ldr	r3, [pc, #28]	@ (8007eb8 <__assert_func+0x30>)
 8007e9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e9e:	9100      	str	r1, [sp, #0]
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	4906      	ldr	r1, [pc, #24]	@ (8007ebc <__assert_func+0x34>)
 8007ea4:	f000 f870 	bl	8007f88 <fiprintf>
 8007ea8:	f000 f880 	bl	8007fac <abort>
 8007eac:	4b04      	ldr	r3, [pc, #16]	@ (8007ec0 <__assert_func+0x38>)
 8007eae:	461c      	mov	r4, r3
 8007eb0:	e7f3      	b.n	8007e9a <__assert_func+0x12>
 8007eb2:	bf00      	nop
 8007eb4:	20000018 	.word	0x20000018
 8007eb8:	0800886c 	.word	0x0800886c
 8007ebc:	08008879 	.word	0x08008879
 8007ec0:	080088a7 	.word	0x080088a7

08007ec4 <_calloc_r>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	fba1 5402 	umull	r5, r4, r1, r2
 8007eca:	b934      	cbnz	r4, 8007eda <_calloc_r+0x16>
 8007ecc:	4629      	mov	r1, r5
 8007ece:	f7fe ffd9 	bl	8006e84 <_malloc_r>
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	b928      	cbnz	r0, 8007ee2 <_calloc_r+0x1e>
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	bd70      	pop	{r4, r5, r6, pc}
 8007eda:	220c      	movs	r2, #12
 8007edc:	2600      	movs	r6, #0
 8007ede:	6002      	str	r2, [r0, #0]
 8007ee0:	e7f9      	b.n	8007ed6 <_calloc_r+0x12>
 8007ee2:	462a      	mov	r2, r5
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	f7fe f83f 	bl	8005f68 <memset>
 8007eea:	e7f4      	b.n	8007ed6 <_calloc_r+0x12>

08007eec <__ascii_mbtowc>:
 8007eec:	b082      	sub	sp, #8
 8007eee:	b901      	cbnz	r1, 8007ef2 <__ascii_mbtowc+0x6>
 8007ef0:	a901      	add	r1, sp, #4
 8007ef2:	b142      	cbz	r2, 8007f06 <__ascii_mbtowc+0x1a>
 8007ef4:	b14b      	cbz	r3, 8007f0a <__ascii_mbtowc+0x1e>
 8007ef6:	7813      	ldrb	r3, [r2, #0]
 8007ef8:	600b      	str	r3, [r1, #0]
 8007efa:	7812      	ldrb	r2, [r2, #0]
 8007efc:	1e10      	subs	r0, r2, #0
 8007efe:	bf18      	it	ne
 8007f00:	2001      	movne	r0, #1
 8007f02:	b002      	add	sp, #8
 8007f04:	4770      	bx	lr
 8007f06:	4610      	mov	r0, r2
 8007f08:	e7fb      	b.n	8007f02 <__ascii_mbtowc+0x16>
 8007f0a:	f06f 0001 	mvn.w	r0, #1
 8007f0e:	e7f8      	b.n	8007f02 <__ascii_mbtowc+0x16>

08007f10 <_realloc_r>:
 8007f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f14:	4607      	mov	r7, r0
 8007f16:	4614      	mov	r4, r2
 8007f18:	460d      	mov	r5, r1
 8007f1a:	b921      	cbnz	r1, 8007f26 <_realloc_r+0x16>
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f22:	f7fe bfaf 	b.w	8006e84 <_malloc_r>
 8007f26:	b92a      	cbnz	r2, 8007f34 <_realloc_r+0x24>
 8007f28:	f7fe ff3a 	bl	8006da0 <_free_r>
 8007f2c:	4625      	mov	r5, r4
 8007f2e:	4628      	mov	r0, r5
 8007f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f34:	f000 f841 	bl	8007fba <_malloc_usable_size_r>
 8007f38:	4284      	cmp	r4, r0
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	d802      	bhi.n	8007f44 <_realloc_r+0x34>
 8007f3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f42:	d8f4      	bhi.n	8007f2e <_realloc_r+0x1e>
 8007f44:	4621      	mov	r1, r4
 8007f46:	4638      	mov	r0, r7
 8007f48:	f7fe ff9c 	bl	8006e84 <_malloc_r>
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	b908      	cbnz	r0, 8007f54 <_realloc_r+0x44>
 8007f50:	4645      	mov	r5, r8
 8007f52:	e7ec      	b.n	8007f2e <_realloc_r+0x1e>
 8007f54:	42b4      	cmp	r4, r6
 8007f56:	4622      	mov	r2, r4
 8007f58:	4629      	mov	r1, r5
 8007f5a:	bf28      	it	cs
 8007f5c:	4632      	movcs	r2, r6
 8007f5e:	f7ff ff85 	bl	8007e6c <memcpy>
 8007f62:	4629      	mov	r1, r5
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7fe ff1b 	bl	8006da0 <_free_r>
 8007f6a:	e7f1      	b.n	8007f50 <_realloc_r+0x40>

08007f6c <__ascii_wctomb>:
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	4608      	mov	r0, r1
 8007f70:	b141      	cbz	r1, 8007f84 <__ascii_wctomb+0x18>
 8007f72:	2aff      	cmp	r2, #255	@ 0xff
 8007f74:	d904      	bls.n	8007f80 <__ascii_wctomb+0x14>
 8007f76:	228a      	movs	r2, #138	@ 0x8a
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	4770      	bx	lr
 8007f80:	2001      	movs	r0, #1
 8007f82:	700a      	strb	r2, [r1, #0]
 8007f84:	4770      	bx	lr
	...

08007f88 <fiprintf>:
 8007f88:	b40e      	push	{r1, r2, r3}
 8007f8a:	b503      	push	{r0, r1, lr}
 8007f8c:	4601      	mov	r1, r0
 8007f8e:	ab03      	add	r3, sp, #12
 8007f90:	4805      	ldr	r0, [pc, #20]	@ (8007fa8 <fiprintf+0x20>)
 8007f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f96:	6800      	ldr	r0, [r0, #0]
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	f7ff fcf9 	bl	8007990 <_vfiprintf_r>
 8007f9e:	b002      	add	sp, #8
 8007fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa4:	b003      	add	sp, #12
 8007fa6:	4770      	bx	lr
 8007fa8:	20000018 	.word	0x20000018

08007fac <abort>:
 8007fac:	2006      	movs	r0, #6
 8007fae:	b508      	push	{r3, lr}
 8007fb0:	f000 f834 	bl	800801c <raise>
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	f7fa fa9e 	bl	80024f6 <_exit>

08007fba <_malloc_usable_size_r>:
 8007fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fbe:	1f18      	subs	r0, r3, #4
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bfbc      	itt	lt
 8007fc4:	580b      	ldrlt	r3, [r1, r0]
 8007fc6:	18c0      	addlt	r0, r0, r3
 8007fc8:	4770      	bx	lr

08007fca <_raise_r>:
 8007fca:	291f      	cmp	r1, #31
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4605      	mov	r5, r0
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	d904      	bls.n	8007fde <_raise_r+0x14>
 8007fd4:	2316      	movs	r3, #22
 8007fd6:	6003      	str	r3, [r0, #0]
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fdc:	bd38      	pop	{r3, r4, r5, pc}
 8007fde:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007fe0:	b112      	cbz	r2, 8007fe8 <_raise_r+0x1e>
 8007fe2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fe6:	b94b      	cbnz	r3, 8007ffc <_raise_r+0x32>
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f000 f831 	bl	8008050 <_getpid_r>
 8007fee:	4622      	mov	r2, r4
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ff8:	f000 b818 	b.w	800802c <_kill_r>
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d00a      	beq.n	8008016 <_raise_r+0x4c>
 8008000:	1c59      	adds	r1, r3, #1
 8008002:	d103      	bne.n	800800c <_raise_r+0x42>
 8008004:	2316      	movs	r3, #22
 8008006:	6003      	str	r3, [r0, #0]
 8008008:	2001      	movs	r0, #1
 800800a:	e7e7      	b.n	8007fdc <_raise_r+0x12>
 800800c:	2100      	movs	r1, #0
 800800e:	4620      	mov	r0, r4
 8008010:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008014:	4798      	blx	r3
 8008016:	2000      	movs	r0, #0
 8008018:	e7e0      	b.n	8007fdc <_raise_r+0x12>
	...

0800801c <raise>:
 800801c:	4b02      	ldr	r3, [pc, #8]	@ (8008028 <raise+0xc>)
 800801e:	4601      	mov	r1, r0
 8008020:	6818      	ldr	r0, [r3, #0]
 8008022:	f7ff bfd2 	b.w	8007fca <_raise_r>
 8008026:	bf00      	nop
 8008028:	20000018 	.word	0x20000018

0800802c <_kill_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	2300      	movs	r3, #0
 8008030:	4d06      	ldr	r5, [pc, #24]	@ (800804c <_kill_r+0x20>)
 8008032:	4604      	mov	r4, r0
 8008034:	4608      	mov	r0, r1
 8008036:	4611      	mov	r1, r2
 8008038:	602b      	str	r3, [r5, #0]
 800803a:	f7fa fa4c 	bl	80024d6 <_kill>
 800803e:	1c43      	adds	r3, r0, #1
 8008040:	d102      	bne.n	8008048 <_kill_r+0x1c>
 8008042:	682b      	ldr	r3, [r5, #0]
 8008044:	b103      	cbz	r3, 8008048 <_kill_r+0x1c>
 8008046:	6023      	str	r3, [r4, #0]
 8008048:	bd38      	pop	{r3, r4, r5, pc}
 800804a:	bf00      	nop
 800804c:	20000cdc 	.word	0x20000cdc

08008050 <_getpid_r>:
 8008050:	f7fa ba3a 	b.w	80024c8 <_getpid>

08008054 <_init>:
 8008054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008056:	bf00      	nop
 8008058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805a:	bc08      	pop	{r3}
 800805c:	469e      	mov	lr, r3
 800805e:	4770      	bx	lr

08008060 <_fini>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	bf00      	nop
 8008064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008066:	bc08      	pop	{r3}
 8008068:	469e      	mov	lr, r3
 800806a:	4770      	bx	lr
